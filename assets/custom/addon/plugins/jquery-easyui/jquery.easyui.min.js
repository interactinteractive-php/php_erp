var _globalvar = 1;

function getPluginName(target){
    if ($(target).data('treegrid')){
        return 'treegrid';
    } else {
        return 'datagrid';
    }
}
        
! function(e) {
 e.parser = {
  auto: !0,
  onComplete: function(e) {},
  plugins: ["pagination", "linkbutton", "menu", "menubutton", "splitbutton", "progressbar", "tree", "textbox", "filebox", "combo", "combobox", "combotree", "combogrid", "numberbox", "validatebox", "searchbox", "spinner", "numberspinner", "timespinner", "datetimespinner", "calendar", "datebox", "datetimebox", "slider", "layout", "panel", "datagrid", "propertygrid", "treegrid", "tabs", "accordion"],
  parse: function(t) {
   for (var n = [], a = 0; a < e.parser.plugins.length; a++) {
    var i = e.parser.plugins[a],
     o = e(".easyui-" + i, t);
    o.length && (o[i] ? o[i]() : n.push({
     name: i,
     jq: o
    }))
   }
   if (n.length && window.easyloader) {
    for (var r = [], a = 0; a < n.length; a++) r.push(n[a].name);
    easyloader.load(r, function() {
     for (var a = 0; a < n.length; a++) {
      var i = n[a].name,
       o = n[a].jq;
      o[i]()
     }
     e.parser.onComplete.call(e.parser, t)
    })
   } else e.parser.onComplete.call(e.parser, t)
  },
  parseValue: function(t, n, a, i) {
   i = i || 0;
   var o = e.trim(String(n || "")),
    r = o.substr(o.length - 1, 1);
   return "%" == r ? (o = parseInt(o.substr(0, o.length - 1)), o = t.toLowerCase().indexOf("width") >= 0 ? Math.floor((a.width() - i) * o / 100) : Math.floor((a.height() - i) * o / 100)) : o = parseInt(o) || void 0, o
  },
  parseOptions: function(t, n) {
   var a = e(t),
    i = {},
    o = e.trim(a.attr("data-options"));
   if (o && ("{" != o.substring(0, 1) && (o = "{" + o + "}"), i = new Function("return " + o)()), e.map(["width", "height", "left", "top", "minWidth", "maxWidth", "minHeight", "maxHeight"], function(n) {
     var a = e.trim(t.style[n] || "");
     a && (-1 == a.indexOf("%") && (a = parseInt(a) || void 0), i[n] = a)
    }), n) {
    for (var r = {}, d = 0; d < n.length; d++) {
     var s = n[d];
     if ("string" == typeof s) r[s] = a.attr(s);
     else
      for (var l in s) {
       var c = s[l];
       "boolean" == c ? r[l] = a.attr(l) ? "true" == a.attr(l) : void 0 : "number" == c && (r[l] = "0" == a.attr(l) ? 0 : parseFloat(a.attr(l)) || void 0)
      }
    }
    e.extend(i, r)
   }
   return i
  }
 }, e(function() {
  var t = e('<div style="position:absolute;top:-1000px;width:100px;height:100px;padding:5px"></div>').appendTo("body");
  e._boxModel = 100 != t.outerWidth(), t.remove(), !window.easyloader && e.parser.auto && e.parser.parse()
 }), e.fn._outerWidth = function(e) {
  return void 0 == e ? this[0] == window ? this.width() || document.body.clientWidth : this.outerWidth() || 0 : this._size("width", e)
 }, e.fn._outerHeight = function(e) {
  return void 0 == e ? this[0] == window ? this.height() || document.body.clientHeight : this.outerHeight() || 0 : this._size("height", e)
 }, e.fn._scrollLeft = function(t) {
  return void 0 == t ? this.scrollLeft() : this.each(function() {
   e(this).scrollLeft(t)
  })
 }, e.fn._propAttr = e.fn.prop || e.fn.attr, e.fn._size = function(t, n) {
  function a(t, n, a) {
   if (!n.length) return !1;
   var i = e(t)[0],
    o = n[0],
    r = o.fcount || 0;
   return a ? (i.fitted || (i.fitted = !0, o.fcount = r + 1, e(o).addClass("panel-noscroll"), "BODY" == o.tagName && e("html").addClass("panel-fit")), {
    width: e(o).width() || 1,
    height: e(o).height() || 1
   }) : (i.fitted && (i.fitted = !1, o.fcount = r - 1, 0 == o.fcount && (e(o).removeClass("panel-noscroll"), "BODY" == o.tagName && e("html").removeClass("panel-fit"))), !1)
  }

  function i(t, n, a, i) {
   var o = e(t),
    r = n,
    d = r.substr(0, 1).toUpperCase() + r.substr(1),
    s = e.parser.parseValue("min" + d, i["min" + d], a),
    l = e.parser.parseValue("max" + d, i["max" + d], a),
    c = e.parser.parseValue(r, i[r], a),
    u = String(i[r] || "").indexOf("%") >= 0 ? !0 : !1;
   if (isNaN(c)) o._size(r, ""), o._size("min" + d, s), o._size("max" + d, l);
   else {
    var h = Math.min(Math.max(c, s || 0), l || 99999);
    u || (i[r] = h), o._size("min" + d, ""), o._size("max" + d, ""), o._size(r, h)
   }
   return u || i.fit
  }

  function o(t, n, a) {
   function i() {
    return n.toLowerCase().indexOf("width") >= 0 ? o.outerWidth() - o.width() : o.outerHeight() - o.height()
   }
   var o = e(t);
   if (void 0 == a) {
    if (a = parseInt(t.style[n]), isNaN(a)) return;
    return e._boxModel && (a += i()), a
   }
   "" === a ? o.css(n, "") : (e._boxModel && (a -= i(), 0 > a && (a = 0)), o.css(n, a + "px"))
  }
  return "string" == typeof t ? "clear" == t ? this.each(function() {
   e(this).css({
    width: "",
    minWidth: "",
    maxWidth: "",
    height: "",
    minHeight: "",
    maxHeight: ""
   })
  }) : "fit" == t ? this.each(function() {
   a(this, "BODY" == this.tagName ? e("body") : e(this).parent(), !0)
  }) : "unfit" == t ? this.each(function() {
   a(this, e(this).parent(), !1)
  }) : void 0 == n ? o(this[0], t) : this.each(function() {
   o(this, t, n)
  }) : this.each(function() {
   n = n || e(this).parent(), e.extend(t, a(this, n, t.fit) || {});
   var o = i(this, "width", n, t),
    r = i(this, "height", n, t);
   o || r ? e(this).addClass("easyui-fluid") : e(this).removeClass("easyui-fluid")
  })
 }
}(jQuery),
function(e) {
 e.fn.resizableu = function(t, n) {
  function a(t) {
   var n = t.data,
    a = e.data(n.target, "resizableu").options;
   if (-1 != n.dir.indexOf("e")) {
    var i = n.startWidth + t.pageX - n.startX;
    i = Math.min(Math.max(i, a.minWidth), a.maxWidth), n.width = i
   }
   if (-1 != n.dir.indexOf("s")) {
    var o = n.startHeight + t.pageY - n.startY;
    o = Math.min(Math.max(o, a.minHeight), a.maxHeight), n.height = o
   }
   if (-1 != n.dir.indexOf("w")) {
    var i = n.startWidth - t.pageX + n.startX;
    i = Math.min(Math.max(i, a.minWidth), a.maxWidth), n.width = i, n.left = n.startLeft + n.startWidth - n.width
   }
   if (-1 != n.dir.indexOf("n")) {
    var o = n.startHeight - t.pageY + n.startY;
    o = Math.min(Math.max(o, a.minHeight), a.maxHeight), n.height = o, n.top = n.startTop + n.startHeight - n.height
   }
  }

  function i(t) {
   var n = t.data,
    a = e(n.target);
   a.css({
    left: n.left,
    top: n.top
   }), a.outerWidth() != n.width && a._outerWidth(n.width), a.outerHeight() != n.height && a._outerHeight(n.height)
  }

  function o(t) {
   return e.fn.resizableu.isResizing = !0, e.data(t.data.target, "resizableu").options.onStartResize.call(t.data.target, t), !1
  }

  function r(t) {
   return a(t), 0 != e.data(t.data.target, "resizableu").options.onResize.call(t.data.target, t) && i(t), !1
  }

  function d(t) {
   return e.fn.resizableu.isResizing = !1, a(t, !0), i(t), e.data(t.data.target, "resizableu").options.onStopResize.call(t.data.target, t), e(document).unbind(".resizableu"), e("body").css("cursor", ""), !1
  }
  return "string" == typeof t ? e.fn.resizableu.methods[t](this, n) : this.each(function() {
   function n(t) {
    var n = e(t.data.target),
     i = "",
     o = n.offset(),
     r = n.outerWidth(),
     d = n.outerHeight(),
     s = a.edge;
    t.pageY > o.top && t.pageY < o.top + s ? i += "n" : t.pageY < o.top + d && t.pageY > o.top + d - s && (i += "s"), t.pageX > o.left && t.pageX < o.left + s ? i += "w" : t.pageX < o.left + r && t.pageX > o.left + r - s && (i += "e");
    for (var l = a.handles.split(","), c = 0; c < l.length; c++) {
     var u = l[c].replace(/(^\s*)|(\s*$)/g, "");
     if ("all" == u || u == i) return i
    }
    return ""
   }
   var a = null,
    i = e.data(this, "resizableu");
   i ? (e(this).unbind(".resizableu"), a = e.extend(i.options, t || {})) : (a = e.extend({}, e.fn.resizableu.defaults, e.fn.resizableu.parseOptions(this), t || {}), e.data(this, "resizableu", {
    options: a
   })), 1 != a.disabled && e(this).bind("mousemove.resizableu", {
    target: this
   }, function(t) {
    if (!e.fn.resizableu.isResizing) {
     var a = n(t);
     "" == a ? e(t.data.target).css("cursor", "") : e(t.data.target).css("cursor", a + "-resize")
    }
   }).bind("mouseleave.resizableu", {
    target: this
   }, function(t) {
    e(t.data.target).css("cursor", "")
   }).bind("mousedown.resizableu", {
    target: this
   }, function(t) {
    function a(n) {
     var a = parseInt(e(t.data.target).css(n));
     return isNaN(a) ? 0 : a
    }
    var i = n(t);
    if ("" != i) {
     var s = {
      target: t.data.target,
      dir: i,
      startLeft: a("left"),
      startTop: a("top"),
      left: a("left"),
      top: a("top"),
      startX: t.pageX,
      startY: t.pageY,
      startWidth: e(t.data.target).outerWidth(),
      startHeight: e(t.data.target).outerHeight(),
      width: e(t.data.target).outerWidth(),
      height: e(t.data.target).outerHeight(),
      deltaWidth: e(t.data.target).outerWidth() - e(t.data.target).width(),
      deltaHeight: e(t.data.target).outerHeight() - e(t.data.target).height()
     };
     e(document).bind("mousedown.resizableu", s, o), e(document).bind("mousemove.resizableu", s, r), e(document).bind("mouseup.resizableu", s, d), e("body").css("cursor", i + "-resize")
    }
   })
  })
 }, e.fn.resizableu.methods = {
  options: function(t) {
   return e.data(t[0], "resizableu").options
  },
  enable: function(t) {
   return t.each(function() {
    e(this).resizableu({
     disabled: !1
    })
   })
  },
  disable: function(t) {
   return t.each(function() {
    e(this).resizableu({
     disabled: !0
    })
   })
  }
 }, e.fn.resizableu.parseOptions = function(t) {
  var n = e(t);
  return e.extend({}, e.parser.parseOptions(t, ["handles", {
   minWidth: "number",
   minHeight: "number",
   maxWidth: "number",
   maxHeight: "number",
   edge: "number"
  }]), {
   disabled: n.attr("disabled") ? !0 : void 0
  })
 }, e.fn.resizableu.defaults = {
  disabled: !1,
  handles: "n, e, s, w, ne, se, sw, nw, all",
  minWidth: 10,
  minHeight: 10,
  maxWidth: 1e4,
  maxHeight: 1e4,
  edge: 8,
  onStartResize: function(e) {},
  onResize: function(e) {},
  onStopResize: function(e) {}
 }, e.fn.resizableu.isResizing = !1
}(jQuery),
function(e) {
 function t(t, n) {
  var a = e.data(t, "linkbutton").options;
  if (n && e.extend(a, n), a.width || a.height || a.fit) {
   var i = e(t),
    o = i.parent(),
    r = i.is(":visible");
   if (!r) {
    var d = e('<div style="display:none"></div>').insertBefore(t),
     s = {
      position: i.css("position"),
      display: i.css("display"),
      left: i.css("left")
     };
    i.appendTo("body"), i.css({
     position: "absolute",
     display: "inline-block",
     left: -2e4
    })
   }
   i._size(a, o);
   var l = i.find(".l-btn-left");
   l.css("margin-top", 0), l.css("margin-top", parseInt((i.height() - l.height()) / 2) + "px"), r || (i.insertAfter(d), i.css(s), d.remove())
  }
 }

 function n(t) {
  var n = e.data(t, "linkbutton").options,
   o = e(t).empty();
  o.addClass("l-btn").removeClass("l-btn-plain l-btn-selected l-btn-plain-selected"), o.removeClass("l-btn-small l-btn-medium l-btn-large").addClass("l-btn-" + n.size), n.plain && o.addClass("l-btn-plain"), n.selected && o.addClass(n.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected"), o.attr("group", n.group || ""), o.attr("id", n.id || "");
  var r = e('<span class="l-btn-left"></span>').appendTo(o);
  n.text ? e('<span class="l-btn-text"></span>').html(n.text).appendTo(r) : e('<span class="l-btn-text l-btn-empty"></span>').appendTo(r), n.iconCls && (e('<span class="l-btn-icon"></span>').addClass(n.iconCls).appendTo(r), r.addClass("l-btn-icon-" + n.iconAlign)), o.unbind(".linkbutton").bind("focus.linkbutton", function() {
   n.disabled || e(this).addClass("l-btn-focus")
  }).bind("blur.linkbutton", function() {
   e(this).removeClass("l-btn-focus")
  }).bind("click.linkbutton", function() {
   n.disabled || (n.toggle && (n.selected ? e(this).linkbutton("unselect") : e(this).linkbutton("select")), n.onClick.call(this))
  }), a(t, n.selected), i(t, n.disabled)
 }

 function a(t, n) {
  var a = e.data(t, "linkbutton").options;
  n ? (a.group && e('a.l-btn[group="' + a.group + '"]').each(function() {
   var t = e(this).linkbutton("options");
   t.toggle && (e(this).removeClass("l-btn-selected l-btn-plain-selected"), t.selected = !1)
  }), e(t).addClass(a.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected"), a.selected = !0) : a.group || (e(t).removeClass("l-btn-selected l-btn-plain-selected"), a.selected = !1)
 }

 function i(t, n) {
  var a = e.data(t, "linkbutton"),
   i = a.options;
  if (e(t).removeClass("l-btn-disabled l-btn-plain-disabled"), n) {
   i.disabled = !0;
   var o = e(t).attr("href");
   o && (a.href = o, e(t).attr("href", "javascript:void(0)")), t.onclick && (a.onclick = t.onclick, t.onclick = null), i.plain ? e(t).addClass("l-btn-disabled l-btn-plain-disabled") : e(t).addClass("l-btn-disabled")
  } else i.disabled = !1, a.href && e(t).attr("href", a.href), a.onclick && (t.onclick = a.onclick)
 }
 e.fn.linkbutton = function(a, i) {
  return "string" == typeof a ? e.fn.linkbutton.methods[a](this, i) : (a = a || {}, this.each(function() {
   var i = e.data(this, "linkbutton");
   i ? e.extend(i.options, a) : (e.data(this, "linkbutton", {
    options: e.extend({}, e.fn.linkbutton.defaults, e.fn.linkbutton.parseOptions(this), a)
   }), e(this).removeAttr("disabled"), e(this).bind("_resize", function(n, a) {
    return (e(this).hasClass("easyui-fluid") || a) && t(this), !1
   })), n(this), t(this)
  }))
 }, e.fn.linkbutton.methods = {
  options: function(t) {
   return e.data(t[0], "linkbutton").options
  },
  resize: function(e, n) {
   return e.each(function() {
    t(this, n)
   })
  },
  enable: function(e) {
   return e.each(function() {
    i(this, !1)
   })
  },
  disable: function(e) {
   return e.each(function() {
    i(this, !0)
   })
  },
  select: function(e) {
   return e.each(function() {
    a(this, !0)
   })
  },
  unselect: function(e) {
   return e.each(function() {
    a(this, !1)
   })
  }
 }, e.fn.linkbutton.parseOptions = function(t) {
  var n = e(t);
  return e.extend({}, e.parser.parseOptions(t, ["id", "iconCls", "iconAlign", "group", "size", {
   plain: "boolean",
   toggle: "boolean",
   selected: "boolean"
  }]), {
   disabled: n.attr("disabled") ? !0 : void 0,
   text: e.trim(n.html()),
   iconCls: n.attr("icon") || n.attr("iconCls")
  })
 }, e.fn.linkbutton.defaults = {
  id: null,
  disabled: !1,
  toggle: !1,
  selected: !1,
  group: null,
  plain: !1,
  text: "",
  iconCls: null,
  iconAlign: "left",
  size: "small",
  onClick: function() {}
 }
}(jQuery),
function($) {
 function _a0(_a1) {
  function _a8(e) {
   var t = _a3.nav[e],
    n = $('<a href="javascript:void(0)"></a>').appendTo(tr);
   return n.wrap("<td></td>"), n.linkbutton({
    iconCls: t.iconCls,
    plain: !0
   }).unbind(".pagination").bind("click.pagination", function() {
    t.handler.call(_a1)
   }), n
  }

  function _a5(e, t) {
   var n = $.inArray(t, e);
   return n >= 0 && e.splice(n, 1), e
  }
  var _a2 = $.data(_a1, "pagination"),
   _a3 = _a2.options,
   bb = _a2.bb = {},
   _a4 = $(_a1).addClass("pagination").html('<table cellspacing="0" cellpadding="0" border="0"><tr></tr></table>'),
   tr = _a4.find("tr"),
   aa = $.extend([], _a3.layout);
  _a3.showPageList || _a5(aa, "list"), _a3.showRefresh || _a5(aa, "refresh"), "sep" == aa[0] && aa.shift(), "sep" == aa[aa.length - 1] && aa.pop();
  for (var _a6 = 0; _a6 < aa.length; _a6++) {
   var _a7 = aa[_a6];
   if ("list" == _a7) {
    var ps = $('<select class="pagination-page-list"></select>');
    ps.bind("change", function() {
     _a3.pageSize = parseInt($(this).val()), _a3.onChangePageSize.call(_a1, _a3.pageSize), _ad(_a1, _a3.pageNumber)
    });
    for (var i = 0; i < _a3.pageList.length; i++) $("<option></option>").text(_a3.pageList[i]).appendTo(ps);
    $("<td></td>").append(ps).appendTo(tr)
   } else "sep" == _a7 ? $('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr) : "first" == _a7 ? bb.first = _a8("first") : "prev" == _a7 ? bb.prev = _a8("prev") : "next" == _a7 ? bb.next = _a8("next") : "last" == _a7 ? bb.last = _a8("last") : "manual" == _a7 ? ($('<span style="padding-left:6px;"></span>').html(_a3.beforePageText).appendTo(tr).wrap("<td></td>"), bb.num = $('<input class="pagination-num" type="text" value="1" size="2">').appendTo(tr).wrap("<td></td>"), bb.num.unbind(".pagination").bind("keydown.pagination", function(e) {
    if (13 == e.keyCode) {
     var t = parseInt($(this).val()) || 1;
     return _ad(_a1, t), !1
    }
   }), bb.after = $('<span style="padding-right:6px;"></span>').appendTo(tr).wrap("<td></td>")) : "refresh" == _a7 ? bb.refresh = _a8("refresh") : "links" == _a7 && $('<td class="pagination-links"></td>').appendTo(tr)
  }
  if (_a3.buttons)
   if ($('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr), $.isArray(_a3.buttons))
    for (var i = 0; i < _a3.buttons.length; i++) {
     var btn = _a3.buttons[i];
     if ("-" == btn) $('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr);
     else {
      var td = $("<td></td>").appendTo(tr),
       a = $('<a href="javascript:void(0)"></a>').appendTo(td);
      a[0].onclick = eval(btn.handler || function() {}), a.linkbutton($.extend({}, btn, {
       plain: !0
      }))
     }
    } else {
     var td = $("<td></td>").appendTo(tr);
     $(_a3.buttons).appendTo(td).show()
    }
   $('<div class="pagination-info"></div>').appendTo(_a4), $('<div style="clear:both;"></div>').appendTo(_a4)
 }

 function _ad(e, t) {
  var n = $.data(e, "pagination").options;
  _b1(e, {
   pageNumber: t
  }), n.onSelectPage.call(e, n.pageNumber, n.pageSize)
 }

 function _b1(e, t) {
  var n = $.data(e, "pagination"),
   a = n.options,
   i = n.bb;
  $.extend(a, t || {});
  var o = $(e).find("select.pagination-page-list");
  o.length && (o.val(a.pageSize + ""), a.pageSize = parseInt(o.val()));
  var r = Math.ceil(a.total / a.pageSize) || 1;
  a.pageNumber < 1 && (a.pageNumber = 1), a.pageNumber > r && (a.pageNumber = r), 0 == a.total && (a.pageNumber = 0, r = 0), i.num && i.num.val(a.pageNumber), i.after && i.after.html(a.afterPageText.replace(/{pages}/, r));
  var d = $(e).find("td.pagination-links");
  if (d.length) {
   d.empty();
   var s = a.pageNumber - Math.floor(a.links / 2);
   1 > s && (s = 1);
   var l = s + a.links - 1;
   l > r && (l = r), s = l - a.links + 1, 1 > s && (s = 1);
   for (var c = s; l >= c; c++) {
    var u = $('<a class="pagination-link" href="javascript:void(0)"></a>').appendTo(d);
    u.linkbutton({
     plain: !0,
     text: c
    }), c == a.pageNumber ? u.linkbutton("select") : u.unbind(".pagination").bind("click.pagination", {
     pageNumber: c
    }, function(t) {
     _ad(e, t.data.pageNumber)
    })
   }
  }
  var h = a.displayMsg;
  h = h.replace(/{from}/, 0 == a.total ? 0 : a.pageSize * (a.pageNumber - 1) + 1), h = h.replace(/{to}/, Math.min(a.pageSize * a.pageNumber, a.total)), h = h.replace(/{total}/, a.total), $(e).find("div.pagination-info").html(h), i.first && i.first.linkbutton({
   disabled: !a.total || 1 == a.pageNumber
  }), i.prev && i.prev.linkbutton({
   disabled: !a.total || 1 == a.pageNumber
  }), i.next && i.next.linkbutton({
   disabled: a.pageNumber == r
  }), i.last && i.last.linkbutton({
   disabled: a.pageNumber == r
  }), _ba(e, a.loading)
 }

 function _ba(e, t) {
  var n = $.data(e, "pagination"),
    a = n.options;
   
    a.loading = t, a.showRefresh && n.bb.refresh && n.bb.refresh.linkbutton({
    iconCls: a.loading ? "pagination-loading" : "pagination-load"
    });
    $.each(n.bb, function (i, r) {
      if (typeof plang.get === 'function') 
        $(r).attr('title', plang.get('btn_' + i + '_txt'));
      else $(r).attr('title', i);
    });
 }
 $.fn.pagination = function(e, t) {
  return "string" == typeof e ? $.fn.pagination.methods[e](this, t) : (e = e || {}, this.each(function() {
   var t, n = $.data(this, "pagination");
   n ? t = $.extend(n.options, e) : (t = $.extend({}, $.fn.pagination.defaults, $.fn.pagination.parseOptions(this), e), $.data(this, "pagination", {
    options: t
   })), _a0(this), _b1(this)
  }))
 }, $.fn.pagination.methods = {
  options: function(e) {
   return $.data(e[0], "pagination").options
  },
  loading: function(e) {
   return e.each(function() {
    _ba(this, !0)
   })
  },
  loaded: function(e) {
   return e.each(function() {
    _ba(this, !1)
   })
  },
  refresh: function(e, t) {
   return e.each(function() {
    _b1(this, t)
   })
  },
  select: function(e, t) {
   return e.each(function() {
    _ad(this, t)
   })
  }
 }, $.fn.pagination.parseOptions = function(_c5) {
  var t = $(_c5);
  return $.extend({}, $.parser.parseOptions(_c5, [{
   total: "number",
   pageSize: "number",
   pageNumber: "number",
   links: "number"
  }, {
   loading: "boolean",
   showPageList: "boolean",
   showRefresh: "boolean"
  }]), {
   pageList: t.attr("pageList") ? eval(t.attr("pageList")) : void 0
  })
 }, $.fn.pagination.defaults = {
  total: 1,
  pageSize: 10,
  pageNumber: 1,
  pageList: [10, 20, 30, 50],
  loading: !1,
  buttons: null,
  showPageList: !0,
  showRefresh: !0,
  links: 10,
  layout: ["list", "sep", "first", "prev", "sep", "manual", "sep", "next", "last", "sep", "refresh"],
  onSelectPage: function(e, t) {},
  onBeforeRefresh: function(e, t) {},
  onRefresh: function(e, t) {},
  onChangePageSize: function(e) {},
  beforePageText: "Page",
  afterPageText: "of {pages}",
  displayMsg: "Displaying {from} to {to} of {total} items",
  nav: {
   first: {
    iconCls: "pagination-first",
    handler: function() {
     var e = $(this).pagination("options");
     e.pageNumber > 1 && $(this).pagination("select", 1)
    }
   },
   prev: {
    iconCls: "pagination-prev",
    handler: function() {
     var e = $(this).pagination("options");
     e.pageNumber > 1 && $(this).pagination("select", e.pageNumber - 1)
    }
   },
   next: {
    iconCls: "pagination-next",
    handler: function() {
     var e = $(this).pagination("options"),
      t = Math.ceil(e.total / e.pageSize);
     e.pageNumber < t && $(this).pagination("select", e.pageNumber + 1)
    }
   },
   last: {
    iconCls: "pagination-last",
    handler: function() {
     var e = $(this).pagination("options"),
      t = Math.ceil(e.total / e.pageSize);
     e.pageNumber < t && $(this).pagination("select", t)
    }
   },
   refresh: {
    iconCls: "pagination-refresh",
    handler: function() {
     var e = $(this).pagination("options");
     0 != e.onBeforeRefresh.call(this, e.pageNumber, e.pageSize) && ($(this).pagination("select", e.pageNumber), e.onRefresh.call(this, e.pageNumber, e.pageSize))
    }
   }
  }
 }
}(jQuery),
function(e) {
 function t(t) {
  var n = e(t);
  return n.addClass("tree"), n
 }

 function n(t) {
  var n = e.data(t, "tree").options;
  e(t).unbind().bind("mouseover", function(t) {
   var n = e(t.target),
    a = n.closest("div.tree-node");
   a.length && (a.addClass("tree-node-hover"), n.hasClass("tree-hit") && (n.hasClass("tree-expanded") ? n.addClass("tree-expanded-hover") : n.addClass("tree-collapsed-hover")), t.stopPropagation())
  }).bind("mouseout", function(t) {
   var n = e(t.target),
    a = n.closest("div.tree-node");
   a.length && (a.removeClass("tree-node-hover"), n.hasClass("tree-hit") && (n.hasClass("tree-expanded") ? n.removeClass("tree-expanded-hover") : n.removeClass("tree-collapsed-hover")), t.stopPropagation())
  }).bind("click", function(a) {
   var i = e(a.target),
    r = i.closest("div.tree-node");
   if (r.length) {
    if (i.hasClass("tree-hit")) return h(t, r[0]), !1;
    if (i.hasClass("tree-checkbox")) return o(t, r[0], !i.hasClass("tree-checkbox1")), !1;
    O(t, r[0]), n.onClick.call(t, z(t, r[0])), a.stopPropagation()
   }
  }).bind("dblclick", function(a) {
   var i = e(a.target).closest("div.tree-node");
   i.length && (O(t, i[0]), n.onDblClick.call(t, z(t, i[0])), a.stopPropagation())
  }).bind("contextmenu", function(a) {
   var i = e(a.target).closest("div.tree-node");
   i.length && (n.onContextMenu.call(t, a, z(t, i[0])), a.stopPropagation())
  })
 }

 function a(t) {
  var n = e.data(t, "tree").options;
  n.dnd = !1;
  var a = e(t).find("div.tree-node");
  a.draggable("disable"), a.css("cursor", "pointer")
 }

 function i(t) {
  function n(t, n) {
   return e(t).closest("ul.tree").tree(n ? "pop" : "getData", t)
  }

  function a(t, n) {
   var a = e(t).draggable("proxy").find("span.tree-dnd-icon");
   a.removeClass("tree-dnd-yes tree-dnd-no").addClass(n ? "tree-dnd-yes" : "tree-dnd-no")
  }

  function i(a, i) {
   function o() {
    var o = n(a, !0);
    e(t).tree("append", {
     parent: i,
     data: [o]
    }), d.onDrop.call(t, i, o, "append")
   }
   "closed" == z(t, i).state ? c(t, i, function() {
    o()
   }) : o()
  }

  function o(a, i, o) {
   var r = {};
   "top" == o ? r.before = i : r.after = i;
   var s = n(a, !0);
   r.data = s, e(t).tree("insert", r), d.onDrop.call(t, i, s, o)
  }
  var r = e.data(t, "tree"),
   d = r.options,
   s = r.tree;
  r.disabledNodes = [], d.dnd = !0, s.find("div.tree-node").draggable({
   disabled: !1,
   revert: !0,
   cursor: "pointer",
   proxy: function(t) {
    var n = e('<div class="tree-node-proxy"></div>').appendTo("body");
    return n.html('<span class="tree-dnd-icon tree-dnd-no">&nbsp;</span>' + e(t).find(".tree-title").html()), n.hide(), n
   },
   deltaX: 15,
   deltaY: 15,
   onBeforeDrag: function(n) {
    if (0 == d.onBeforeDrag.call(t, z(t, this))) return !1;
    if (e(n.target).hasClass("tree-hit") || e(n.target).hasClass("tree-checkbox")) return !1;
    if (1 != n.which) return !1;
    e(this).next("ul").find("div.tree-node").droppable({
     accept: "no-accept"
    });
    var a = e(this).find("span.tree-indent");
    a.length && (n.data.offsetWidth -= a.length * a.width())
   },
   onStartDrag: function() {
    e(this).draggable("proxy").css({
     left: -1e4,
     top: -1e4
    }), d.onStartDrag.call(t, z(t, this));
    var n = z(t, this);
    void 0 == n.id && (n.id = "easyui_tree_node_id_temp", w(t, n)), r.draggingNodeId = n.id
   },
   onDrag: function(t) {
    var n = t.pageX,
     a = t.pageY,
     i = t.data.startX,
     o = t.data.startY,
     r = Math.sqrt((n - i) * (n - i) + (a - o) * (a - o));
    r > 3 && e(this).draggable("proxy").show(), this.pageY = t.pageY
   },
   onStopDrag: function() {
    e(this).next("ul").find("div.tree-node").droppable({
     accept: "div.tree-node"
    });
    for (var n = 0; n < r.disabledNodes.length; n++) e(r.disabledNodes[n]).droppable("enable");
    r.disabledNodes = [];
    var a = S(t, r.draggingNodeId);
    a && "easyui_tree_node_id_temp" == a.id && (a.id = "", w(t, a)), d.onStopDrag.call(t, a)
   }
  }).droppable({
   accept: "div.tree-node",
   onDragEnter: function(i, o) {
    0 == d.onDragEnter.call(t, this, n(o)) && (a(o, !1), e(this).removeClass("tree-node-append tree-node-top tree-node-bottom"), e(this).droppable("disable"), r.disabledNodes.push(this))
   },
   onDragOver: function(i, o) {
    if (!e(this).droppable("options").disabled) {
     var s = o.pageY,
      l = e(this).offset().top,
      c = l + e(this).outerHeight();
     a(o, !0), e(this).removeClass("tree-node-append tree-node-top tree-node-bottom"), s > l + (c - l) / 2 ? 5 > c - s ? e(this).addClass("tree-node-bottom") : e(this).addClass("tree-node-append") : 5 > s - l ? e(this).addClass("tree-node-top") : e(this).addClass("tree-node-append"), 0 == d.onDragOver.call(t, this, n(o)) && (a(o, !1), e(this).removeClass("tree-node-append tree-node-top tree-node-bottom"), e(this).droppable("disable"), r.disabledNodes.push(this))
    }
   },
   onDragLeave: function(i, o) {
    a(o, !1), e(this).removeClass("tree-node-append tree-node-top tree-node-bottom"), d.onDragLeave.call(t, this, n(o))
   },
   onDrop: function(a, r) {
    var s, l, c = this;
    return e(this).hasClass("tree-node-append") ? (s = i, l = "append") : (s = o, l = e(this).hasClass("tree-node-top") ? "top" : "bottom"), 0 == d.onBeforeDrop.call(t, c, n(r), l) ? void e(this).removeClass("tree-node-append tree-node-top tree-node-bottom") : (s(r, c, l), void e(this).removeClass("tree-node-append tree-node-top tree-node-bottom"))
   }
  })
 }

 function o(t, n, a) {
  function i(e) {
   var t = e.next().find(".tree-checkbox");
   t.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2"), e.find(".tree-checkbox").hasClass("tree-checkbox1") ? t.addClass("tree-checkbox1") : t.addClass("tree-checkbox0")
  }

  function o(n) {
   function a(t) {
    var n = t.find(".tree-checkbox");
    if (n.hasClass("tree-checkbox0") || n.hasClass("tree-checkbox2")) return !1;
    var a = !0;
    return t.parent().siblings().each(function() {
     e(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox1") || (a = !1)
    }), a
   }

   function i(t) {
    var n = t.find(".tree-checkbox");
    if (n.hasClass("tree-checkbox1") || n.hasClass("tree-checkbox2")) return !1;
    var a = !0;
    return t.parent().siblings().each(function() {
     e(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox0") || (a = !1)
    }), a
   }
   var r = $(t, n[0]);
   if (r) {
    var d = e(r.target).find(".tree-checkbox");
    d.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2"), a(n) ? d.addClass("tree-checkbox1") : i(n) ? d.addClass("tree-checkbox0") : d.addClass("tree-checkbox2"), o(e(r.target))
   }
  }
  var r = e.data(t, "tree").options;
  if (r.checkbox) {
   var d = z(t, n);
   if (0 != r.onBeforeCheck.call(t, d, a)) {
    var s = e(n),
     l = s.find(".tree-checkbox");
    l.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2"), a ? l.addClass("tree-checkbox1") : l.addClass("tree-checkbox0"), r.cascadeCheck && (o(s), i(s)), r.onCheck.call(t, d, a)
   }
  }
 }

 function r(t, n) {
  var a = e.data(t, "tree").options;
  if (a.checkbox) {
   var i = e(n);
   if (W(t, n)) {
    var r = i.find(".tree-checkbox");
    r.length ? r.hasClass("tree-checkbox1") ? o(t, n, !0) : o(t, n, !1) : a.onlyLeafCheck && e('<span class="tree-checkbox tree-checkbox0"></span>').insertBefore(i.find(".tree-title"))
   } else {
    var r = i.find(".tree-checkbox");
    if (a.onlyLeafCheck) r.remove();
    else if (r.hasClass("tree-checkbox1")) o(t, n, !0);
    else if (r.hasClass("tree-checkbox2")) {
     for (var d = !0, s = !0, l = C(t, n), c = 0; c < l.length; c++) l[c].checked ? s = !1 : d = !1;
     d && o(t, n, !0), s && o(t, n, !1)
    }
   }
  }
 }

 function d(t, n, a, r) {
  var d = e.data(t, "tree"),
   l = d.options,
   c = e(n).prevAll("div.tree-node:first");
  a = l.loadFilter.call(t, a, c[0]);
  var u = R(t, "domId", c.attr("id"));
  r ? u ? u.children ? u.children = u.children.concat(a) : u.children = a : d.data = d.data.concat(a) : (u ? u.children = a : d.data = a, e(n).empty()), l.view.render.call(l.view, t, n, a), l.dnd && i(t), u && w(t, u);
  for (var h = [], f = [], p = 0; p < a.length; p++) {
   var g = a[p];
   g.checked || h.push(g)
  }
  H(a, function(e) {
   e.checked && f.push(e)
  });
  var v = l.onCheck;
  l.onCheck = function() {}, h.length && o(t, e("#" + h[0].domId)[0], !1);
  for (var p = 0; p < f.length; p++) o(t, e("#" + f[p].domId)[0], !0);
  l.onCheck = v, setTimeout(function() {
   s(t, t)
  }, 0), l.onLoadSuccess.call(t, u, a)
 }

 function s(t, n, a) {
  function i(e, t) {
   var n = e.find("span.tree-icon");
   n.prev("span.tree-indent").addClass("tree-join")
  }

  function o(t) {
   var n = t.find("span.tree-indent, span.tree-hit").length;
   t.next().find("div.tree-node").each(function() {
    e(this).children("span:eq(" + (n - 1) + ")").addClass("tree-line")
   })
  }
  var r = e.data(t, "tree").options;
  if (!r.lines) return void e(t).removeClass("tree-lines");
  if (e(t).addClass("tree-lines"), !a) {
   a = !0, e(t).find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom"), e(t).find("div.tree-node").removeClass("tree-node-last tree-root-first tree-root-one");
   var d = e(t).tree("getRoots");
   d.length > 1 ? e(d[0].target).addClass("tree-root-first") : 1 == d.length && e(d[0].target).addClass("tree-root-one")
  }
  e(n).children("li").each(function() {
   var n = e(this).children("div.tree-node"),
    r = n.next("ul");
   r.length ? (e(this).next().length && o(n), s(t, r, a)) : i(n)
  });
  var l = e(n).children("li:last").children("div.tree-node").addClass("tree-node-last");
  l.children("span.tree-join").removeClass("tree-join").addClass("tree-joinbottom")
 }

 function l(t, n, a, i) {
  var o = e.data(t, "tree").options;
  a = e.extend({}, o.queryParams, a || {});
  var r = null;
  if (t != n) {
   var s = e(n).prev();
   r = z(t, s[0])
  }
  if (0 != o.onBeforeLoad.call(t, r, a)) {
   var l = e(n).prev().children("span.tree-folder");
   l.addClass("tree-loading");
   var c = o.loader.call(t, a, function(e) {
    l.removeClass("tree-loading"), d(t, n, e), i && i()
   }, function() {
    l.removeClass("tree-loading"), o.onLoadError.apply(t, arguments), i && i()
   });
   0 == c && l.removeClass("tree-loading")
  }
 }

 function c(t, n, a) {
  var i = e.data(t, "tree").options,
   o = e(n).children("span.tree-hit");
  if (0 != o.length && !o.hasClass("tree-expanded")) {
   var r = z(t, n);
   if (0 != i.onBeforeExpand.call(t, r)) {
    o.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded"), o.next().addClass("tree-folder-open");
    var d = e(n).next();
    if (d.length) i.animate ? d.slideDown("normal", function() {
     r.state = "open", i.onExpand.call(t, r), a && a()
    }) : (d.css("display", "block"), r.state = "open", i.onExpand.call(t, r), a && a());
    else {
     var s = e('<ul style="display:none"></ul>').insertAfter(n);
     l(t, s[0], {
      id: r.id
     }, function() {
      s.is(":empty") && s.remove(), i.animate ? s.slideDown("normal", function() {
       r.state = "open", i.onExpand.call(t, r), a && a()
      }) : (s.css("display", "block"), r.state = "open", i.onExpand.call(t, r), a && a())
     })
    }
   }
  }
 }

 function u(t, n) {
  var a = e.data(t, "tree").options,
   i = e(n).children("span.tree-hit");
  if (0 != i.length && !i.hasClass("tree-collapsed")) {
   var o = z(t, n);
   if (0 != a.onBeforeCollapse.call(t, o)) {
    i.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed"), i.next().removeClass("tree-folder-open");
    var r = e(n).next();
    a.animate ? r.slideUp("normal", function() {
     o.state = "closed", a.onCollapse.call(t, o)
    }) : (r.css("display", "none"), o.state = "closed", a.onCollapse.call(t, o))
   }
  }
 }

 function h(t, n) {
  var a = e(n).children("span.tree-hit");
  0 != a.length && (a.hasClass("tree-expanded") ? u(t, n) : c(t, n))
 }

 function f(e, t) {
  var n = C(e, t);
  t && n.unshift(z(e, t));
  for (var a = 0; a < n.length; a++) c(e, n[a].target)
 }

 function p(e, t) {
  for (var n = [], a = $(e, t); a;) n.unshift(a), a = $(e, a.target);
  for (var i = 0; i < n.length; i++) c(e, n[i].target)
 }

 function g(t, n) {
  for (var a = e(t).parent();
   "BODY" != a[0].tagName && "auto" != a.css("overflow-y");) a = a.parent();
  var i = e(n),
   o = i.offset().top;
  if ("BODY" != a[0].tagName) {
   var r = a.offset().top;
   r > o ? a.scrollTop(a.scrollTop() + o - r) : o + i.outerHeight() > r + a.outerHeight() - 18 && a.scrollTop(a.scrollTop() + o + i.outerHeight() - r - a.outerHeight() + 18)
  } else a.scrollTop(o)
 }

 function v(e, t) {
  var n = C(e, t);
  t && n.unshift(z(e, t));
  for (var a = 0; a < n.length; a++) u(e, n[a].target)
 }

 function b(t, n) {
  var a = e(n.parent),
   i = n.data;
  if (i && (i = e.isArray(i) ? i : [i], i.length)) {
   var o;
   if (0 == a.length) o = e(t);
   else {
    if (W(t, a[0])) {
     var s = a.find("span.tree-icon");
     s.removeClass("tree-file").addClass("tree-folder tree-folder-open");
     var l = e('<span class="tree-hit tree-expanded"></span>').insertBefore(s);
     l.prev().length && l.prev().remove()
    }
    o = a.next(), o.length || (o = e("<ul></ul>").insertAfter(a))
   }
   d(t, o[0], i, !0), r(t, o.prev())
  }
 }

 function m(t, n) {
  var a = n.before || n.after,
   i = $(t, a),
   o = n.data;
  if (o && (o = e.isArray(o) ? o : [o], o.length)) {
   b(t, {
    parent: i ? i.target : null,
    data: o
   });
   for (var r = i ? i.children : e(t).tree("getRoots"), d = 0; d < r.length; d++)
    if (r[d].domId == e(a).attr("id")) {
     for (var s = o.length - 1; s >= 0; s--) r.splice(n.before ? d : d + 1, 0, o[s]);
     r.splice(r.length - o.length, o.length);
     break
    }
   for (var l = e(), d = 0; d < o.length; d++) l = l.add(e("#" + o[d].domId).parent());
   n.before ? l.insertBefore(e(a).parent()) : l.insertAfter(e(a).parent())
  }
 }

 function x(t, n) {
  function a(n) {
   for (var a = e(n).attr("id"), i = $(t, n), o = i ? i.children : e.data(t, "tree").data, r = 0; r < o.length; r++)
    if (o[r].domId == a) {
     o.splice(r, 1);
     break
    }
   return i
  }
  var i = a(n);
  if (e(n).parent().remove(), i) {
   if (!i.children || !i.children.length) {
    var o = e(i.target);
    o.find(".tree-icon").removeClass("tree-folder").addClass("tree-file"), o.find(".tree-hit").remove(), e('<span class="tree-indent"></span>').prependTo(o), o.next().remove()
   }
   w(t, i), r(t, i.target)
  }
  s(t, t)
 }

 function w(t, n) {
  var a = e.data(t, "tree").options,
   i = e(n.target),
   r = z(t, n.target),
   d = r.checked;
  r.iconCls && i.find(".tree-icon").removeClass(r.iconCls), e.extend(r, n), i.find(".tree-title").html(a.formatter.call(t, r)), r.iconCls && i.find(".tree-icon").addClass(r.iconCls), d != r.checked && o(t, n.target, r.checked)
 }

 function _(e, t) {
  if (t) {
   for (var n = $(e, t); n;) t = n.target, n = $(e, t);
   return z(e, t)
  }
  var a = y(e);
  return a.length ? a[0] : null
 }

 function y(t) {
  for (var n = e.data(t, "tree").data, a = 0; a < n.length; a++) D(n[a]);
  return n
 }

 function C(t, n) {
  var a = [],
   i = z(t, n),
   o = i ? i.children || [] : e.data(t, "tree").data;
  return H(o, function(e) {
   a.push(D(e))
  }), a
 }

 function $(t, n) {
  var a = e(n).closest("ul").prevAll("div.tree-node:first");
  return z(t, a[0])
 }

 function k(t, n) {
  n = n || "checked", e.isArray(n) || (n = [n]);
  for (var a = [], i = 0; i < n.length; i++) {
   var o = n[i];
   "checked" == o ? a.push("span.tree-checkbox1") : "unchecked" == o ? a.push("span.tree-checkbox0") : "indeterminate" == o && a.push("span.tree-checkbox2")
  }
  var r = [];
  return e(t).find(a.join(",")).each(function() {
   var n = e(this).parent();
   r.push(z(t, n[0]))
  }), r
 }

 function F(t) {
  var n = e(t).find("div.tree-node-selected");
  return n.length ? z(t, n[0]) : null
 }

 function T(e, t) {
  var n = z(e, t);
  return n && n.children && H(n.children, function(e) {
   D(e)
  }), n
 }

 function z(t, n) {
  return R(t, "domId", e(n).attr("id"))
 }

 function S(e, t) {
  return R(e, "id", t)
 }

 function R(t, n, a) {
  var i = e.data(t, "tree").data,
   o = null;
  return H(i, function(e) {
   return e[n] == a ? (o = D(e), !1) : void 0
  }), o
 }

 function D(t) {
  var n = e("#" + t.domId);
  return t.target = n[0], t.checked = n.find(".tree-checkbox").hasClass("tree-checkbox1"), t
 }

 function H(e, t) {
  for (var n = [], a = 0; a < e.length; a++) n.push(e[a]);
  for (; n.length;) {
   var i = n.shift();
   if (0 == t(i)) return;
   if (i.children)
    for (var a = i.children.length - 1; a >= 0; a--) n.unshift(i.children[a])
  }
 }

 function O(t, n) {
  var a = e.data(t, "tree").options,
   i = z(t, n);
  0 != a.onBeforeSelect.call(t, i) && (e(t).find("div.tree-node-selected").removeClass("tree-node-selected"), e(n).addClass("tree-node-selected"), a.onSelect.call(t, i))
 }

 function W(t, n) {
  return 0 == e(n).children("span.tree-hit").length
 }

 function A(t, n) {
  var a = e.data(t, "tree").options,
   i = z(t, n);
  if (0 != a.onBeforeEdit.call(t, i)) {
   e(n).css("position", "relative");
   var o = e(n).find(".tree-title"),
    r = o.outerWidth();
   o.empty();
   var d = e('<input class="tree-editor">').appendTo(o);
   d.val(i.text).focus(), d.width(r + 20), d.height("CSS1Compat" == document.compatMode ? 18 - (d.outerHeight() - d.height()) : 18), d.bind("click", function(e) {
    return !1
   }).bind("mousedown", function(e) {
    e.stopPropagation()
   }).bind("mousemove", function(e) {
    e.stopPropagation()
   }).bind("keydown", function(e) {
    return 13 == e.keyCode ? (I(t, n), !1) : 27 == e.keyCode ? (E(t, n), !1) : void 0
   }).bind("blur", function(e) {
    e.stopPropagation(), I(t, n)
   })
  }
 }

 function I(t, n) {
  var a = e.data(t, "tree").options;
  e(n).css("position", "");
  var i = e(n).find("input.tree-editor"),
   o = i.val();
  i.remove();
  var r = z(t, n);
  r.text = o, w(t, r), a.onAfterEdit.call(t, r)
 }

 function E(t, n) {
  var a = e.data(t, "tree").options;
  e(n).css("position", ""), e(n).find("input.tree-editor").remove();
  var i = z(t, n);
  w(t, i), a.onCancelEdit.call(t, i)
 }
 e.fn.tree = function(a, i) {
  if ("string" == typeof a) return e.fn.tree.methods[a](this, i);
  var a = a || {};
  return this.each(function() {
   var i, o = e.data(this, "tree");
   if (o) i = e.extend(o.options, a), o.options = i;
   else {
    i = e.extend({}, e.fn.tree.defaults, e.fn.tree.parseOptions(this), a), e.data(this, "tree", {
     options: i,
     tree: t(this),
     data: []
    });
    var r = e.fn.tree.parseData(this);
    r.length && d(this, this, r)
   }
   n(this), i.data && d(this, this, e.extend(!0, [], i.data)), l(this, this)
  })
 }, e.fn.tree.methods = {
  options: function(t) {
   return e.data(t[0], "tree").options
  },
  loadData: function(e, t) {
   return e.each(function() {
    d(this, this, t)
   })
  },
  getNode: function(e, t) {
   return z(e[0], t)
  },
  getData: function(e, t) {
   return T(e[0], t)
  },
  reload: function(t, n) {
   return t.each(function() {
    if (n) {
     var t = e(n),
      a = t.children("span.tree-hit");
     a.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed"), t.next().remove(), c(this, n)
    } else e(this).empty(), l(this, this)
   })
  },
  getRoot: function(e, t) {
   return _(e[0], t)
  },
  getRoots: function(e) {
   return y(e[0])
  },
  getParent: function(e, t) {
   return $(e[0], t)
  },
  getChildren: function(e, t) {
   return C(e[0], t)
  },
  getChecked: function(e, t) {
   return k(e[0], t)
  },
  getSelected: function(e) {
   return F(e[0])
  },
  isLeaf: function(e, t) {
   return W(e[0], t)
  },
  find: function(e, t) {
   return S(e[0], t)
  },
  select: function(e, t) {
   return e.each(function() {
    O(this, t)
   })
  },
  check: function(e, t) {
   return e.each(function() {
    o(this, t, !0)
   })
  },
  uncheck: function(e, t) {
   return e.each(function() {
    o(this, t, !1)
   })
  },
  collapse: function(e, t) {
   return e.each(function() {
    u(this, t)
   })
  },
  expand: function(e, t) {
   return e.each(function() {
    c(this, t)
   })
  },
  collapseAll: function(e, t) {
   return e.each(function() {
    v(this, t)
   })
  },
  expandAll: function(e, t) {
   return e.each(function() {
    f(this, t)
   })
  },
  expandTo: function(e, t) {
   return e.each(function() {
    p(this, t)
   })
  },
  scrollTo: function(e, t) {
   return e.each(function() {
    g(this, t)
   })
  },
  toggle: function(e, t) {
   return e.each(function() {
    h(this, t)
   })
  },
  append: function(e, t) {
   return e.each(function() {
    b(this, t)
   })
  },
  insert: function(e, t) {
   return e.each(function() {
    m(this, t)
   })
  },
  remove: function(e, t) {
   return e.each(function() {
    x(this, t)
   })
  },
  pop: function(e, t) {
   var n = e.tree("getData", t);
   return e.tree("remove", t), n
  },
  update: function(e, t) {
   return e.each(function() {
    w(this, t)
   })
  },
  enableDnd: function(e) {
   return e.each(function() {
    i(this)
   })
  },
  disableDnd: function(e) {
   return e.each(function() {
    a(this)
   })
  },
  beginEdit: function(e, t) {
   return e.each(function() {
    A(this, t)
   })
  },
  endEdit: function(e, t) {
   return e.each(function() {
    I(this, t)
   })
  },
  cancelEdit: function(e, t) {
   return e.each(function() {
    E(this, t)
   })
  }
 }, e.fn.tree.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.parser.parseOptions(t, ["url", "method", {
   checkbox: "boolean",
   cascadeCheck: "boolean",
   onlyLeafCheck: "boolean"
  }, {
   animate: "boolean",
   lines: "boolean",
   dnd: "boolean"
  }]))
 }, e.fn.tree.parseData = function(t) {
  function n(t, a) {
   a.children("li").each(function() {
    var a = e(this),
     i = e.extend({}, e.parser.parseOptions(this, ["id", "iconCls", "state"]), {
      checked: a.attr("checked") ? !0 : void 0
     });
    i.text = a.children("span").html(), i.text || (i.text = a.html());
    var o = a.children("ul");
    o.length && (i.children = [], n(i.children, o)), t.push(i)
   })
  }
  var a = [];
  return n(a, e(t)), a
 };
 var V = 1,
  P = {
   render: function(t, n, a) {
    function i(e, n) {
     for (var a = [], r = 0; r < n.length; r++) {
      var d = n[r];
      "open" != d.state && "closed" != d.state && (d.state = "open"), d.domId = "_easyui_tree_" + V++, a.push("<li>"), a.push('<div id="' + d.domId + '" class="tree-node">');
      for (var s = 0; e > s; s++) a.push('<span class="tree-indent"></span>');
      var l = !1;
      if ("closed" == d.state ? (a.push('<span class="tree-hit tree-collapsed"></span>'), a.push('<span class="tree-icon tree-folder ' + (d.iconCls ? d.iconCls : "") + '"></span>')) : d.children && d.children.length ? (a.push('<span class="tree-hit tree-expanded"></span>'), a.push('<span class="tree-icon tree-folder tree-folder-open ' + (d.iconCls ? d.iconCls : "") + '"></span>')) : (a.push('<span class="tree-indent"></span>'), a.push('<span class="tree-icon tree-file ' + (d.iconCls ? d.iconCls : "") + '"></span>'), l = !0), o.checkbox && (!o.onlyLeafCheck || l) && a.push('<span class="tree-checkbox tree-checkbox0"></span>'), a.push('<span class="tree-title">' + o.formatter.call(t, d) + "</span>"), a.push("</div>"), d.children && d.children.length) {
       var c = i(e + 1, d.children);
       a.push('<ul style="display:' + ("closed" == d.state ? "none" : "block") + '">'), a = a.concat(c), a.push("</ul>")
      }
      a.push("</li>")
     }
     return a
    }
    var o = e.data(t, "tree").options,
     r = e(n).prev("div.tree-node").find("span.tree-indent, span.tree-hit").length,
     d = i(r, a);
    e(n).append(d.join(""))
   }
  };
 e.fn.tree.defaults = {
  url: null,
  method: "post",
  animate: !1,
  checkbox: !1,
  cascadeCheck: !0,
  onlyLeafCheck: !1,
  lines: !1,
  dnd: !1,
  data: null,
  queryParams: {},
  formatter: function(e) {
   return e.text
  },
  loader: function(t, n, a) {
   var i = e(this).tree("options");
   return i.url ? void e.ajax({
    type: i.method,
    url: i.url,
    data: t,
    dataType: "json",
    success: function(e) {
     n(e)
    },
    error: function() {
     a.apply(this, arguments)
    }
   }) : !1
  },
  loadFilter: function(e, t) {
   return e
  },
  view: P,
  onBeforeLoad: function(e, t) {},
  onLoadSuccess: function(e, t) {},
  onLoadError: function() {},
  onClick: function(e) {},
  onDblClick: function(e) {},
  onBeforeExpand: function(e) {},
  onExpand: function(e) {},
  onBeforeCollapse: function(e) {},
  onCollapse: function(e) {},
  onBeforeCheck: function(e, t) {},
  onCheck: function(e, t) {},
  onBeforeSelect: function(e) {},
  onSelect: function(e) {},
  onContextMenu: function(e, t) {},
  onBeforeDrag: function(e) {},
  onStartDrag: function(e) {},
  onStopDrag: function(e) {},
  onDragEnter: function(e, t) {},
  onDragOver: function(e, t) {},
  onDragLeave: function(e, t) {},
  onBeforeDrop: function(e, t, n) {},
  onDrop: function(e, t, n) {},
  onBeforeEdit: function(e) {},
  onAfterEdit: function(e) {},
  onCancelEdit: function(e) {}
 }
}(jQuery),
function(e) {
 function t(t) {
  return e(t).addClass("progressbar"), e(t).html('<div class="progressbar-text"></div><div class="progressbar-value"><div class="progressbar-text"></div></div>'), e(t).bind("_resize", function(a, i) {
   return (e(this).hasClass("easyui-fluid") || i) && n(t), !1
  }), e(t)
 }

 function n(t, n) {
  var a = e.data(t, "progressbar").options,
   i = e.data(t, "progressbar").bar;
  n && (a.width = n), i._size(a), i.find("div.progressbar-text").css("width", i.width()), i.find("div.progressbar-text,div.progressbar-value").css({
   height: i.height() + "px",
   lineHeight: i.height() + "px"
  })
 }
 e.fn.progressbar = function(a, i) {
  if ("string" == typeof a) {
   var o = e.fn.progressbar.methods[a];
   if (o) return o(this, i)
  }
  return a = a || {}, this.each(function() {
   var i = e.data(this, "progressbar");
   i ? e.extend(i.options, a) : i = e.data(this, "progressbar", {
    options: e.extend({}, e.fn.progressbar.defaults, e.fn.progressbar.parseOptions(this), a),
    bar: t(this)
   }), e(this).progressbar("setValue", i.options.value), n(this)
  })
 }, e.fn.progressbar.methods = {
  options: function(t) {
   return e.data(t[0], "progressbar").options
  },
  resize: function(e, t) {
   return e.each(function() {
    n(this, t)
   })
  },
  getValue: function(t) {
   return e.data(t[0], "progressbar").options.value
  },
  setValue: function(t, n) {
   return 0 > n && (n = 0), n > 100 && (n = 100), t.each(function() {
    var t = e.data(this, "progressbar").options,
     a = t.text.replace(/{value}/, n),
     i = t.value;
    t.value = n, e(this).find("div.progressbar-value").width(n + "%"), e(this).find("div.progressbar-text").html(a), i != n && t.onChange.call(this, n, i)
   })
  }
 }, e.fn.progressbar.parseOptions = function(t) {
  return e.extend({}, e.parser.parseOptions(t, ["width", "height", "text", {
   value: "number"
  }]))
 }, e.fn.progressbar.defaults = {
  width: "auto",
  height: 22,
  value: 0,
  text: "{value}%",
  onChange: function(e, t) {}
 }
}(jQuery),
function(e) {
 function t(t) {
  e(t).addClass("tooltipeu-f")
 }

 function n(t) {
  var n = e.data(t, "tooltipeu").options;
  e(t).unbind(".tooltipeu").bind(n.showEvent + ".tooltipeu", function(n) {
   e(t).tooltipeu("show", n)
  }).bind(n.hideEvent + ".tooltipeu", function(n) {
   e(t).tooltipeu("hide", n)
  }).bind("mousemove.tooltipeu", function(a) {
   n.trackMouse && (n.trackMouseX = a.pageX, n.trackMouseY = a.pageY, e(t).tooltipeu("reposition"))
  })
 }

 function a(t) {
  var n = e.data(t, "tooltipeu");
  n.showTimer && (clearTimeout(n.showTimer), n.showTimer = null), n.hideTimer && (clearTimeout(n.hideTimer), n.hideTimer = null)
 }

 function i(t) {
  function n(n) {
   i.position = n || "bottom", o.removeClass("tooltipeu-top tooltipeu-bottom tooltipeu-left tooltipeu-right").addClass("tooltipeu-" + i.position);
   var a, r;
   if (i.trackMouse) d = e(), a = i.trackMouseX + i.deltaX, r = i.trackMouseY + i.deltaY;
   else {
    var d = e(t);
    a = d.offset().left + i.deltaX, r = d.offset().top + i.deltaY
   }
   switch (i.position) {
    case "right":
     a += d._outerWidth() + 12 + (i.trackMouse ? 12 : 0), r -= (o._outerHeight() - d._outerHeight()) / 2;
     break;
    case "left":
     a -= o._outerWidth() + 12 + (i.trackMouse ? 12 : 0), r -= (o._outerHeight() - d._outerHeight()) / 2;
     break;
    case "top":
     a -= (o._outerWidth() - d._outerWidth()) / 2, r -= o._outerHeight() + 12 + (i.trackMouse ? 12 : 0);
     break;
    case "bottom":
     a -= (o._outerWidth() - d._outerWidth()) / 2, r += d._outerHeight() + 12 + (i.trackMouse ? 12 : 0)
   }
   return {
    left: a,
    top: r
   }
  }
  var a = e.data(t, "tooltipeu");
  if (a && a.tip) {
   var i = a.options,
    o = a.tip,
    r = {
     left: -1e5,
     top: -1e5
    };
   if (e(t).is(":visible"))
    if (r = n(i.position), "top" == i.position && r.top < 0 ? r = n("bottom") : "bottom" == i.position && r.top + o._outerHeight() > e(window)._outerHeight() + e(document).scrollTop() && (r = n("top")), r.left < 0) "left" == i.position ? r = n("right") : (e(t).tooltipeu("arrow").css("left", o._outerWidth() / 2 + r.left), r.left = 0);
    else if (r.left + o._outerWidth() > e(window)._outerWidth() + e(document)._scrollLeft())
    if ("right" == i.position) r = n("left");
    else {
     var d = r.left;
     r.left = e(window)._outerWidth() + e(document)._scrollLeft() - o._outerWidth(), e(t).tooltipeu("arrow").css("left", o._outerWidth() / 2 - (r.left - d))
    }
   o.css({
    left: r.left,
    top: r.top,
    zIndex: void 0 != i.zIndex ? i.zIndex : e.fn.window ? e.fn.window.defaults.zIndex++ : ""
   }), i.onPosition.call(t, r.left, r.top)
  }
 }

 function o(t, n) {
  var i = e.data(t, "tooltipeu"),
   o = i.options,
   r = i.tip;
  r || (r = e('<div tabindex="-1" class="tooltipeu"><div class="tooltipeu-content"></div><div class="tooltipeu-arrow-outer"></div><div class="tooltipeu-arrow"></div></div>').appendTo("body"), i.tip = r, d(t)), a(t), i.showTimer = setTimeout(function() {
   e(t).tooltipeu("reposition"), r.show(), o.onShow.call(t, n);
   var a = r.children(".tooltipeu-arrow-outer"),
    i = r.children(".tooltipeu-arrow"),
    d = "border-" + o.position + "-color";
   a.add(i).css({
    borderTopColor: "",
    borderBottomColor: "",
    borderLeftColor: "",
    borderRightColor: ""
   }), a.css(d, r.css(d)), i.css(d, r.css("backgroundColor"))
  }, o.showDelay)
 }

 function r(t, n) {
  var i = e.data(t, "tooltipeu");
  i && i.tip && (a(t), i.hideTimer = setTimeout(function() {
   i.tip.hide(), i.options.onHide.call(t, n)
  }, i.options.hideDelay))
 }

 function d(t, n) {
  var a = e.data(t, "tooltipeu"),
   i = a.options;
  if (n && (i.content = n), a.tip) {
   var o = "function" == typeof i.content ? i.content.call(t) : i.content;
   a.tip.children(".tooltipeu-content").html(o), i.onUpdate.call(t, o)
  }
 }

 function s(t) {
  var n = e.data(t, "tooltipeu");
  if (n) {
   a(t);
   var i = n.options;
   n.tip && n.tip.remove(), i._title && e(t).attr("title", i._title), e.removeData(t, "tooltipeu"), e(t).unbind(".tooltipeu").removeClass("tooltipeu-f"), i.onDestroy.call(t)
  }
 }
 e.fn.tooltipeu = function(a, i) {
  return "string" == typeof a ? e.fn.tooltipeu.methods[a](this, i) : (a = a || {}, this.each(function() {
   var i = e.data(this, "tooltipeu");
   i ? e.extend(i.options, a) : (e.data(this, "tooltipeu", {
    options: e.extend({}, e.fn.tooltipeu.defaults, e.fn.tooltipeu.parseOptions(this), a)
   }), t(this)), n(this), d(this)
  }))
 }, e.fn.tooltipeu.methods = {
  options: function(t) {
   return e.data(t[0], "tooltipeu").options
  },
  tip: function(t) {
   return e.data(t[0], "tooltipeu").tip
  },
  arrow: function(e) {
   return e.tooltipeu("tip").children(".tooltipeu-arrow-outer,.tooltipeu-arrow")
  },
  show: function(e, t) {
   return e.each(function() {
    o(this, t)
   })
  },
  hide: function(e, t) {
   return e.each(function() {
    r(this, t)
   })
  },
  update: function(e, t) {
   return e.each(function() {
    d(this, t)
   })
  },
  reposition: function(e) {
   return e.each(function() {
    i(this)
   })
  },
  destroy: function(e) {
   return e.each(function() {
    s(this)
   })
  }
 }, e.fn.tooltipeu.parseOptions = function(t) {
  var n = e(t),
   a = e.extend({}, e.parser.parseOptions(t, ["position", "showEvent", "hideEvent", "content", {
    trackMouse: "boolean",
    deltaX: "number",
    deltaY: "number",
    showDelay: "number",
    hideDelay: "number"
   }]), {
    _title: n.attr("title")
   });
  return n.attr("title", ""), a.content || (a.content = a._title), a
 }, e.fn.tooltipeu.defaults = {
  position: "bottom",
  content: null,
  trackMouse: !1,
  deltaX: 0,
  deltaY: 0,
  showEvent: "mouseenter",
  hideEvent: "mouseleave",
  showDelay: 200,
  hideDelay: 100,
  onShow: function(e) {},
  onHide: function(e) {},
  onUpdate: function(e) {},
  onPosition: function(e, t) {},
  onDestroy: function() {}
 }
}(jQuery),
function($) {
 function _1fd(e) {
  e._remove()
 }

 function _1fe(e, t) {
  var n = $.data(e, "panel"),
   a = n.options,
   i = n.panel,
   o = i.children("div.panel-header-eui"),
   r = i.children("div.panel-body-eui"),
   d = i.children("div.panel-footer-eui");
  if (t && $.extend(a, {
    width: t.width,
    height: t.height,
    minWidth: t.minWidth,
    maxWidth: t.maxWidth,
    minHeight: t.minHeight,
    maxHeight: t.maxHeight,
    left: t.left,
    top: t.top
   }), i._size(a), o.add(r)._outerWidth(i.width()), isNaN(parseInt(a.height))) {
   r.css("height", "");
   var s = $.parser.parseValue("minHeight", a.minHeight, i.parent()),
    l = $.parser.parseValue("maxHeight", a.maxHeight, i.parent()),
    c = o._outerHeight() + d._outerHeight() + i._outerHeight() - i.height();
   r._size("minHeight", s ? s - c : ""), r._size("maxHeight", l ? l - c : "")
  } else r._outerHeight(i.height() - o._outerHeight() - d._outerHeight());
  i.css({
   height: "",
   minHeight: "",
   maxHeight: "",
   left: a.left,
   top: a.top
  }), a.onResize.apply(e, [a.width, a.height]), $(e).panel("doLayout")
 }

 function _207(e, t) {
  var n = $.data(e, "panel").options,
   a = $.data(e, "panel").panel;
  t && (null != t.left && (n.left = t.left), null != t.top && (n.top = t.top)), a.css({
   left: n.left,
   top: n.top
  }), n.onMove.apply(e, [n.left, n.top])
 }

 function _20b(e) {
  $(e).addClass("panel-body-eui")._size("clear");
  var t = $('<div class="panel-eui"></div>').insertBefore(e);
  return t[0].appendChild(e), t.bind("_resize", function(t, n) {
   return ($(this).hasClass("easyui-fluid") || n) && _1fe(e), !1
  }), t
 }

 function _20f(_210) {
  function _213() {
   if (opts.tools && "string" == typeof opts.tools && _212.find(">div.panel-header-eui>div.panel-tool-eui .panel-tool-a-eui").appendTo(opts.tools), _1fd(_212.children("div.panel-header-eui")), opts.title && !opts.noheader) {
    var _217 = $('<div class="panel-header-eui"></div>').prependTo(_212),
     _218 = $('<div class="panel-title-eui"></div>').html(opts.title).appendTo(_217);
    opts.iconCls && (_218.addClass("panel-with-icon-eui"), $('<div class="panel-icon-eui"></div>').addClass(opts.iconCls).appendTo(_217));
    var tool = $('<div class="panel-tool-eui"></div>').appendTo(_217);
    if (tool.bind("click", function(e) {
      e.stopPropagation()
     }), opts.tools)
     if ($.isArray(opts.tools))
      for (var i = 0; i < opts.tools.length; i++) {
       var t = $('<a href="javascript:void(0)"></a>').addClass(opts.tools[i].iconCls).appendTo(tool);
       opts.tools[i].handler && t.bind("click", eval(opts.tools[i].handler))
      } else $(opts.tools).children().each(function() {
       $(this).addClass($(this).attr("iconCls")).addClass("panel-tool-a-eui").appendTo(tool)
      });
    opts.collapsible && $('<a class="panel-tool-collapse-eui" href="javascript:void(0)"></a>').appendTo(tool).bind("click", function() {
     return 1 == opts.collapsed ? _235(_210, !0) : _228(_210, !0), !1
    }), opts.minimizable && $('<a class="panel-tool-min-eui" href="javascript:void(0)"></a>').appendTo(tool).bind("click", function() {
     return _23b(_210), !1
    }), opts.maximizable && $('<a class="panel-tool-max-eui" href="javascript:void(0)"></a>').appendTo(tool).bind("click", function() {
     return 1 == opts.maximized ? _23e(_210) : _227(_210), !1
    }), opts.closable && $('<a class="panel-tool-close-eui" href="javascript:void(0)"></a>').appendTo(tool).bind("click", function() {
     return _229(_210), !1
    }), _212.children("div.panel-body-eui").removeClass("panel-body-noheader-eui")
   } else _212.children("div.panel-body-eui").addClass("panel-body-noheader-eui")
  }

  function _214() {
   opts.footer ? ($(opts.footer).addClass("panel-footer-eui").appendTo(_212), $(_210).addClass("panel-body-nobottom-eui")) : (_212.children("div.panel-footer-eui").remove(), $(_210).removeClass("panel-body-nobottom-eui"))
  }
  var _211 = $.data(_210, "panel"),
   opts = _211.options,
   _212 = _211.panel;
  _212.css(opts.style), _212.addClass(opts.cls), _213(), _214();
  var _215 = $(_210).panel("header"),
   body = $(_210).panel("body"),
   _216 = $(_210).siblings("div.panel-footer-eui");
  opts.border ? (_215.removeClass("panel-header-noborder-eui"), body.removeClass("panel-body-noborder-eui"), _216.removeClass("panel-footer-noborder-eui")) : (_215.addClass("panel-header-noborder-eui"), body.addClass("panel-body-noborder-eui"), _216.addClass("panel-footer-noborder-eui")), _215.addClass(opts.headerCls), body.addClass(opts.bodyCls), $(_210).attr("id", opts.id || ""), opts.content && ($(_210).panel("clear"), $(_210).html(opts.content), $.parser.parse($(_210)))
 }

 function _219(e, t) {
  var n = $.data(e, "panel"),
   a = n.options;
  if (i && (a.queryParams = t), a.href && (!n.isLoaded || !a.cache)) {
   var i = $.extend({}, a.queryParams);
   if (0 == a.onBeforeLoad.call(e, i)) return;
   n.isLoaded = !1, $(e).panel("clear"), a.loadingMessage && $(e).html($('<div class="panel-loading-eui"></div>').html(a.loadingMessage)), a.loader.call(e, i, function(t) {
    var i = a.extractor.call(e, t);
    $(e).html(i), $.parser.parse($(e)), a.onLoad.apply(e, arguments), n.isLoaded = !0
   }, function() {
    a.onLoadError.apply(e, arguments)
   })
  }
 }

 function _21f(e) {
  var t = $(e);
  t.find(".combo-f").each(function() {
   $(this).combo("destroy")
  }), t.find(".m-btn").each(function() {
   $(this).menubutton("destroy")
  }), t.find(".s-btn").each(function() {
   $(this).splitbutton("destroy")
  }), t.find(".tooltipeu-f").each(function() {
   $(this).tooltipeu("destroy")
  }), t.children("div").each(function() {
   $(this)._size("unfit")
  }), t.empty()
 }

 function _221(e) {
  $(e).panel("doLayout", !0)
 }

 function _223(e, t) {
  function n() {
   a.closed = !1, a.minimized = !1;
   var t = i.children("div.panel-header-eui").find("a.panel-tool-restore-eui");
   t.length && (a.maximized = !0), a.onOpen.call(e), 1 == a.maximized && (a.maximized = !1, _227(e)), 1 == a.collapsed && (a.collapsed = !1, _228(e)), a.collapsed || (_219(e), _221(e))
  }
  var a = $.data(e, "panel").options,
   i = $.data(e, "panel").panel;
  if (1 == t || 0 != a.onBeforeOpen.call(e))
   if (i.stop(!0, !0), $.isFunction(a.openAnimation)) a.openAnimation.call(e, n);
   else switch (a.openAnimation) {
    case "slide":
     i.slideDown(a.openDuration, n);
     break;
    case "fade":
     i.fadeIn(a.openDuration, n);
     break;
    case "show":
     i.show(a.openDuration, n);
     break;
    default:
     i.show(), n()
   }
 }

 function _229(e, t) {
  function n() {
   a.closed = !0, a.onClose.call(e)
  }
  var a = $.data(e, "panel").options,
   i = $.data(e, "panel").panel;
  if (1 == t || 0 != a.onBeforeClose.call(e))
   if (i.stop(!0, !0), i._size("unfit"), $.isFunction(a.closeAnimation)) a.closeAnimation.call(e, n);
   else switch (a.closeAnimation) {
    case "slide":
     i.slideUp(a.closeDuration, n);
     break;
    case "fade":
     i.fadeOut(a.closeDuration, n);
     break;
    case "hide":
     i.hide(a.closeDuration, n);
     break;
    default:
     i.hide(), n()
   }
 }

 function _22d(e, t) {
  var n = $.data(e, "panel"),
   a = n.options,
   i = n.panel;
  (1 == t || 0 != a.onBeforeDestroy.call(e)) && ($(e).panel("clear").panel("clear", "footer"), _1fd(i), a.onDestroy.call(e))
 }

 function _228(e, t) {
  var n = $.data(e, "panel").options,
   a = $.data(e, "panel").panel,
   i = a.children("div.panel-body-eui"),
   o = a.children("div.panel-header-eui").find("a.panel-tool-collapse-eui");
  1 != n.collapsed && (i.stop(!0, !0), 0 != n.onBeforeCollapse.call(e) && (o.addClass("panel-tool-expand-eui"), 1 == t ? i.slideUp("normal", function() {
   n.collapsed = !0, n.onCollapse.call(e)
  }) : (i.hide(), n.collapsed = !0, n.onCollapse.call(e))))
 }

 function _235(e, t) {
  var n = $.data(e, "panel").options,
   a = $.data(e, "panel").panel,
   i = a.children("div.panel-body-eui"),
   o = a.children("div.panel-header-eui").find("a.panel-tool-collapse-eui");
  0 != n.collapsed && (i.stop(!0, !0), 0 != n.onBeforeExpand.call(e) && (o.removeClass("panel-tool-expand-eui"), 1 == t ? i.slideDown("normal", function() {
   n.collapsed = !1, n.onExpand.call(e), _219(e), _221(e)
  }) : (i.show(), n.collapsed = !1, n.onExpand.call(e), _219(e), _221(e))))
 }

 function _227(e) {
  var t = $.data(e, "panel").options,
   n = $.data(e, "panel").panel,
   a = n.children("div.panel-header-eui").find("a.panel-tool-max-eui");
  1 != t.maximized && (a.addClass("panel-tool-restore-eui"), $.data(e, "panel").original || ($.data(e, "panel").original = {
   width: t.width,
   height: t.height,
   left: t.left,
   top: t.top,
   fit: t.fit
  }), t.left = 0, t.top = 0, t.fit = !0, _1fe(e), t.minimized = !1, t.maximized = !0, t.onMaximize.call(e))
 }

 function _23b(e) {
  var t = $.data(e, "panel").options,
   n = $.data(e, "panel").panel;
  n._size("unfit"), n.hide(), t.minimized = !0, t.maximized = !1, t.onMinimize.call(e)
 }

 function _23e(e) {
  var t = $.data(e, "panel").options,
   n = $.data(e, "panel").panel,
   a = n.children("div.panel-header-eui").find("a.panel-tool-max-eui");
  0 != t.maximized && (n.show(), a.removeClass("panel-tool-restore-eui"), $.extend(t, $.data(e, "panel").original), _1fe(e), t.minimized = !1, t.maximized = !1, $.data(e, "panel").original = null, t.onRestore.call(e))
 }

 function _241(e, t) {
  $.data(e, "panel").options.title = t, $(e).panel("header").find("div.panel-title-eui").html(t)
 }
 $.fn._remove = function() {
  return this.each(function() {
   $(this).remove();
   try {
    this.outerHTML = ""
   } catch (e) {}
  })
 };
 var _244 = null;
 $(window).unbind(".panel-eui").bind("resize.panel-eui", function() {
  _244 && clearTimeout(_244), _244 = setTimeout(function() {
    var e = $("body.layout");
   e.length ? (e.layout("resize"), $("body").children(".easyui-fluid:visible").trigger("_resize")) : $("body").panel("doLayout"), _244 = null
  }, 100)
 }), $.fn.panel = function(e, t) {
  return "string" == typeof e ? $.fn.panel.methods[e](this, t) : (e = e || {}, this.each(function() {
   var t, n = $.data(this, "panel");
   n ? (t = $.extend(n.options, e), n.isLoaded = !1) : (t = $.extend({}, $.fn.panel.defaults, $.fn.panel.parseOptions(this), e), $(this).attr("title", ""), n = $.data(this, "panel", {
    options: t,
    panel: _20b(this),
    isLoaded: !1
   })), _20f(this), 1 == t.doSize && (n.panel.css("display", "block"), _1fe(this)), 1 == t.closed || 1 == t.minimized ? n.panel.hide() : _223(this)
  }))
 }, $.fn.panel.methods = {
  options: function(e) {
   return $.data(e[0], "panel").options
  },
  panel: function(e) {
   return $.data(e[0], "panel").panel
  },
  header: function(e) {
   return $.data(e[0], "panel").panel.find(">div.panel-header-eui")
  },
  footer: function(e) {
   return e.panel("panel").children(".panel-footer-eui")
  },
  body: function(e) {
   return $.data(e[0], "panel").panel.find(">div.panel-body-eui")
  },
  setTitle: function(e, t) {
   return e.each(function() {
    _241(this, t)
   })
  },
  open: function(e, t) {
   return e.each(function() {
    _223(this, t)
   })
  },
  close: function(e, t) {
   return e.each(function() {
    _229(this, t)
   })
  },
  destroy: function(e, t) {
   return e.each(function() {
    _22d(this, t)
   })
  },
  clear: function(e, t) {
   return e.each(function() {
    _21f("footer" == t ? $(this).panel("footer") : this)
   })
  },
  refresh: function(e, t) {
   return e.each(function() {
    var e = $.data(this, "panel");
    e.isLoaded = !1, t && ("string" == typeof t ? e.options.href = t : e.options.queryParams = t), _219(this)
   })
  },
  resize: function(e, t) {
   return e.each(function() {
       
    _1fe(this, t);
     
     /**
      * Add custom code for bootstrap 4
      */
    var $gridElement = $('#'+t.id);
    
    if (typeof $gridElement != 'undefined' && $gridElement.length && $gridElement.prop('tagName') != 'INPUT' && typeof t.url != 'undefined') {
        var $resetthis = $(this);
        $resetthis.css("width", "300px");
        var resetWidth = $gridElement.closest('.panel-eui').width();
        $resetthis.css("width", resetWidth);
    }     
   });
  },
  doLayout: function(e, t) {
   return e.each(function() {
    function e(e, n) {
     if (e) {
      var a = e == $("body")[0],
       i = $(e).find("div.panel-eui:visible,div.accordion-eui:visible,div.tabs-container:visible,div.layout:visible,.easyui-fluid:visible").filter(function(t, i) {
        var o = $(i).parents("div.panel-" + n + "-eui:first");
        return a ? 0 == o.length : o[0] == e
       });
      i.trigger("_resize", [t || !1])
     }
    }
    e(this, "body"), e($(this).siblings("div.panel-footer-eui")[0], "footer")
   })
  },
  move: function(e, t) {
   return e.each(function() {
    _207(this, t)
   })
  },
  maximize: function(e) {
   return e.each(function() {
    _227(this)
   })
  },
  minimize: function(e) {
   return e.each(function() {
    _23b(this)
   })
  },
  restore: function(e) {
   return e.each(function() {
    _23e(this)
   })
  },
  collapse: function(e, t) {
   return e.each(function() {
    _228(this, t)
   })
  },
  expand: function(e, t) {
   return e.each(function() {
    _235(this, t)
   })
  }
 }, $.fn.panel.parseOptions = function(e) {
  var t = $(e);
  return $.extend({}, $.parser.parseOptions(e, ["id", "width", "height", "left", "top", "title", "iconCls", "cls", "headerCls", "bodyCls", "tools", "href", "method", {
   cache: "boolean",
   fit: "boolean",
   border: "boolean",
   noheader: "boolean"
  }, {
   collapsible: "boolean",
   minimizable: "boolean",
   maximizable: "boolean"
  }, {
   closable: "boolean",
   collapsed: "boolean",
   minimized: "boolean",
   maximized: "boolean",
   closed: "boolean"
  }, "openAnimation", "closeAnimation", {
   openDuration: "number",
   closeDuration: "number"
  }]), {
   loadingMessage: void 0 != t.attr("loadingMessage") ? t.attr("loadingMessage") : void 0
  })
 }, $.fn.panel.defaults = {
  id: null,
  title: null,
  iconCls: null,
  width: "auto",
  height: "auto",
  left: null,
  top: null,
  cls: null,
  headerCls: null,
  bodyCls: null,
  style: {},
  href: null,
  cache: !0,
  fit: !1,
  border: !0,
  doSize: !0,
  noheader: !1,
  content: null,
  collapsible: !1,
  minimizable: !1,
  maximizable: !1,
  closable: !1,
  collapsed: !1,
  minimized: !1,
  maximized: !1,
  closed: !1,
  openAnimation: !1,
  openDuration: 400,
  closeAnimation: !1,
  closeDuration: 400,
  tools: null,
  footer: null,
  queryParams: {},
  method: "get",
  href: null,
  loadingMessage: "Loading...",
  loader: function(e, t, n) {
   var a = $(this).panel("options");
   return a.href ? void $.ajax({
    type: a.method,
    url: a.href,
    cache: !1,
    data: e,
    dataType: "html",
    success: function(e) {
     t(e)
    },
    error: function() {
     n.apply(this, arguments)
    }
   }) : !1
  },
  extractor: function(e) {
   var t = /<body[^>]*>((.|[\n\r])*)<\/body>/im,
    n = t.exec(e);
   return n ? n[1] : e
  },
  onBeforeLoad: function(e) {},
  onLoad: function() {},
  onLoadError: function() {},
  onBeforeOpen: function() {},
  onOpen: function() {},
  onBeforeClose: function() {},
  onClose: function() {},
  onBeforeDestroy: function() {},
  onDestroy: function() {},
  onResize: function(e, t) {},
  onMove: function(e, t) {},
  onMaximize: function() {},
  onRestore: function() {},
  onMinimize: function() {},
  onBeforeCollapse: function() {},
  onBeforeExpand: function() {},
  onCollapse: function() {},
  onExpand: function() {}
 }
}(jQuery),
function($) {
 function show(e, t, n, a) {
  var i = $(e).window("window");
  if (i) {
   switch (t) {
    case null:
     i.show();
     break;
    case "slide":
     i.slideDown(n);
     break;
    case "fade":
     i.fadeIn(n);
     break;
    case "show":
     i.show(n)
   }
   var o = null;
   a > 0 && (o = setTimeout(function() {
    hide(e, t, n)
   }, a)), i.hover(function() {
    o && clearTimeout(o)
   }, function() {
    a > 0 && (o = setTimeout(function() {
     hide(e, t, n)
    }, a))
   })
  }
 }

 function hide(e, t, n) {
  if (1 != e.locked) {
   e.locked = !0;
   var a = $(e).window("window");
   if (a) {
    switch (t) {
     case null:
      a.hide();
      break;
     case "slide":
      a.slideUp(n);
      break;
     case "fade":
      a.fadeOut(n);
      break;
     case "show":
      a.hide(n)
    }
    setTimeout(function() {
     $(e).window("destroy")
    }, n)
   }
  }
 }

 function _294(e) {
  var t = $.extend({}, $.fn.window.defaults, {
   collapsible: !1,
   minimizable: !1,
   maximizable: !1,
   shadow: !1,
   draggable: !1,
   resizableu: !1,
   closed: !0,
   style: {
    left: "",
    top: "",
    right: 0,
    zIndex: $.fn.window.defaults.zIndex++,
    bottom: -document.body.scrollTop - document.documentElement.scrollTop
   },
   onBeforeOpen: function() {
    return show(this, t.showType, t.showSpeed, t.timeout), !1
   },
   onBeforeClose: function() {
    return hide(this, t.showType, t.showSpeed), !1
   }
  }, {
   title: "",
   width: 250,
   height: 100,
   showType: "slide",
   showSpeed: 600,
   msg: "",
   timeout: 4e3
  }, e);
  t.style.zIndex = $.fn.window.defaults.zIndex++;
  var n = $('<div class="messager-body"></div>').html(t.msg).appendTo("body");
  return n.window(t), n.window("window").css(t.style), n.window("open"), n
 }

 function _296(_297, _298, _299) {
  var win = $('<div class="messager-body"></div>').appendTo("body");
  if (win.append(_298), _299) {
   var tb = $('<div class="messager-button"></div>').appendTo(win);
   for (var _29a in _299) $("<a></a>").attr("href", "javascript:void(0)").text(_29a).css("margin-left", 10).bind("click", eval(_299[_29a])).appendTo(tb).linkbutton()
  }
  return win.window({
   title: _297,
   noheader: _297 ? !1 : !0,
   width: 300,
   height: "auto",
   modal: !0,
   collapsible: !1,
   minimizable: !1,
   maximizable: !1,
   resizableu: !1,
   onClose: function() {
    setTimeout(function() {
     win.window("destroy")
    }, 100)
   }
  }), win.window("window").addClass("messager-window"), win.children("div.messager-button").children("a:first").focus(), win
 }
 $.messager = {
  show: function(e) {
   return _294(e)
  },
  alert: function(e, t, n, a) {
   var i = "<div>" + t + "</div>";
   switch (n) {
    case "error":
     i = '<div class="messager-icon messager-error"></div>' + i;
     break;
    case "info":
     i = '<div class="messager-icon messager-info"></div>' + i;
     break;
    case "question":
     i = '<div class="messager-icon messager-question"></div>' + i;
     break;
    case "warning":
     i = '<div class="messager-icon messager-warning"></div>' + i
   }
   i += '<div style="clear:both;"/>';
   var o = {};
   o[$.messager.defaults.ok] = function() {
    return r.window("close"), a ? (a(), !1) : void 0
   };
   var r = _296(e, i, o);
   return r
  },
  confirm: function(e, t, n) {
   var a = '<div class="messager-icon messager-question"></div><div>' + t + '</div><div style="clear:both;"/>',
    i = {};
   i[$.messager.defaults.ok] = function() {
    return o.window("close"), n ? (n(!0), !1) : void 0
   }, i[$.messager.defaults.cancel] = function() {
    return o.window("close"), n ? (n(!1), !1) : void 0
   };
   var o = _296(e, a, i);
   return o
  },
  prompt: function(e, t, n) {
   var a = '<div class="messager-icon messager-question"></div><div>' + t + '</div><br/><div style="clear:both;"/><div><input class="messager-input" type="text"/></div>',
    i = {};
   i[$.messager.defaults.ok] = function() {
    return o.window("close"), n ? (n($(".messager-input", o).val()), !1) : void 0
   }, i[$.messager.defaults.cancel] = function() {
    return o.window("close"), n ? (n(), !1) : void 0
   };
   var o = _296(e, a, i);
   return o.children("input.messager-input").focus(), o
  },
  progress: function(e) {
   var t = {
    bar: function() {
     return $("body>div.messager-window").find("div.messager-p-bar")
    },
    close: function() {
     var e = $("body>div.messager-window>div.messager-body:has(div.messager-progress)");
     e.length && e.window("close")
    }
   };
   if ("string" == typeof e) {
    var n = t[e];
    return n()
   }
   var a = $.extend({
     title: "",
     msg: "",
     text: void 0,
     interval: 300
    }, e || {}),
    i = '<div class="messager-progress"><div class="messager-p-msg"></div><div class="messager-p-bar"></div></div>',
    o = _296(a.title, i, null);
   o.find("div.messager-p-msg").html(a.msg);
   var r = o.find("div.messager-p-bar");
   return r.progressbar({
    text: a.text
   }), o.window({
    closable: !1,
    onClose: function() {
     this.timer && clearInterval(this.timer), $(this).window("destroy")
    }
   }), a.interval && (o[0].timer = setInterval(function() {
    var e = r.progressbar("getValue");
    e += 10, e > 100 && (e = 0), r.progressbar("setValue", e)
   }, a.interval)), o
  }
 }, $.messager.defaults = {
  ok: "Ok",
  cancel: "Cancel"
 }
}(jQuery),
function(e) {
 function t(t, n) {
  function a(e, t) {
   for (var n = 0, a = 0; a < r.length; a++) {
    var i = r[a],
     o = i.panel("header")._outerHeight(s);
    if (i.panel("options").collapsible == e) {
     var l = isNaN(t) ? void 0 : t + s * o.length;
     i.panel("resize", {
      width: d.width(),
      height: e ? l : void 0
     }), n += i.panel("panel").outerHeight() - s * o.length
    }
   }
   return n
  }
  var i = e.data(t, "accordion"),
   o = i.options,
   r = i.panels,
   d = e(t);
  n && e.extend(o, {
   width: n.width,
   height: n.height
  }), d._size(o);
  var s = 0,
   l = "auto",
   c = d.find(">div.panel-eui>div.accordion-header-eui");
  c.length && (s = e(c[0]).css("height", "")._outerHeight()), isNaN(parseInt(o.height)) || (l = d.height() - s * c.length), a(!0, l - a(!1) + 1)
 }

 function n(t, n, a, i) {
  for (var o = e.data(t, "accordion").panels, r = [], d = 0; d < o.length; d++) {
   var s = o[d];
   if (n) s.panel("options")[n] == a && r.push(s);
   else if (s[0] == e(a)[0]) return d
  }
  return n ? i ? r : r.length ? r[0] : null : -1
 }

 function a(e) {
  return n(e, "collapsed", !1, !0)
 }

 function i(e) {
  var t = a(e);
  return t.length ? t[0] : null
 }

 function o(e, t) {
  return n(e, null, t)
 }

 function r(t, a) {
  var i = e.data(t, "accordion").panels;
  return "number" == typeof a ? 0 > a || a >= i.length ? null : i[a] : n(t, "title", a)
 }

 function d(t) {
  var n = e.data(t, "accordion").options,
   a = e(t);
  n.border ? a.removeClass("accordion-noborder-eui") : a.addClass("accordion-noborder-eui")
 }

 function s(n) {
  var a = e.data(n, "accordion"),
   i = e(n);
  i.addClass("accordion-eui"), a.panels = [], i.children("div").each(function() {
   var t = e.extend({}, e.parser.parseOptions(this), {
     selected: e(this).attr("selected") ? !0 : void 0
    }),
    i = e(this);
   a.panels.push(i), l(n, i, t)
  }), i.bind("_resize", function(a, i) {
   return (e(this).hasClass("easyui-fluid") || i) && t(n), !1
  })
 }

 function l(t, n, i) {
  var r = e.data(t, "accordion").options;
  n.panel(e.extend({}, {
   collapsible: !0,
   minimizable: !1,
   maximizable: !1,
   closable: !1,
   doSize: !1,
   collapsed: !0,
   headerCls: "accordion-header-eui",
   bodyCls: "accordion-body-eui"
  }, i, {
   onBeforeExpand: function() {
    if (i.onBeforeExpand && 0 == i.onBeforeExpand.call(this)) return !1;
    if (!r.multiple)
     for (var n = e.grep(a(t), function(e) {
       return e.panel("options").collapsible
      }), d = 0; d < n.length; d++) u(t, o(t, n[d]));
    var s = e(this).panel("header");
    s.addClass("accordion-header-selected-eui"), s.find(".accordion-collapse-eui").removeClass("accordion-expand-eui")
   },
   onExpand: function() {
    i.onExpand && i.onExpand.call(this), r.onSelect.call(t, e(this).panel("options").title, o(t, this))
   },
   onBeforeCollapse: function() {
    if (i.onBeforeCollapse && 0 == i.onBeforeCollapse.call(this)) return !1;
    var t = e(this).panel("header");
    t.removeClass("accordion-header-selected-eui"), t.find(".accordion-collapse-eui").addClass("accordion-expand-eui")
   },
   onCollapse: function() {
    i.onCollapse && i.onCollapse.call(this), r.onUnselect.call(t, e(this).panel("options").title, o(t, this));
   }
  }));
  var d = n.panel("header"),
   s = d.children("div.panel-tool-eui");
  s.children("a.panel-tool-collapse-eui").hide();
  var l = e('<a href="javascript:void(0)"></a>').addClass("accordion-collapse accordion-expand").appendTo(s);
  l.bind("click", function() {
   var e = o(t, n);
   return n.panel("options").collapsed ? c(t, e) : u(t, e), !1
  }), n.panel("options").collapsible ? l.show() : l.hide(), d.click(function() {
   return e(this).find("a.accordion-collapse-eui:visible").triggerHandler("click"), !1
  })
 }

 function c(t, n) {
  var a = r(t, n);
  if (a) {
   f(t);
   var i = e.data(t, "accordion").options;
   a.panel("expand", i.animate)
  }
 }

 function u(t, n) {
  var a = r(t, n);
  if (a) {
   f(t);
   var i = e.data(t, "accordion").options;
   a.panel("collapse", i.animate)
  }
 }

 function h(t) {
  function a(e) {
   var n = i.animate;
   i.animate = !1, c(t, e), i.animate = n
  }
  var i = e.data(t, "accordion").options,
   r = n(t, "selected", !0);
  a(r ? o(t, r) : i.selected)
 }

 function f(t) {
  for (var n = e.data(t, "accordion").panels, a = 0; a < n.length; a++) n[a].stop(!0, !0)
 }

 function p(n, a) {
  var i = e.data(n, "accordion"),
   o = i.options,
   r = i.panels;
  void 0 == a.selected && (a.selected = !0), f(n);
  var d = e("<div></div>").appendTo(n);
  r.push(d), l(n, d, a), t(n), o.onAdd.call(n, a.title, r.length - 1), a.selected && c(n, r.length - 1)
 }

 function g(n, a) {
  var d = e.data(n, "accordion"),
   s = d.options,
   l = d.panels;
  f(n);
  var u = r(n, a),
   h = u.panel("options").title,
   p = o(n, u);
  if (u && 0 != s.onBeforeRemove.call(n, h, p)) {
   if (l.splice(p, 1), u.panel("destroy"), l.length) {
    t(n);
    var g = i(n);
    g || c(n, 0)
   }
   s.onRemove.call(n, h, p)
  }
 }
 e.fn.accordion = function(n, a) {
  return "string" == typeof n ? e.fn.accordion.methods[n](this, a) : (n = n || {}, this.each(function() {
   var a = e.data(this, "accordion");
   a ? e.extend(a.options, n) : (e.data(this, "accordion", {
    options: e.extend({}, e.fn.accordion.defaults, e.fn.accordion.parseOptions(this), n),
    accordion: e(this).addClass("accordion-eui"),
    panels: []
   }), s(this)), d(this), t(this), h(this)
  }))
 }, e.fn.accordion.methods = {
  options: function(t) {
   return e.data(t[0], "accordion").options
  },
  panels: function(t) {
   return e.data(t[0], "accordion").panels
  },
  resize: function(e, n) {
   return e.each(function() {
    t(this, n)
   })
  },
  getSelections: function(e) {
   return a(e[0])
  },
  getSelected: function(e) {
   return i(e[0])
  },
  getPanel: function(e, t) {
   return r(e[0], t)
  },
  getPanelIndex: function(e, t) {
   return o(e[0], t)
  },
  select: function(e, t) {
   return e.each(function() {
    c(this, t)
   })
  },
  unselect: function(e, t) {
   return e.each(function() {
    u(this, t)
   })
  },
  add: function(e, t) {
   return e.each(function() {
    p(this, t)
   })
  },
  remove: function(e, t) {
   return e.each(function() {
    g(this, t)
   })
  }
 }, e.fn.accordion.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.parser.parseOptions(t, ["width", "height", {
   fit: "boolean",
   border: "boolean",
   animate: "boolean",
   multiple: "boolean",
   selected: "number"
  }]))
 }, e.fn.accordion.defaults = {
  width: "auto",
  height: "auto",
  fit: !1,
  border: !0,
  animate: !0,
  multiple: !1,
  selected: 0,
  onSelect: function(e, t) {},
  onUnselect: function(e, t) {},
  onAdd: function(e, t) {},
  onBeforeRemove: function(e, t) {},
  onRemove: function(e, t) {}
 }
}(jQuery),
function($) {
 function _301(e) {
  var t = $.data(e, "tabs").options;
  if ("left" != t.tabPosition && "right" != t.tabPosition && t.showHeader) {
   var n = $(e).children("div.tabs-header"),
    a = n.children("div.tabs-tool"),
    i = n.children("div.tabs-scroller-left"),
    o = n.children("div.tabs-scroller-right"),
    r = n.children("div.tabs-wrap"),
    d = n.outerHeight();
   t.plain && (d -= d - n.height()), a._outerHeight(d);
   var s = 0;
   $("ul.tabs li", n).each(function() {
    s += $(this).outerWidth(!0)
   });
   var l = n.width() - a._outerWidth();
   s > l ? (i.add(o).show()._outerHeight(d), "left" == t.toolPosition ? (a.css({
    left: i.outerWidth(),
    right: ""
   }), r.css({
    marginLeft: i.outerWidth() + a._outerWidth(),
    marginRight: o._outerWidth(),
    width: l - i.outerWidth() - o.outerWidth()
   })) : (a.css({
    left: "",
    right: o.outerWidth()
   }), r.css({
    marginLeft: i.outerWidth(),
    marginRight: o.outerWidth() + a._outerWidth(),
    width: l - i.outerWidth() - o.outerWidth()
   }))) : (i.add(o).hide(), "left" == t.toolPosition ? (a.css({
    left: 0,
    right: ""
   }), r.css({
    marginLeft: a._outerWidth(),
    marginRight: 0,
    width: l
   })) : (a.css({
    left: "",
    right: 0
   }), r.css({
    marginLeft: 0,
    marginRight: a._outerWidth(),
    width: l
   })))
  }
 }

 function _309(_30a) {
  var opts = $.data(_30a, "tabs").options,
   _30b = $(_30a).children("div.tabs-header");
  if (opts.tools)
   if ("string" == typeof opts.tools) $(opts.tools).addClass("tabs-tool").appendTo(_30b), $(opts.tools).show();
   else {
    _30b.children("div.tabs-tool").remove();
    for (var _30c = $('<div class="tabs-tool"><table cellspacing="0" cellpadding="0" style="height:100%"><tr></tr></table></div>').appendTo(_30b), tr = _30c.find("tr"), i = 0; i < opts.tools.length; i++) {
     var td = $("<td></td>").appendTo(tr),
      tool = $('<a href="javascript:void(0);"></a>').appendTo(td);
     tool[0].onclick = eval(opts.tools[i].handler || function() {}), tool.linkbutton($.extend({}, opts.tools[i], {
      plain: !0
     }))
    }
   } else _30b.children("div.tabs-tool").remove()
 }

 function _30d(e, t) {
  var n = $.data(e, "tabs"),
   a = n.options,
   i = $(e);
  t && $.extend(a, {
   width: t.width,
   height: t.height
  }), i._size(a);
  for (var o = i.children("div.tabs-header"), r = i.children("div.tabs-panels"), d = o.find("div.tabs-wrap"), s = d.find(".tabs"), l = 0; l < n.tabs.length; l++) {
   var c = n.tabs[l].panel("options"),
    u = c.tab.find("a.tabs-inner"),
    h = parseInt(c.tabWidth || a.tabWidth) || void 0;
   h ? u._outerWidth(h) : u.css("width", ""), u._outerHeight(a.tabHeight), u.css("lineHeight", u.height() + "px")
  }
  if ("left" == a.tabPosition || "right" == a.tabPosition) o._outerWidth(a.showHeader ? a.headerWidth : 0), r._outerWidth(i.width() - o.outerWidth()), o.add(r)._outerHeight(a.height), d._outerWidth(o.width()), s._outerWidth(d.width()).css("height", "");
  else {
   var f = o.children("div.tabs-scroller-left,div.tabs-scroller-right,div.tabs-tool");
   o._outerWidth(a.width).css("height", ""), a.showHeader ? (o.css("background-color", ""), d.css("height", ""), f.show()) : (o.css("background-color", "transparent"), o._outerHeight(0), d._outerHeight(0), f.hide()), s._outerHeight(a.tabHeight).css("width", ""), _301(e), r._size("height", isNaN(a.height) ? "" : a.height - o.outerHeight()), r._size("width", isNaN(a.width) ? "" : a.width)
  }
 }

 function _315(e) {
  var t = $.data(e, "tabs").options,
   n = _317(e);
  if (n) {
   var a = $(e).children("div.tabs-panels"),
    i = "auto" == t.width ? "auto" : a.width(),
    o = "auto" == t.height ? "auto" : a.height();
   n.panel("resize", {
    width: i,
    height: o
   })
  }
 }

 function _31b(e) {
  var t = $.data(e, "tabs").tabs,
   n = $(e);
  n.addClass("tabs-container");
  var a = $('<div class="tabs-panels"></div>').insertBefore(n);
  n.children("div").each(function() {
   a[0].appendChild(this)
  }), n[0].appendChild(a[0]), $('<div class="tabs-header"><div class="tabs-scroller-left"></div><div class="tabs-scroller-right"></div><div class="tabs-wrap"><ul class="tabs"></ul></div></div>').prependTo(e), n.children("div.tabs-panels").children("div").each(function(n) {
   var a = $.extend({}, $.parser.parseOptions(this), {
     selected: $(this).attr("selected") ? !0 : void 0
    }),
    i = $(this);
   t.push(i), _329(e, i, a)
  }), n.children("div.tabs-header").find(".tabs-scroller-left, .tabs-scroller-right").hover(function() {
   $(this).addClass("tabs-scroller-over")
  }, function() {
   $(this).removeClass("tabs-scroller-over")
  }), n.bind("_resize", function(t, n) {
   return ($(this).hasClass("easyui-fluid") || n) && (_30d(e), _315(e)), !1
  })
 }

 function _31e(e) {
  function t(e) {
   var t = 0;
   return e.parent().children("li").each(function(n) {
    return e[0] == this ? (t = n, !1) : void 0
   }), t
  }
  var n = $.data(e, "tabs"),
   a = n.options;
  $(e).children("div.tabs-header").unbind().bind("click", function(i) {
   if ($(i.target).hasClass("tabs-scroller-left")) $(e).tabs("scrollBy", -a.scrollIncrement);
   else if ($(i.target).hasClass("tabs-scroller-right")) $(e).tabs("scrollBy", a.scrollIncrement);
   else {
    var o = $(i.target).closest("li");
    if (o.hasClass("tabs-disabled")) return;
    var r = $(i.target).closest("a.tabs-close");
    if (r.length) _33b(e, t(o));
    else if (o.length) {
     var d = t(o),
      s = n.tabs[d].panel("options");
     s.collapsible ? s.closed ? _331(e, d) : _352(e, d) : _331(e, d)
    }
   }
  }).bind("contextmenu", function(n) {
   var i = $(n.target).closest("li");
   i.hasClass("tabs-disabled") || i.length && a.onContextMenu.call(e, n, i.find("span.tabs-title").html(), t(i))
  })
 }

 function _325(e) {
  var t = $.data(e, "tabs").options,
   n = $(e).children("div.tabs-header"),
   a = $(e).children("div.tabs-panels");
  n.removeClass("tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right"), a.removeClass("tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right"), "top" == t.tabPosition ? n.insertBefore(a) : "bottom" == t.tabPosition ? (n.insertAfter(a), n.addClass("tabs-header-bottom"), a.addClass("tabs-panels-top")) : "left" == t.tabPosition ? (n.addClass("tabs-header-left"), a.addClass("tabs-panels-right")) : "right" == t.tabPosition && (n.addClass("tabs-header-right"), a.addClass("tabs-panels-left")), 1 == t.plain ? n.addClass("tabs-header-plain") : n.removeClass("tabs-header-plain"), 1 == t.border ? (n.removeClass("tabs-header-noborder"), a.removeClass("tabs-panels-noborder")) : (n.addClass("tabs-header-noborder"), a.addClass("tabs-panels-noborder"))
 }

 function _329(e, t, n) {
  var a = $.data(e, "tabs");
  n = n || {}, t.panel($.extend({}, n, {
   border: !1,
   noheader: !0,
   closed: !0,
   doSize: !1,
   iconCls: n.icon ? n.icon : void 0,
   onLoad: function() {
    n.onLoad && n.onLoad.call(this, arguments), a.options.onLoad.call(e, $(this))
   }
  }));
  var i = t.panel("options"),
   o = $(e).children("div.tabs-header").find("ul.tabs");
  i.tab = $("<li></li>").appendTo(o), i.tab.append('<a href="javascript:void(0)" class="tabs-inner"><span class="tabs-title"></span><span class="tabs-icon"></span></a>'), $(e).tabs("update", {
   tab: t,
   options: i,
   type: "header"
  })
 }

 function _32d(e, t) {
  var n = $.data(e, "tabs"),
   a = n.options,
   i = n.tabs;
  void 0 == t.selected && (t.selected = !0);
  var o = $("<div></div>").appendTo($(e).children("div.tabs-panels"));
  i.push(o), _329(e, o, t), a.onAdd.call(e, t.title, i.length - 1), _30d(e), t.selected && _331(e, i.length - 1)
 }

 function _332(e, t) {
  t.type = t.type || "all";
  var n = $.data(e, "tabs").selectHis,
   a = t.tab,
   i = a.panel("options").title;
  if (("all" == t.type || "body" == t) && a.panel($.extend({}, t.options, {
    iconCls: t.options.icon ? t.options.icon : void 0
   })), "all" == t.type || "header" == t.type) {
   var o = a.panel("options"),
    r = o.tab,
    d = r.find("span.tabs-title"),
    s = r.find("span.tabs-icon");
   if (d.html(o.title), s.attr("class", "tabs-icon"), r.find("a.tabs-close").remove(), o.closable ? (d.addClass("tabs-closable"), $('<a href="javascript:void(0)" class="tabs-close"></a>').appendTo(r)) : d.removeClass("tabs-closable"), o.iconCls ? (d.addClass("tabs-with-icon"), s.addClass(o.iconCls)) : d.removeClass("tabs-with-icon"), i != o.title)
    for (var l = 0; l < n.length; l++) n[l] == i && (n[l] = o.title);
   if (r.find("span.tabs-p-tool").remove(), o.tools) {
    var c = $('<span class="tabs-p-tool"></span>').insertAfter(r.find("a.tabs-inner"));
    if ($.isArray(o.tools))
     for (var l = 0; l < o.tools.length; l++) {
      var u = $('<a href="javascript:void(0)"></a>').appendTo(c);
      u.addClass(o.tools[l].iconCls), o.tools[l].handler && u.bind("click", {
       handler: o.tools[l].handler
      }, function(e) {
       $(this).parents("li").hasClass("tabs-disabled") || e.data.handler.call(this)
      })
     } else $(o.tools).children().appendTo(c);
    var h = 12 * c.children().length;
    o.closable ? h += 8 : (h -= 3, c.css("right", "5px")), d.css("padding-right", h + "px")
   }
  }
  _30d(e), $.data(e, "tabs").options.onUpdate.call(e, o.title, _33a(e, a))
 }

 function _33b(e, t) {
  var n = $.data(e, "tabs").options,
   a = $.data(e, "tabs").tabs,
   i = $.data(e, "tabs").selectHis;
  if (_33f(e, t)) {
   var o = _340(e, t),
    r = o.panel("options").title,
    d = _33a(e, o);
   if (0 != n.onBeforeClose.call(e, r, d)) {
    var o = _340(e, t, !0);
    o.panel("options").tab.remove(), o.panel("destroy"), n.onClose.call(e, r, d), _30d(e);
    for (var s = 0; s < i.length; s++) i[s] == r && (i.splice(s, 1), s--);
    var l = i.pop();
    l ? _331(e, l) : a.length && _331(e, 0)
   }
  }
 }

 function _340(e, t, n) {
  var a = $.data(e, "tabs").tabs;
  if ("number" == typeof t) {
   if (0 > t || t >= a.length) return null;
   var i = a[t];
   return n && a.splice(t, 1), i
  }
  for (var o = 0; o < a.length; o++) {
   var i = a[o];
   if (i.panel("options").title == t) return n && a.splice(o, 1), i
  }
  return null
 }

 function _33a(e, t) {
  for (var n = $.data(e, "tabs").tabs, a = 0; a < n.length; a++)
   if (n[a][0] == $(t)[0]) return a;
  return -1
 }

 function _317(e) {
  for (var t = $.data(e, "tabs").tabs, n = 0; n < t.length; n++) {
   var a = t[n];
   if (0 == a.panel("options").closed) return a
  }
  return null
 }

 function _349(e) {
  for (var t = $.data(e, "tabs"), n = t.tabs, a = 0; a < n.length; a++)
   if (n[a].panel("options").selected) return void _331(e, a);
  _331(e, t.options.selected)
 }

 function _331(e, t) {
  var n = $.data(e, "tabs"),
   a = n.options,
   i = n.tabs,
   o = n.selectHis;
  if (0 != i.length) {
   var r = _340(e, t);
   if (r) {
    var d = _317(e);
    if (d) {
     if (r[0] == d[0]) return void _315(e);
     if (_352(e, _33a(e, d)), !d.panel("options").closed) return
    }
    r.panel("open");
    var s = r.panel("options").title;
    o.push(s);
    var l = r.panel("options").tab;
    l.addClass("tabs-selected");
    var c = $(e).find(">div.tabs-header>div.tabs-wrap"),
     u = l.position().left,
     h = u + l.outerWidth();
    if (0 > u || h > c.width()) {
     var f = u - (c.width() - l.width()) / 2;
     $(e).tabs("scrollBy", f)
    } else $(e).tabs("scrollBy", 0);
    _315(e), a.onSelect.call(e, s, _33a(e, r))
   }
  }
 }

 function _352(e, t) {
  var n = $.data(e, "tabs"),
   a = _340(e, t);
  if (a) {
   var i = a.panel("options");
   i.closed || (a.panel("close"), i.closed && (i.tab.removeClass("tabs-selected"), n.options.onUnselect.call(e, i.title, _33a(e, a))))
  }
 }

 function _33f(e, t) {
  return null != _340(e, t)
 }

 function _35b(e, t) {
  var n = $.data(e, "tabs").options;
  n.showHeader = t, $(e).tabs("resize")
 }
 $.fn.tabs = function(e, t) {
  return "string" == typeof e ? $.fn.tabs.methods[e](this, t) : (e = e || {}, this.each(function() {
   var t = $.data(this, "tabs");
   t ? $.extend(t.options, e) : ($.data(this, "tabs", {
    options: $.extend({}, $.fn.tabs.defaults, $.fn.tabs.parseOptions(this), e),
    tabs: [],
    selectHis: []
   }), _31b(this)), _309(this), _325(this), _30d(this), _31e(this), _349(this)
  }))
 }, $.fn.tabs.methods = {
  options: function(e) {
   var t = e[0],
    n = $.data(t, "tabs").options,
    a = _317(t);
   return n.selected = a ? _33a(t, a) : -1, n
  },
  tabs: function(e) {
   return $.data(e[0], "tabs").tabs
  },
  resize: function(e, t) {
   return e.each(function() {
    _30d(this, t), _315(this)
   })
  },
  add: function(e, t) {
   return e.each(function() {
    _32d(this, t)
   })
  },
  close: function(e, t) {
   return e.each(function() {
    _33b(this, t)
   })
  },
  getTab: function(e, t) {
   return _340(e[0], t)
  },
  getTabIndex: function(e, t) {
   return _33a(e[0], t)
  },
  getSelected: function(e) {
   return _317(e[0])
  },
  select: function(e, t) {
   return e.each(function() {
    _331(this, t)
   })
  },
  unselect: function(e, t) {
   return e.each(function() {
    _352(this, t)
   })
  },
  exists: function(e, t) {
   return _33f(e[0], t)
  },
  update: function(e, t) {
   return e.each(function() {
    _332(this, t)
   })
  },
  enableTab: function(e, t) {
   return e.each(function() {
    $(this).tabs("getTab", t).panel("options").tab.removeClass("tabs-disabled")
   })
  },
  disableTab: function(e, t) {
   return e.each(function() {
    $(this).tabs("getTab", t).panel("options").tab.addClass("tabs-disabled")
   })
  },
  showHeader: function(e) {
   return e.each(function() {
    _35b(this, !0)
   })
  },
  hideHeader: function(e) {
   return e.each(function() {
    _35b(this, !1)
   })
  },
  scrollBy: function(e, t) {
   return e.each(function() {
    function e() {
     var e = 0,
      t = a.children("ul");
     return t.children("li").each(function() {
      e += $(this).outerWidth(!0)
     }), e - a.width() + (t.outerWidth() - t.width())
    }
    var n = $(this).tabs("options"),
     a = $(this).find(">div.tabs-header>div.tabs-wrap"),
     i = Math.min(a._scrollLeft() + t, e());
    a.animate({
     scrollLeft: i
    }, n.scrollDuration)
   })
  }
 }, $.fn.tabs.parseOptions = function(e) {
  return $.extend({}, $.parser.parseOptions(e, ["tools", "toolPosition", "tabPosition", {
   fit: "boolean",
   border: "boolean",
   plain: "boolean",
   headerWidth: "number",
   tabWidth: "number",
   tabHeight: "number",
   selected: "number",
   showHeader: "boolean"
  }]))
 }, $.fn.tabs.defaults = {
  width: "auto",
  height: "auto",
  headerWidth: 150,
  tabWidth: "auto",
  tabHeight: 27,
  selected: 0,
  showHeader: !0,
  plain: !1,
  fit: !1,
  border: !0,
  tools: null,
  toolPosition: "right",
  tabPosition: "top",
  scrollIncrement: 100,
  scrollDuration: 400,
  onLoad: function(e) {},
  onSelect: function(e, t) {},
  onUnselect: function(e, t) {},
  onBeforeClose: function(e, t) {},
  onClose: function(e, t) {},
  onAdd: function(e, t) {},
  onUpdate: function(e, t) {},
  onContextMenu: function(e, t, n) {}
 }
}(jQuery),
function(e) {
 function t(t, n) {
  function a(e, t) {
   if (e.length && d(e)) {
    var n = e.panel("options");
    e.panel("resize", {
     width: l.width(),
     height: n.height
    });
    var a = e.panel("panel").outerHeight();
    e.panel("move", {
     left: 0,
     top: "n" == t ? 0 : l.height() - a
    }), c.height -= a, "n" == t && (c.top += a, !n.split && n.border && c.top--), !n.split && n.border && c.height++
   }
  }

  function i(e, t) {
   if (e.length && d(e)) {
    var n = e.panel("options");
    e.panel("resize", {
     width: n.width,
     height: c.height
    });
    var a = e.panel("panel").outerWidth();
    e.panel("move", {
     left: "e" == t ? l.width() - a : 0,
     top: c.top
    }), c.width -= a, "w" == t && (c.left += a, !n.split && n.border && c.left--), !n.split && n.border && c.width++
   }
  }
  var o = e.data(t, "layout"),
   r = o.options,
   s = o.panels,
   l = e(t);
  n && e.extend(r, {
   width: n.width,
   height: n.height
  }), "body" == t.tagName.toLowerCase() ? l._size("fit") : l._size(r);
  var c = {
   top: 0,
   left: 0,
   width: l.width(),
   height: l.height()
  };
  a(d(s.expandNorth) ? s.expandNorth : s.north, "n"), a(d(s.expandSouth) ? s.expandSouth : s.south, "s"), i(d(s.expandEast) ? s.expandEast : s.east, "e"), i(d(s.expandWest) ? s.expandWest : s.west, "w"), s.center.panel("resize", c)
 }

 function n(n) {
  function i(t) {
   t.children("div").each(function() {
    var t = e.fn.layout.parsePanelOptions(this);
    "north,south,east,west,center".indexOf(t.region) >= 0 && a(n, t, this)
   })
  }
  var o = e(n);
  o.addClass("layout"), i(o.children("form").length ? o.children("form") : o), o.append('<div class="layout-split-proxy-h"></div><div class="layout-split-proxy-v"></div>'), o.bind("_resize", function(a, i) {
   return (e(this).hasClass("easyui-fluid") || i) && t(n), !1
  })
 }

 function a(n, a, i) {
  a.region = a.region || "center";
  var r = e.data(n, "layout").panels,
   d = e(n),
   s = a.region;
  if (!r[s].length) {
   var c = e(i);
   c.length || (c = e("<div></div>").appendTo(d));
   var u = e.extend({}, e.fn.layout.paneldefaults, {
    width: c.length ? parseInt(c[0].style.width) || c.outerWidth() : "auto",
    height: c.length ? parseInt(c[0].style.height) || c.outerHeight() : "auto",
    doSize: !1,
    collapsible: !0,
    cls: "layout-panel layout-panel-" + s,
    bodyCls: "layout-body",
    onOpen: function() {
     var t = e(this).panel("header").children("div.panel-tool");
     t.children("a.panel-tool-collapse").hide();
     var a = {
      north: "up",
      south: "down",
      east: "right",
      west: "left"
     };
     if (a[s]) {
      var i = "layout-button-" + a[s],
       r = t.children("a." + i);
      r.length || (r = e('<a href="javascript:void(0)"></a>').addClass(i).appendTo(t), r.bind("click", {
       dir: s
      }, function(e) {
       return o(n, e.data.dir), !1
      })), e(this).panel("options").collapsible ? r.show() : r.hide()
     }
    }
   }, a);
   if (c.panel(u), r[s] = c, c.panel("options").split) {
    var h = c.panel("panel");
    h.addClass("layout-split-" + s);
    var f = "";
    "north" == s && (f = "s"), "south" == s && (f = "n"), "east" == s && (f = "w"), "west" == s && (f = "e"), h.resizableu(e.extend({}, {
     handles: f,
     onStartResize: function(t) {
      if (l = !0, "north" == s || "south" == s) var a = e(">div.layout-split-proxy-v", n);
      else var a = e(">div.layout-split-proxy-h", n);
      var i = {
       display: "block"
      };
      "north" == s ? (i.top = parseInt(h.css("top")) + h.outerHeight() - a.height(), i.left = parseInt(h.css("left")), i.width = h.outerWidth(), i.height = a.height()) : "south" == s ? (i.top = parseInt(h.css("top")), i.left = parseInt(h.css("left")), i.width = h.outerWidth(), i.height = a.height()) : "east" == s ? (i.top = parseInt(h.css("top")) || 0, i.left = parseInt(h.css("left")) || 0, i.width = a.width(), i.height = h.outerHeight()) : "west" == s && (i.top = parseInt(h.css("top")) || 0, i.left = h.outerWidth() - a.width(), i.width = a.width(), i.height = h.outerHeight()), a.css(i), e('<div class="layout-mask"></div>').css({
       left: 0,
       top: 0,
       width: d.width(),
       height: d.height()
      }).appendTo(d)
     },
     onResize: function(t) {
      if ("north" == s || "south" == s) {
       var a = e(">div.layout-split-proxy-v", n);
       a.css("top", t.pageY - e(n).offset().top - a.height() / 2)
      } else {
       var a = e(">div.layout-split-proxy-h", n);
       a.css("left", t.pageX - e(n).offset().left - a.width() / 2)
      }
      return !1
     },
     onStopResize: function(e) {
      d.children("div.layout-split-proxy-v,div.layout-split-proxy-h").hide(), c.panel("resize", e.data), t(n), l = !1, d.find(">div.layout-mask").remove()
     }
    }, a))
   }
  }
 }

 function i(t, n) {
  var a = e.data(t, "layout").panels;
  if (a[n].length) {
   a[n].panel("destroy"), a[n] = e();
   var i = "expand" + n.substring(0, 1).toUpperCase() + n.substring(1);
   a[i] && (a[i].panel("destroy"), a[i] = void 0)
  }
 }

 function o(t, n, a) {
  function i(a) {
   var i;
   "east" == a ? i = "layout-button-left" : "west" == a ? i = "layout-button-right" : "north" == a ? i = "layout-button-down" : "south" == a && (i = "layout-button-up");
   var o = e("<div></div>").appendTo(t);
   return o.panel(e.extend({}, e.fn.layout.paneldefaults, {
    cls: "layout-expand layout-expand-" + a,
    title: "&nbsp;",
    closed: !0,
    minWidth: 0,
    minHeight: 0,
    doSize: !1,
    tools: [{
     iconCls: i,
     handler: function() {
      return r(t, n), !1
     }
    }]
   })), o.panel("panel").hover(function() {
    e(this).addClass("layout-expand-over")
   }, function() {
    e(this).removeClass("layout-expand-over")
   }), o
  }

  function s() {
   var a = e(t),
    i = c.center.panel("options"),
    o = h.collapsedSize;
   if ("east" == n) {
    var r = u.panel("panel")._outerWidth(),
     s = i.width + r - o;
    return (h.split || !h.border) && s++, {
     resizeC: {
      width: s
     },
     expand: {
      left: a.width() - r
     },
     expandP: {
      top: i.top,
      left: a.width() - o,
      width: o,
      height: i.height
     },
     collapse: {
      left: a.width(),
      top: i.top,
      height: i.height
     }
    }
   }
   if ("west" == n) {
    var r = u.panel("panel")._outerWidth(),
     s = i.width + r - o;
    return (h.split || !h.border) && s++, {
     resizeC: {
      width: s,
      left: o - 1
     },
     expand: {
      left: 0
     },
     expandP: {
      left: 0,
      top: i.top,
      width: o,
      height: i.height
     },
     collapse: {
      left: -r,
      top: i.top,
      height: i.height
     }
    }
   }
   if ("north" == n) {
    var l = u.panel("panel")._outerHeight(),
     f = i.height;
    return d(c.expandNorth) || (f += l - o + (h.split || !h.border ? 1 : 0)), c.east.add(c.west).add(c.expandEast).add(c.expandWest).panel("resize", {
     top: o - 1,
     height: f
    }), {
     resizeC: {
      top: o - 1,
      height: f
     },
     expand: {
      top: 0
     },
     expandP: {
      top: 0,
      left: 0,
      width: a.width(),
      height: o
     },
     collapse: {
      top: -l,
      width: a.width()
     }
    }
   }
   if ("south" == n) {
    var l = u.panel("panel")._outerHeight(),
     f = i.height;
    return d(c.expandSouth) || (f += l - o + (h.split || !h.border ? 1 : 0)), c.east.add(c.west).add(c.expandEast).add(c.expandWest).panel("resize", {
     height: f
    }), {
     resizeC: {
      height: f
     },
     expand: {
      top: a.height() - l
     },
     expandP: {
      top: a.height() - o,
      left: 0,
      width: a.width(),
      height: o
     },
     collapse: {
      top: a.height(),
      width: a.width()
     }
    }
   }
  }
  void 0 == a && (a = "normal");
  var c = e.data(t, "layout").panels,
   u = c[n],
   h = u.panel("options");
  if (0 != h.onBeforeCollapse.call(u)) {
   var f = "expand" + n.substring(0, 1).toUpperCase() + n.substring(1);
   c[f] || (c[f] = i(n), c[f].panel("panel").bind("click", function() {
    u.panel("expand", !1).panel("open");
    var a = s();
    return u.panel("resize", a.collapse), u.panel("panel").animate(a.expand, function() {
     e(this).unbind(".layout").bind("mouseleave.layout", {
      region: n
     }, function(n) {
      1 != l && (e("body>div.combo-p>div.combo-panel:visible").length || o(t, n.data.region))
     })
    }), !1
   }));
   var p = s();
   d(c[f]) || c.center.panel("resize", p.resizeC), u.panel("panel").animate(p.collapse, a, function() {
    u.panel("collapse", !1).panel("close"), c[f].panel("open").panel("resize", p.expandP), e(this).unbind(".layout")
   })
  }
 }

 function r(n, a) {
  function i() {
   var t = e(n),
    i = o.center.panel("options");
   return "east" == a && o.expandEast ? {
    collapse: {
     left: t.width(),
     top: i.top,
     height: i.height
    },
    expand: {
     left: t.width() - r.panel("panel")._outerWidth()
    }
   } : "west" == a && o.expandWest ? {
    collapse: {
     left: -r.panel("panel")._outerWidth(),
     top: i.top,
     height: i.height
    },
    expand: {
     left: 0
    }
   } : "north" == a && o.expandNorth ? {
    collapse: {
     top: -r.panel("panel")._outerHeight(),
     width: t.width()
    },
    expand: {
     top: 0
    }
   } : "south" == a && o.expandSouth ? {
    collapse: {
     top: t.height(),
     width: t.width()
    },
    expand: {
     top: t.height() - r.panel("panel")._outerHeight()
    }
   } : void 0
  }
  var o = e.data(n, "layout").panels,
   r = o[a],
   d = r.panel("options");
  if (0 != d.onBeforeExpand.call(r)) {
   var s = "expand" + a.substring(0, 1).toUpperCase() + a.substring(1);
   if (o[s]) {
    o[s].panel("close"), r.panel("panel").stop(!0, !0), r.panel("expand", !1).panel("open");
    var l = i();
    r.panel("resize", l.collapse), r.panel("panel").animate(l.expand, function() {
     t(n)
    })
   }
  }
 }

 function d(e) {
  return e && e.length ? e.panel("panel").is(":visible") : !1
 }

 function s(t) {
  var n = e.data(t, "layout").panels;
  n.east.length && n.east.panel("options").collapsed && o(t, "east", 0), n.west.length && n.west.panel("options").collapsed && o(t, "west", 0), n.north.length && n.north.panel("options").collapsed && o(t, "north", 0), n.south.length && n.south.panel("options").collapsed && o(t, "south", 0)
 }
 var l = !1;
 e.fn.layout = function(a, i) {
  return "string" == typeof a ? e.fn.layout.methods[a](this, i) : (a = a || {}, this.each(function() {
   var i = e.data(this, "layout");
   if (i) e.extend(i.options, a);
   else {
    var o = e.extend({}, e.fn.layout.defaults, e.fn.layout.parseOptions(this), a);
    e.data(this, "layout", {
     options: o,
     panels: {
      center: e(),
      north: e(),
      south: e(),
      east: e(),
      west: e()
     }
    }), n(this)
   }
   t(this), s(this)
  }))
 }, e.fn.layout.methods = {
  options: function(t) {
   return e.data(t[0], "layout").options
  },
  resize: function(e, n) {
   return e.each(function() {
    t(this, n)
   })
  },
  panel: function(t, n) {
   return e.data(t[0], "layout").panels[n]
  },
  collapse: function(e, t) {
   return e.each(function() {
    o(this, t)
   })
  },
  expand: function(e, t) {
   return e.each(function() {
    r(this, t)
   })
  },
  add: function(n, i) {
   return n.each(function() {
    a(this, i), t(this), e(this).layout("panel", i.region).panel("options").collapsed && o(this, i.region, 0)
   })
  },
  remove: function(e, n) {
   return e.each(function() {
    i(this, n), t(this)
   })
  }
 }, e.fn.layout.parseOptions = function(t) {
  return e.extend({}, e.parser.parseOptions(t, [{
   fit: "boolean"
  }]))
 }, e.fn.layout.defaults = {
  fit: !1
 }, e.fn.layout.parsePanelOptions = function(t) {
  e(t);
  return e.extend({}, e.fn.panel.parseOptions(t), e.parser.parseOptions(t, ["region", {
   split: "boolean",
   collpasedSize: "number",
   minWidth: "number",
   minHeight: "number",
   maxWidth: "number",
   maxHeight: "number"
  }]))
 }, e.fn.layout.paneldefaults = e.extend({}, e.fn.panel.defaults, {
  region: null,
  split: !1,
  collapsedSize: 28,
  minWidth: 10,
  minHeight: 10,
  maxWidth: 1e4,
  maxHeight: 1e4
 })
}(jQuery),
function($) {
 function init(e) {
  function t(n) {
   var a = [];
   return n.addClass("menu"), a.push(n), n.hasClass("menu-content") || n.children("div").each(function() {
    var n = $(this).children("div");
    if (n.length) {
     n.insertAfter(e), this.submenu = n;
     var i = t(n);
     a = a.concat(i)
    }
   }), a
  }

  function n(t) {
   var n = $.parser.parseOptions(t[0], ["width", "height"]);
   t[0].originalHeight = n.height || 0, t.hasClass("menu-content") ? t[0].originalWidth = n.width || t._outerWidth() : (t[0].originalWidth = n.width || 0, t.children("div").each(function() {
    var t = $(this),
     n = $.extend({}, $.parser.parseOptions(this, ["name", "iconCls", "href", {
      separator: "boolean"
     }]), {
      disabled: t.attr("disabled") ? !0 : void 0
     });
    if (n.separator && t.addClass("menu-sep"), !t.hasClass("menu-sep")) {
     t[0].itemName = n.name || "", t[0].itemHref = n.href || "";
     var a = t.addClass("menu-item").html();
     t.empty().append($('<div class="menu-text"></div>').html(a)), n.iconCls && $('<div class="menu-icon"></div>').addClass(n.iconCls).appendTo(t), n.disabled && _3cb(e, t[0], !0), t[0].submenu && $('<div class="menu-rightarrow"></div>').appendTo(t), _3cc(e, t)
    }
   }), $('<div class="menu-line"></div>').prependTo(t)), _3cd(e, t), t.hide(), _3ce(e, t)
  }
  $(e).appendTo("body"), $(e).addClass("menu-top"), $(document).unbind(".menu").bind("mousedown.menu", function(e) {
   var t = $(e.target).closest("div.menu,div.combo-p");
   t.length || $("body>div.menu-top:visible").jemenu("hide")
  });
  for (var a = t($(e)), i = 0; i < a.length; i++) n(a[i])
 }

 function _3cd(e, t) {
  var n = $.data(e, "menu").options,
   a = t.attr("style") || "";
  t.css({
   display: "block",
   left: -1e4,
   height: "auto",
   overflow: "hidden"
  });
  var i = t[0],
   o = i.originalWidth || 0;
  o || (o = 0, t.find("div.menu-text").each(function() {
   o < $(this)._outerWidth() && (o = $(this)._outerWidth()), $(this).closest("div.menu-item")._outerHeight($(this)._outerHeight() + 2)
  }), o += 40), o = Math.max(o, n.minWidth);
  var r = i.originalHeight || 0;
  if (!r)
   if (r = t.outerHeight(), t.hasClass("menu-top") && n.alignTo) {
    var d = $(n.alignTo),
     s = d.offset().top - $(document).scrollTop(),
     l = $(window)._outerHeight() + $(document).scrollTop() - d.offset().top - d._outerHeight();
    r = Math.min(r, Math.max(s, l))
   } else r > $(window)._outerHeight() ? (r = $(window).height(), a += ";overflow:auto") : a += ";overflow:hidden";
  var c = Math.max(i.originalHeight, t.outerHeight()) - 2;
  t._outerWidth(o)._outerHeight(r), t.children("div.menu-line")._outerHeight(c), a += ";width:" + i.style.width + ";height:" + i.style.height, t.attr("style", a)
 }

 function _3ce(e, t) {
  var n = $.data(e, "menu");
  t.unbind(".menu").bind("mouseenter.menu", function() {
   n.timer && (clearTimeout(n.timer), n.timer = null)
  }).bind("mouseleave.menu", function() {
   n.options.hideOnUnhover && (n.timer = setTimeout(function() {
    _3d6(e)
   }, n.options.duration))
  })
 }

 function _3cc(e, t) {
  t.hasClass("menu-item") && (t.unbind(".menu"), t.bind("click.menu", function() {
   if (!$(this).hasClass("menu-item-disabled")) {
    if (!this.submenu) {
     _3d6(e);
     var t = this.itemHref;
     t && (location.href = t)
    }
    var n = $(e).jemenu("getItem", this);
    $.data(e, "menu").options.onClick.call(e, n)
   }
  }).bind("mouseenter.menu", function(n) {
   if (t.siblings().each(function() {
     this.submenu && _3da(this.submenu), $(this).removeClass("menu-active")
    }), t.addClass("menu-active"), $(this).hasClass("menu-item-disabled")) return void t.addClass("menu-active-disabled");
   var a = t[0].submenu;
   a && $(e).jemenu("show", {
    menu: a,
    parent: t
   })
  }).bind("mouseleave.menu", function(e) {
   t.removeClass("menu-active menu-active-disabled");
   var n = t[0].submenu;
   n ? e.pageX >= parseInt(n.css("left")) ? t.addClass("menu-active") : _3da(n) : t.removeClass("menu-active")
  }))
 }

 function _3d6(e) {
  var t = $.data(e, "menu");
  return t && $(e).is(":visible") && (_3da($(e)), t.options.onHide.call(e)), !1
 }

 function _3dd(e, t) {
  function n(e, t) {
   return e + o.outerHeight() > $(window)._outerHeight() + $(document).scrollTop() && (e = t ? $(t).offset().top - o._outerHeight() : $(window)._outerHeight() + $(document).scrollTop() - o.outerHeight()), 0 > e && (e = 0), e
  }
  var a, i;
  t = t || {};
  var o = $(t.menu || e);
  if ($(e).jemenu("resize", o[0]), o.hasClass("menu-top")) {
   var r = $.data(e, "menu").options;
   if ($.extend(r, t), a = r.left, i = r.top, r.alignTo) {
    var d = $(r.alignTo);
    a = d.offset().left, i = d.offset().top + d._outerHeight(), "right" == r.align && (a += d.outerWidth() - o.outerWidth())
   }
   a + o.outerWidth() > $(window)._outerWidth() + $(document)._scrollLeft() && (a = $(window)._outerWidth() + $(document).scrollLeft() - o.outerWidth() - 5), 0 > a && (a = 0), i = n(i, r.alignTo)
  } else {
   var s = t.parent;
   a = s.offset().left + s.outerWidth() - 2, a + o.outerWidth() + 5 > $(window)._outerWidth() + $(document).scrollLeft() && (a = s.offset().left - o.outerWidth() + 2), i = n(s.offset().top - 3)
  }
  o.css({
   left: a,
   top: i
  }), o.show(0, function() {
   o[0].shadow || (o[0].shadow = $('<div class="menu-shadow"></div>').insertAfter(o)), o[0].shadow.css({
    display: "block",
    zIndex: $.fn.jemenu.defaults.zIndex++,
    left: o.css("left"),
    top: o.css("top"),
    width: o.outerWidth(),
    height: o.outerHeight()
   }), o.css("z-index", $.fn.jemenu.defaults.zIndex++), o.hasClass("menu-top") && $.data(o[0], "menu").options.onShow.call(o[0])
  })
 }

 function _3da(e) {
  function t(e) {
   e.stop(!0, !0), e[0].shadow && e[0].shadow.hide(), e.hide()
  }
  e && (t(e), e.find("div.menu-item").each(function() {
   this.submenu && _3da(this.submenu), $(this).removeClass("menu-active")
  }))
 }

 function _3e4(e, t) {
  function n(o) {
   o.children("div.menu-item").each(function() {
    var o = $(e).jemenu("getItem", this),
     r = i.empty().html(o.text).text();
    t == $.trim(r) ? a = o : this.submenu && !a && n(this.submenu)
   })
  }
  var a = null,
   i = $("<div></div>");
  return n($(e)), i.remove(), a
 }

 function _3cb(e, t, n) {
  var a = $(t);
  a.hasClass("menu-item") && (n ? (a.addClass("menu-item-disabled"), t.onclick && (t.onclick1 = t.onclick, t.onclick = null)) : (a.removeClass("menu-item-disabled"), t.onclick1 && (t.onclick = t.onclick1, t.onclick1 = null)))
 }

 function _3ea(_3eb, _3ec) {
  var menu = $(_3eb);
  if (_3ec.parent) {
   if (!_3ec.parent.submenu) {
    var _3ed = $('<div class="menu"><div class="menu-line"></div></div>').appendTo("body");
    _3ed.hide(), _3ec.parent.submenu = _3ed, $('<div class="menu-rightarrow"></div>').appendTo(_3ec.parent)
   }
   menu = _3ec.parent.submenu
  }
  if (_3ec.separator) var item = $('<div class="menu-sep"></div>').appendTo(menu);
  else {
   var item = $('<div class="menu-item"></div>').appendTo(menu);
   $('<div class="menu-text"></div>').html(_3ec.text).appendTo(item)
  }
  _3ec.iconCls && $('<div class="menu-icon"></div>').addClass(_3ec.iconCls).appendTo(item), _3ec.id && item.attr("id", _3ec.id), _3ec.name && (item[0].itemName = _3ec.name), _3ec.href && (item[0].itemHref = _3ec.href), _3ec.onclick && ("string" == typeof _3ec.onclick ? item.attr("onclick", _3ec.onclick) : item[0].onclick = eval(_3ec.onclick)), _3ec.handler && (item[0].onclick = eval(_3ec.handler)), _3ec.disabled && _3cb(_3eb, item[0], !0), _3cc(_3eb, item), _3ce(_3eb, menu), _3cd(_3eb, menu)
 }

 function _3ee(e, t) {
  function n(e) {
   if (e.submenu) {
    e.submenu.children("div.menu-item").each(function() {
     n(this)
    });
    var t = e.submenu[0].shadow;
    t && t.remove(), e.submenu.remove()
   }
   $(e).remove()
  }
  var a = $(t).parent();
  n(t), _3cd(e, a)
 }

 function _3f3(e, t, n) {
  var a = $(t).parent();
  n ? $(t).show() : $(t).hide(), _3cd(e, a)
 }

 function _3f7(e) {
  $(e).children("div.menu-item").each(function() {
   _3ee(e, this)
  }), e.shadow && e.shadow.remove(), $(e).remove()
 }
 $.fn.jemenu = function(e, t) {
  return "string" == typeof e ? $.fn.jemenu.methods[e](this, t) : (e = e || {}, this.each(function() {
   var t = $.data(this, "menu");
   t ? $.extend(t.options, e) : (t = $.data(this, "menu", {
    options: $.extend({}, $.fn.jemenu.defaults, $.fn.jemenu.parseOptions(this), e)
   }), init(this)), $(this).css({
    left: t.options.left,
    top: t.options.top
   })
  }))
 }, $.fn.jemenu.methods = {
  options: function(e) {
   return $.data(e[0], "menu").options
  },
  show: function(e, t) {
   return e.each(function() {
    _3dd(this, t)
   })
  },
  hide: function(e) {
   return e.each(function() {
    _3d6(this)
   })
  },
  destroy: function(e) {
   return e.each(function() {
    _3f7(this)
   })
  },
  setText: function(e, t) {
   return e.each(function() {
    $(t.target).children("div.menu-text").html(t.text)
   })
  },
  setIcon: function(e, t) {
   return e.each(function() {
    $(t.target).children("div.menu-icon").remove(), t.iconCls && $('<div class="menu-icon"></div>').addClass(t.iconCls).appendTo(t.target);
   })
  },
  getItem: function(e, t) {
   var n = $(t),
    a = {
     target: t,
     id: n.attr("id"),
     text: $.trim(n.children("div.menu-text").html()),
     disabled: n.hasClass("menu-item-disabled"),
     name: t.itemName,
     href: t.itemHref,
     onclick: t.onclick
    },
    i = n.children("div.menu-icon");
   if (i.length) {
    for (var o = [], r = i.attr("class").split(" "), d = 0; d < r.length; d++) "menu-icon" != r[d] && o.push(r[d]);
    a.iconCls = o.join(" ")
   }
   return a
  },
  findItem: function(e, t) {
   return _3e4(e[0], t)
  },
  appendItem: function(e, t) {
   return e.each(function() {
    _3ea(this, t)
   })
  },
  removeItem: function(e, t) {
   return e.each(function() {
    _3ee(this, t)
   })
  },
  enableItem: function(e, t) {
   return e.each(function() {
    _3cb(this, t, !1)
   })
  },
  disableItem: function(e, t) {
   return e.each(function() {
    _3cb(this, t, !0)
   })
  },
  showItem: function(e, t) {
   return e.each(function() {
    _3f3(this, t, !0)
   })
  },
  hideItem: function(e, t) {
   return e.each(function() {
    _3f3(this, t, !1)
   })
  },
  resize: function(e, t) {
   return e.each(function() {
    _3cd(this, $(t))
   })
  }
 }, $.fn.jemenu.parseOptions = function(e) {
  return $.extend({}, $.parser.parseOptions(e, [{
   minWidth: "number",
   duration: "number",
   hideOnUnhover: "boolean"
  }]))
 }, $.fn.jemenu.defaults = {
  zIndex: 11e4,
  left: 0,
  top: 0,
  alignTo: null,
  align: "left",
  minWidth: 120,
  duration: 100,
  hideOnUnhover: !0,
  onShow: function() {},
  onHide: function() {},
  onClick: function(e) {}
 }
}(jQuery),
function(e) {
 function t(t) {
  var n = e.data(t, "menubutton").options,
   a = e(t);
  a.linkbutton(n), a.removeClass(n.cls.btn1 + " " + n.cls.btn2).addClass("m-btn"), a.removeClass("m-btn-small m-btn-medium m-btn-large").addClass("m-btn-" + n.size);
  var i = a.find(".l-btn-left");
  if (e("<span></span>").addClass(n.cls.arrow).appendTo(i), e("<span></span>").addClass("m-btn-line").appendTo(i), n.menu) {
   e(n.menu).jemenu({
    duration: n.duration
   });
   var o = e(n.menu).jemenu("options"),
    r = o.onShow,
    d = o.onHide;
   e.extend(o, {
    onShow: function() {
     var t = e(this).jemenu("options"),
      n = e(t.alignTo),
      a = n.menubutton("options");
     n.addClass(1 == a.plain ? a.cls.btn2 : a.cls.btn1), r.call(this)
    },
    onHide: function() {
     var t = e(this).jemenu("options"),
      n = e(t.alignTo),
      a = n.menubutton("options");
     n.removeClass(1 == a.plain ? a.cls.btn2 : a.cls.btn1), d.call(this)
    }
   })
  }
 }

 function n(t) {
  function n() {
   return e(t).linkbutton("options").disabled
  }
  var i = e.data(t, "menubutton").options,
   o = e(t),
   r = o.find("." + i.cls.trigger);
  r.length || (r = o), r.unbind(".menubutton");
  var d = null;
  r.bind("click.menubutton", function() {
   return n() ? void 0 : (a(t), !1)
  }).bind("mouseenter.menubutton", function() {
   return n() ? void 0 : (d = setTimeout(function() {
    a(t)
   }, i.duration), !1)
  }).bind("mouseleave.menubutton", function() {
   d && clearTimeout(d), e(i.menu).triggerHandler("mouseleave")
  })
 }

 function a(t) {
  var n = e(t).menubutton("options");
  if (!n.disabled && n.menu) {
   e("body>div.menu-top").jemenu("hide");
   var a = e(t),
    i = e(n.menu);
   i.length && (i.jemenu("options").alignTo = a, i.jemenu("show", {
    alignTo: a,
    align: n.menuAlign
   })), a.blur()
  }
 }
 e.fn.jemenubutton = function(a, i) {
  if ("string" == typeof a) {
   var o = e.fn.jemenubutton.methods[a];
   return o ? o(this, i) : this.linkbutton(a, i)
  }
  return a = a || {}, this.each(function() {
   var i = e.data(this, "menubutton");
   i ? e.extend(i.options, a) : (e.data(this, "menubutton", {
    options: e.extend({}, e.fn.jemenubutton.defaults, e.fn.jemenubutton.parseOptions(this), a)
   }), e(this).removeAttr("disabled")), t(this), n(this)
  })
 }, e.fn.jemenubutton.methods = {
  options: function(t) {
   var n = t.linkbutton("options");
   return e.extend(e.data(t[0], "menubutton").options, {
    toggle: n.toggle,
    selected: n.selected,
    disabled: n.disabled
   })
  },
  destroy: function(t) {
   return t.each(function() {
    var t = e(this).menubutton("options");
    t.menu && e(t.menu).jemenu("destroy"), e(this).remove()
   })
  }
 }, e.fn.jemenubutton.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.fn.linkbutton.parseOptions(t), e.parser.parseOptions(t, ["menu", {
   plain: "boolean",
   duration: "number"
  }]))
 }, e.fn.jemenubutton.defaults = e.extend({}, e.fn.linkbutton.defaults, {
  plain: !0,
  menu: null,
  menuAlign: "left",
  duration: 100,
  cls: {
   btn1: "m-btn-active",
   btn2: "m-btn-plain-active",
   arrow: "m-btn-downarrow",
   trigger: "m-btn"
  }
 })
}(jQuery),
function(e) {
 function t(t) {
  var n = e.data(t, "splitbutton").options;
  e(t).menubutton(n), e(t).addClass("s-btn")
 }
 e.fn.splitbutton = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.splitbutton.methods[n];
   return i ? i(this, a) : this.menubutton(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "splitbutton");
   a ? e.extend(a.options, n) : (e.data(this, "splitbutton", {
    options: e.extend({}, e.fn.splitbutton.defaults, e.fn.splitbutton.parseOptions(this), n)
   }), e(this).removeAttr("disabled")), t(this)
  })
 }, e.fn.splitbutton.methods = {
  options: function(t) {
   var n = t.menubutton("options"),
    a = e.data(t[0], "splitbutton").options;
   return e.extend(a, {
    disabled: n.disabled,
    toggle: n.toggle,
    selected: n.selected
   }), a
  }
 }, e.fn.splitbutton.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.fn.linkbutton.parseOptions(t), e.parser.parseOptions(t, ["menu", {
   plain: "boolean",
   duration: "number"
  }]))
 }, e.fn.splitbutton.defaults = e.extend({}, e.fn.linkbutton.defaults, {
  plain: !0,
  menu: null,
  duration: 100,
  cls: {
   btn1: "m-btn-active s-btn-active",
   btn2: "m-btn-plain-active s-btn-plain-active",
   arrow: "m-btn-downarrow",
   trigger: "m-btn-line"
  }
 })
}(jQuery),
function($) {
 function init(e) {
  $(e).addClass("validatebox-text")
 }

 function _423(e) {
  var t = $.data(e, "validatebox");
  t.validating = !1, t.timer && clearTimeout(t.timer), $(e).tooltipeu("destroy"), $(e).unbind(), $(e).remove()
 }

 function _426(e) {
  var t = $.data(e, "validatebox").options,
   n = $(e);
  if (n.unbind(".validatebox"), !t.novalidate && !n.is(":disabled"))
   for (var a in t.events) $(e).bind(a + ".validatebox", {
    target: e
   }, t.events[a])
 }

 function _429(e) {
  var t = e.data.target,
   n = $.data(t, "validatebox"),
   a = $(t);
  $(t).attr("readonly") || (n.validating = !0, n.value = void 0, function() {
   n.validating && (n.value != a.val() ? (n.value = a.val(), n.timer && clearTimeout(n.timer), n.timer = setTimeout(function() {
    $(t).validatebox("validate")
   }, n.options.delay)) : _42c(t), setTimeout(arguments.callee, 200))
  }())
 }

 function _42d(e) {
  var t = e.data.target,
   n = $.data(t, "validatebox");
  n.timer && (clearTimeout(n.timer), n.timer = void 0), n.validating = !1, _430(t)
 }

 function _431(e) {
  var t = e.data.target;
  $(t).hasClass("validatebox-invalid") && _433(t)
 }

 function _434(e) {
  var t = e.data.target,
   n = $.data(t, "validatebox");
  n.validating || _430(t)
 }

 function _433(e) {
  var t = $.data(e, "validatebox"),
   n = t.options;
  $(e).tooltipeu($.extend({}, n.tipOptions, {
   content: t.message,
   position: n.tipPosition,
   deltaX: n.deltaX
  })).tooltipeu("show"), t.tip = !0
 }

 function _42c(e) {
  var t = $.data(e, "validatebox");
  t && t.tip && $(e).tooltipeu("reposition")
 }

 function _430(e) {
  var t = $.data(e, "validatebox");
  t.tip = !1, $(e).tooltipeu("hide")
 }

 function _43d(_43e) {
  function _442(e) {
   _43f.message = e
  }

  function _443(_444, _445) {
   var _446 = box.val(),
    _447 = /([a-zA-Z_]+)(.*)/.exec(_444),
    rule = opts.rules[_447[1]];
   if (rule && _446) {
    var _448 = _445 || opts.validParams || eval(_447[2]);
    if (!rule.validator.call(_43e, _446, _448)) {
     box.addClass("validatebox-invalid");
     var _449 = rule.message;
     if (_448)
      for (var i = 0; i < _448.length; i++) _449 = _449.replace(new RegExp("\\{" + i + "\\}", "g"), _448[i]);
     return _442(opts.invalidMessage || _449), _43f.validating && _433(_43e), !1
    }
   }
   return !0
  }

  function _441() {
   if (box.removeClass("validatebox-invalid"), _430(_43e), opts.novalidate || box.is(":disabled")) return !0;
   if (opts.required && "" == box.val()) return box.addClass("validatebox-invalid"), _442(opts.missingMessage), _43f.validating && _433(_43e), !1;
   if (opts.validType)
    if ($.isArray(opts.validType)) {
     for (var e = 0; e < opts.validType.length; e++)
      if (!_443(opts.validType[e])) return !1
    } else if ("string" == typeof opts.validType) {
    if (!_443(opts.validType)) return !1
   } else
    for (var t in opts.validType) {
     var n = opts.validType[t];
     if (!_443(t, n)) return !1
    }
   return !0
  }
  var _43f = $.data(_43e, "validatebox"),
   opts = _43f.options,
   box = $(_43e);
  opts.onBeforeValidate.call(_43e);
  var _440 = _441();
  return opts.onValidate.call(_43e, _440), _440
 }

 function _44c(e, t) {
  var n = $.data(e, "validatebox").options;
  void 0 != t && (n.novalidate = t), n.novalidate && ($(e).removeClass("validatebox-invalid"), _430(e)), _43d(e), _426(e)
 }
 $.fn.validatebox = function(e, t) {
  return "string" == typeof e ? $.fn.validatebox.methods[e](this, t) : (e = e || {}, this.each(function() {
   var t = $.data(this, "validatebox");
   t ? $.extend(t.options, e) : (init(this), $.data(this, "validatebox", {
    options: $.extend({}, $.fn.validatebox.defaults, $.fn.validatebox.parseOptions(this), e)
   })), _44c(this), _43d(this)
  }))
 }, $.fn.validatebox.methods = {
  options: function(e) {
   return $.data(e[0], "validatebox").options
  },
  destroy: function(e) {
   return e.each(function() {
    _423(this)
   })
  },
  validate: function(e) {
   return e.each(function() {
    _43d(this)
   })
  },
  isValid: function(e) {
   return _43d(e[0])
  },
  enableValidation: function(e) {
   return e.each(function() {
    _44c(this, !1)
   })
  },
  disableValidation: function(e) {
   return e.each(function() {
    _44c(this, !0)
   })
  }
 }, $.fn.validatebox.parseOptions = function(e) {
  var t = $(e);
  return $.extend({}, $.parser.parseOptions(e, ["validType", "missingMessage", "invalidMessage", "tipPosition", {
   delay: "number",
   deltaX: "number"
  }]), {
   required: t.attr("required") ? !0 : void 0,
   novalidate: void 0 != t.attr("novalidate") ? !0 : void 0
  })
 }, $.fn.validatebox.defaults = {
  required: !1,
  validType: null,
  validParams: null,
  delay: 200,
  missingMessage: "This field is required.",
  invalidMessage: null,
  tipPosition: "right",
  deltaX: 0,
  novalidate: !1,
  events: {
   focus: _429,
   blur: _42d,
   mouseenter: _431,
   mouseleave: _434,
   click: function(e) {
    var t = $(e.data.target);
    t.is(":focus") || t.trigger("focus")
   }
  },
  tipOptions: {
   showEvent: "none",
   hideEvent: "none",
   showDelay: 0,
   hideDelay: 0,
   zIndex: "",
   onShow: function() {
    $(this).tooltipeu("tip").css({
     color: "#000",
     borderColor: "#CC9933",
     backgroundColor: "#FFFFCC"
    })
   },
   onHide: function() {
    $(this).tooltipeu("destroy")
   }
  },
  rules: {
   email: {
    validator: function(e) {
     return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(e)
    },
    message: "Please enter a valid email address."
   },
   url: {
    validator: function(e) {
     return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(e)
    },
    message: "Please enter a valid URL."
   },
   length: {
    validator: function(e, t) {
     var n = $.trim(e).length;
     return n >= t[0] && n <= t[1]
    },
    message: "Please enter a value between {0} and {1}."
   },
   remote: {
    validator: function(e, t) {
     var n = {};
     n[t[1]] = e;
     var a = $.ajax({
      url: t[0],
      dataType: "json",
      data: n,
      async: !1,
      cache: !1,
      type: "post"
     }).responseText;
     return "true" == a
    },
    message: "Please fix this field."
   }
  },
  onBeforeValidate: function() {},
  onValidate: function(e) {}
 }
}(jQuery),
function(e) {
 function t(t) {
  e(t).addClass("textbox-f").hide();
  var n = e('<span class="textbox"><input class="textbox-text" autocomplete="off"><input type="hidden" class="textbox-value"></span>').insertAfter(t),
   a = e(t).attr("name");
  return a && (n.find("input.textbox-value").attr("name", a), e(t).removeAttr("name").attr("textboxName", a)), n
 }

 function n(t) {
  var n = e.data(t, "textbox"),
   a = n.options,
   i = n.textbox;
  i.find(".textbox-text").remove(), a.multiline ? e('<textarea class="textbox-text" autocomplete="off"></textarea>').prependTo(i) : e('<input type="' + a.type + '" class="textbox-text" autocomplete="off">').prependTo(i), i.find(".textbox-addon").remove();
  var o = a.icons ? e.extend(!0, [], a.icons) : [];
  if (a.iconCls && o.push({
    iconCls: a.iconCls,
    disabled: !0
   }), o.length) {
   var r = e('<span class="textbox-addon"></span>').prependTo(i);
   r.addClass("textbox-addon-" + a.iconAlign);
   for (var l = 0; l < o.length; l++) r.append('<a href="javascript:void(0)" class="textbox-icon ' + o[l].iconCls + '" icon-index="' + l + '" tabindex="-1"></a>')
  }
  if (i.find(".textbox-button").remove(), a.buttonText || a.buttonIcon) {
   var c = e('<a href="javascript:void(0)" class="textbox-button"></a>').prependTo(i);
   c.addClass("textbox-button-" + a.buttonAlign).linkbutton({
    text: a.buttonText,
    iconCls: a.buttonIcon
   })
  }
  d(t, a.disabled), s(t, a.readonly)
 }

 function a(t) {
  var n = e.data(t, "textbox").textbox;
  n.find(".textbox-text").validatebox("destroy"), n.remove(), e(t).remove()
 }

 function i(t, n) {
  function a(e) {
   return (o.iconAlign == e ? u._outerWidth() : 0) + (o.buttonAlign == e ? c._outerWidth() : 0)
  }
  var i = e.data(t, "textbox"),
   o = i.options,
   r = i.textbox,
   d = r.parent();
  if (n && (o.width = n), isNaN(parseInt(o.width))) {
   var s = e(t).clone();
   s.css("visibility", "hidden"), s.insertAfter(t), o.width = s.outerWidth(), s.remove()
  }
  r.appendTo("body");
  var l = r.find(".textbox-text"),
   c = r.find(".textbox-button"),
   u = r.find(".textbox-addon"),
   h = u.find(".textbox-icon");
  if (r._size(o, d), c.linkbutton("resize", {
    height: r.height()
   }), c.css({
    left: "left" == o.buttonAlign ? 0 : "",
    right: "right" == o.buttonAlign ? 0 : ""
   }), u.css({
    left: "left" == o.iconAlign ? "left" == o.buttonAlign ? c._outerWidth() : 0 : "",
    right: "right" == o.iconAlign ? "right" == o.buttonAlign ? c._outerWidth() : 0 : ""
   }), h.css({
    width: o.iconWidth + "px",
    height: r.height() + "px"
   }), l.css({
    paddingLeft: t.style.paddingLeft || "",
    paddingRight: t.style.paddingRight || "",
    marginLeft: a("left"),
    marginRight: a("right")
   }), o.multiline) l.css({
   paddingTop: t.style.paddingTop || "",
   paddingBottom: t.style.paddingBottom || ""
  }), l._outerHeight(r.height());
  else {
   var f = Math.floor((r.height() - l.height()) / 2);
   l.css({
    paddingTop: f + "px",
    paddingBottom: f + "px"
   })
  }
  l._outerWidth(r.width() - h.length * o.iconWidth - c._outerWidth()), r.insertAfter(t), o.onResize.call(t, o.width, o.height)
 }

 function o(t) {
  var n = e(t).textbox("options"),
   a = e(t).textbox("textbox");
  a.validatebox(e.extend({}, n, {
   deltaX: e(t).textbox("getTipX"),
   onBeforeValidate: function() {
    var t = e(this);
    t.is(":focus") || (n.oldInputValue = t.val(), t.val(n.value))
   },
   onValidate: function(t) {
    var a = e(this);
    void 0 != n.oldInputValue && (a.val(n.oldInputValue), n.oldInputValue = void 0);
    var i = a.parent();
    t ? i.removeClass("textbox-invalid") : i.addClass("textbox-invalid")
   }
  }))
 }

 function r(t) {
  var n = e.data(t, "textbox"),
   a = n.options,
   o = n.textbox,
   r = o.find(".textbox-text");
  if (r.attr("placeholder", a.prompt), r.unbind(".textbox"), !a.disabled && !a.readonly) {
   r.bind("blur.textbox", function(t) {
    o.hasClass("textbox-focused") && (a.value = e(this).val(), "" == a.value ? e(this).val(a.prompt).addClass("textbox-prompt") : e(this).removeClass("textbox-prompt"), o.removeClass("textbox-focused"))
   }).bind("focus.textbox", function(t) {
    o.hasClass("textbox-focused") || (e(this).val() != a.value && e(this).val(a.value), e(this).removeClass("textbox-prompt"), o.addClass("textbox-focused"))
   });
   for (var d in a.inputEvents) r.bind(d + ".textbox", {
    target: t
   }, a.inputEvents[d])
  }
  var s = o.find(".textbox-addon");
  s.unbind().bind("click", {
   target: t
  }, function(n) {
   var i = e(n.target).closest("a.textbox-icon:not(.textbox-icon-disabled)");
   if (i.length) {
    var o = parseInt(i.attr("icon-index")),
     r = a.icons[o];
    r && r.handler && (r.handler.call(i[0], n), a.onClickIcon.call(t, o))
   }
  }), s.find(".textbox-icon").each(function(t) {
   var n = a.icons[t],
    i = e(this);
   !n || n.disabled || a.disabled || a.readonly ? i.addClass("textbox-icon-disabled") : i.removeClass("textbox-icon-disabled")
  });
  var l = o.find(".textbox-button");
  l.unbind(".textbox").bind("click.textbox", function() {
   l.linkbutton("options").disabled || a.onClickButton.call(t)
  }), l.linkbutton(a.disabled || a.readonly ? "disable" : "enable"), o.unbind(".textbox").bind("_resize.textbox", function(n, a) {
   return (e(this).hasClass("easyui-fluid") || a) && i(t), !1
  })
 }

 function d(t, n) {
  var a = e.data(t, "textbox"),
   i = a.options,
   o = a.textbox;
  n ? (i.disabled = !0, e(t).attr("disabled", "disabled"), o.find(".textbox-text,.textbox-value").attr("disabled", "disabled")) : (i.disabled = !1, e(t).removeAttr("disabled"), o.find(".textbox-text,.textbox-value").removeAttr("disabled"))
 }

 function s(t, n) {
  var a = e.data(t, "textbox"),
   i = a.options;
  i.readonly = void 0 == n ? !0 : n;
  var o = a.textbox.find(".textbox-text");
  o.removeAttr("readonly").removeClass("textbox-text-readonly"), (i.readonly || !i.editable) && o.attr("readonly", "readonly").addClass("textbox-text-readonly")
 }
 e.fn.textbox = function(a, d) {
  if ("string" == typeof a) {
   var s = e.fn.textbox.methods[a];
   return s ? s(this, d) : this.each(function() {
    var t = e(this).textbox("textbox");
    t.validatebox(a, d)
   })
  }
  return a = a || {}, this.each(function() {
   var d = e.data(this, "textbox");
   d ? (e.extend(d.options, a), void 0 != a.value && (d.options.originalValue = a.value)) : (d = e.data(this, "textbox", {
    options: e.extend({}, e.fn.textbox.defaults, e.fn.textbox.parseOptions(this), a),
    textbox: t(this)
   }), d.options.originalValue = d.options.value), n(this), r(this), i(this), o(this), e(this).textbox("initValue", d.options.value)
  })
 }, e.fn.textbox.methods = {
  options: function(t) {
   return e.data(t[0], "textbox").options
  },
  cloneFrom: function(t, n) {
   return t.each(function() {
    var t = e(this);
    if (!t.data("textbox")) {
     e(n).data("textbox") || e(n).textbox();
     var a = t.attr("name") || "";
     t.addClass("textbox-f").hide(), t.removeAttr("name").attr("textboxName", a);
     var i = e(n).next().clone().insertAfter(t);
     i.find("input.textbox-value").attr("name", a), e.data(this, "textbox", {
      options: e.extend(!0, {}, e(n).textbox("options")),
      textbox: i
     });
     var d = e(n).textbox("button");
     d.length && t.textbox("button").linkbutton(e.extend(!0, {}, d.linkbutton("options"))), r(this), o(this)
    }
   })
  },
  textbox: function(t) {
   return e.data(t[0], "textbox").textbox.find(".textbox-text")
  },
  button: function(t) {
   return e.data(t[0], "textbox").textbox.find(".textbox-button")
  },
  destroy: function(e) {
   return e.each(function() {
    a(this)
   })
  },
  resize: function(e, t) {
   return e.each(function() {
    i(this, t)
   })
  },
  disable: function(e) {
   return e.each(function() {
    d(this, !0), r(this)
   })
  },
  enable: function(e) {
   return e.each(function() {
    d(this, !1), r(this)
   })
  },
  readonly: function(e, t) {
   return e.each(function() {
    s(this, t), r(this)
   })
  },
  isValid: function(e) {
   return e.textbox("textbox").validatebox("isValid")
  },
  clear: function(t) {
   return t.each(function() {
    e(this).textbox("setValue", "")
   })
  },
  setText: function(t, n) {
   return t.each(function() {
    var t = e(this).textbox("options"),
     a = e(this).textbox("textbox");
    e(this).textbox("getText") != n && (t.value = n, a.val(n)), a.is(":focus") || (n ? a.removeClass("textbox-prompt") : a.val(t.prompt).addClass("textbox-prompt")), e(this).textbox("validate")
   })
  },
  initValue: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "textbox");
    t.options.value = "", e(this).textbox("setText", n), t.textbox.find(".textbox-value").val(n), e(this).val(n)
   })
  },
  setValue: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "textbox").options,
     a = e(this).textbox("getValue");
    e(this).textbox("initValue", n), a != n && t.onChange.call(this, n, a)
   })
  },
  getText: function(e) {
   var t = e.textbox("textbox");
   return t.is(":focus") ? t.val() : e.textbox("options").value
  },
  getValue: function(e) {
   return e.data("textbox").textbox.find(".textbox-value").val()
  },
  reset: function(t) {
   return t.each(function() {
    var t = e(this).textbox("options");
    e(this).textbox("setValue", t.originalValue)
   })
  },
  getIcon: function(e, t) {
   return e.data("textbox").textbox.find(".textbox-icon:eq(" + t + ")")
  },
  getTipX: function(e) {
   var t = e.data("textbox"),
    n = t.options,
    a = t.textbox,
    i = (a.find(".textbox-text"), a.find(".textbox-addon")._outerWidth()),
    o = a.find(".textbox-button")._outerWidth();
   return "right" == n.tipPosition ? ("right" == n.iconAlign ? i : 0) + ("right" == n.buttonAlign ? o : 0) + 1 : "left" == n.tipPosition ? ("left" == n.iconAlign ? -i : 0) + ("left" == n.buttonAlign ? -o : 0) - 1 : i / 2 * ("right" == n.iconAlign ? 1 : -1)
  }
 }, e.fn.textbox.parseOptions = function(t) {
  var n = e(t);
  return e.extend({}, e.fn.validatebox.parseOptions(t), e.parser.parseOptions(t, ["prompt", "iconCls", "iconAlign", "buttonText", "buttonIcon", "buttonAlign", {
   multiline: "boolean",
   editable: "boolean",
   iconWidth: "number"
  }]), {
   value: n.val() || void 0,
   type: n.attr("type") ? n.attr("type") : void 0,
   disabled: n.attr("disabled") ? !0 : void 0,
   readonly: n.attr("readonly") ? !0 : void 0
  })
 }, e.fn.textbox.defaults = e.extend({}, e.fn.validatebox.defaults, {
  width: "auto",
  height: 22,
  prompt: "",
  value: "",
  type: "text",
  multiline: !1,
  editable: !0,
  disabled: !1,
  readonly: !1,
  icons: [],
  iconCls: null,
  iconAlign: "right",
  iconWidth: 18,
  buttonText: "",
  buttonIcon: null,
  buttonAlign: "right",
  inputEvents: {
   blur: function(t) {
    var n = e(t.data.target),
     a = n.textbox("options");
    n.textbox("setValue", a.value)
   },
   keydown: function(t) {
    if (13 == t.keyCode) {
     var n = e(t.data.target);
     n.textbox("setValue", n.textbox("getText"))
    }
   }
  },
  onChange: function(e, t) {},
  onResize: function(e, t) {},
  onClickButton: function() {},
  onClickIcon: function(e) {}
 })
}(jQuery),
function(e) {
 function t(t) {
  var a = e.data(t, "filebox"),
   i = a.options,
   o = "filebox_file_id_" + ++n;
  e(t).addClass("filebox-f").textbox(e.extend({}, i, {
   buttonText: i.buttonText ? '<label for="' + o + '">' + i.buttonText + "</label>" : ""
  })), e(t).textbox("textbox").attr("readonly", "readonly"), a.filebox = e(t).next().addClass("filebox"), a.filebox.find(".textbox-value").remove(), i.oldValue = "";
  var r = e('<input type="file" class="textbox-value">').appendTo(a.filebox);
  r.attr("id", o).attr("name", e(t).attr("textboxName") || ""), r.change(function() {
   e(t).filebox("setText", this.value), i.onChange.call(t, this.value, i.oldValue), i.oldValue = this.value
  });
  var d = e(t).filebox("button");
  d.length && (d.linkbutton("options").disabled ? r.attr("disabled", "disabled") : r.removeAttr("disabled"))
 }
 var n = 0;
 e.fn.filebox = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.filebox.methods[n];
   return i ? i(this, a) : this.textbox(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "filebox");
   a ? e.extend(a.options, n) : e.data(this, "filebox", {
    options: e.extend({}, e.fn.filebox.defaults, e.fn.filebox.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.filebox.methods = {
  options: function(t) {
   var n = t.textbox("options");
   return e.extend(e.data(t[0], "filebox").options, {
    width: n.width,
    value: n.value,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  }
 }, e.fn.filebox.parseOptions = function(t) {
  return e.extend({}, e.fn.textbox.parseOptions(t), {})
 }, e.fn.filebox.defaults = e.extend({}, e.fn.textbox.defaults, {
  buttonIcon: null,
  buttonText: "Choose File",
  buttonAlign: "right",
  inputEvents: {}
 })
}(jQuery),
function($) {
 function _4a3(e) {
  function t() {
   if (o.menu) {
    i.menu = $(o.menu).jemenu();
    var e = i.menu.jemenu("options"),
     t = e.onClick;
    e.onClick = function(e) {
     a(e), t.call(this, e)
    }
   } else i.menu && i.menu.jemenu("destroy"), i.menu = null
  }

  function n() {
   if (i.menu) {
    var e = i.menu.children("div.menu-item:first");
    return i.menu.children("div.menu-item").each(function() {
     var t = $.extend({}, $.parser.parseOptions(this), {
      selected: $(this).attr("selected") ? !0 : void 0
     });
     return t.selected ? (e = $(this), !1) : void 0
    }), i.menu.jemenu("getItem", e[0])
   }
   return null
  }

  function a(t) {
   t && ($(e).textbox("button").menubutton({
    text: t.text,
    iconCls: t.iconCls || null,
    menu: i.menu,
    menuAlign: o.buttonAlign,
    plain: !1
   }), i.searchbox.find("input.textbox-value").attr("name", t.name || t.text), $(e).searchbox("resize"))
  }
  var i = $.data(e, "searchbox"),
   o = i.options,
   r = $.extend(!0, [], o.icons);
  r.push({
   iconCls: "searchbox-button",
   handler: function(e) {
    var t = $(e.data.target),
     n = t.searchbox("options");
    n.searcher.call(e.data.target, t.searchbox("getValue"), t.searchbox("getName"))
   }
  }), t();
  var d = n();
  $(e).addClass("searchbox-f").textbox($.extend({}, o, {
   icons: r,
   buttonText: d ? d.text : ""
  })), $(e).attr("searchboxName", $(e).attr("textboxName")), i.searchbox = $(e).next(), i.searchbox.addClass("searchbox"), a(d)
 }
 $.fn.searchbox = function(e, t) {
  if ("string" == typeof e) {
   var n = $.fn.searchbox.methods[e];
   return n ? n(this, t) : this.textbox(e, t)
  }
  return e = e || {}, this.each(function() {
   var t = $.data(this, "searchbox");
   t ? $.extend(t.options, e) : $.data(this, "searchbox", {
    options: $.extend({}, $.fn.searchbox.defaults, $.fn.searchbox.parseOptions(this), e)
   }), _4a3(this)
  })
 }, $.fn.searchbox.methods = {
  options: function(e) {
   var t = e.textbox("options");
   return $.extend($.data(e[0], "searchbox").options, {
    width: t.width,
    value: t.value,
    originalValue: t.originalValue,
    disabled: t.disabled,
    readonly: t.readonly
   })
  },
  menu: function(e) {
   return $.data(e[0], "searchbox").menu
  },
  getName: function(e) {
   return $.data(e[0], "searchbox").searchbox.find("input.textbox-value").attr("name")
  },
  selectName: function(e, t) {
   return e.each(function() {
    var e = $.data(this, "searchbox").menu;
    e && e.children("div.menu-item").each(function() {
     var n = e.jemenu("getItem", this);
     return n.name == t ? ($(this).triggerHandler("click"), !1) : void 0
    })
   })
  },
  destroy: function(e) {
   return e.each(function() {
    var e = $(this).searchbox("menu");
    e && e.jemenu("destroy"), $(this).textbox("destroy")
   })
  }
 }, $.fn.searchbox.parseOptions = function(_4b2) {
  var t = $(_4b2);
  return $.extend({}, $.fn.textbox.parseOptions(_4b2), $.parser.parseOptions(_4b2, ["menu"]), {
   searcher: t.attr("searcher") ? eval(t.attr("searcher")) : void 0
  })
 }, $.fn.searchbox.defaults = $.extend({}, $.fn.textbox.defaults, {
  inputEvents: $.extend({}, $.fn.textbox.defaults.inputEvents, {
   keydown: function(e) {
    if (13 == e.keyCode) {
     e.preventDefault();
     var t = $(e.data.target),
      n = t.searchbox("options");
     return t.searchbox("setValue", $(this).val()), n.searcher.call(e.data.target, t.searchbox("getValue"), t.searchbox("getName")), !1
    }
   }
  }),
  buttonAlign: "left",
  menu: null,
  searcher: function(e, t) {}
 })
}(jQuery),
function(e) {
 function t(t, n) {
  function a(n) {
   var a = e(t);
   r.url && a.attr("action", r.url);
   var o = a.attr("target"),
    d = a.attr("action");
   a.attr("target", s);
   var l = e();
   try {
    for (var c in n) {
     var u = e('<input type="hidden" name="' + c + '">').val(n[c]).appendTo(a);
     l = l.add(u)
    }
    i(), a[0].submit()
   } finally {
    a.attr("action", d), o ? a.attr("target", o) : a.removeAttr("target"), l.remove()
   }
  }

  function i() {
   var t = e("#" + s);
   if (t.length) try {
    var n = t.contents()[0].readyState;
    n && "uninitialized" == n.toLowerCase() && setTimeout(i, 100)
   } catch (a) {
    o()
   }
  }

  function o() {
   var t = e("#" + s);
   if (t.length) {
    t.unbind();
    var n = "";
    try {
     var a = t.contents().find("body");
     if (n = a.html(), "" == n && --c) return void setTimeout(o, 100);
     var i = a.find(">textarea");
     if (i.length) n = i.val();
     else {
      var d = a.find(">pre");
      d.length && (n = d.html())
     }
    } catch (l) {}
    r.success(n), setTimeout(function() {
     t.unbind(), t.remove()
    }, 100)
   }
  }
  var r = e.data(t, "form").options;
  e.extend(r, n || {});
  var d = e.extend({}, r.queryParams);
  if (0 != r.onSubmit.call(t, d)) {
   e(t).find(".textbox-text:focus").blur();
   var s = "easyui_frame_" + (new Date).getTime(),
    l = e("<iframe id=" + s + " name=" + s + "></iframe>").appendTo("body");
   l.attr("src", window.ActiveXObject ? "javascript:false" : "about:blank"), l.css({
    position: "absolute",
    top: -1e3,
    left: -1e3
   }), l.bind("load", o), a(d);
   var c = 10
  }
 }

 function n(t, n) {
  function a(n) {
   var a = e(t);
   for (var l in n) {
    var c = n[l],
     u = i(l, c);
    if (!u.length) {
     var h = o(l, c);
     h || (e('input[name="' + l + '"]', a).val(c), e('textarea[name="' + l + '"]', a).val(c), e('select[name="' + l + '"]', a).val(c))
    }
    r(l, c)
   }
   s.onLoadSuccess.call(t, n), d(t)
  }

  function i(n, a) {
   var i = e(t).find('input[name="' + n + '"][type=radio], input[name="' + n + '"][type=checkbox]');
   return i._propAttr("checked", !1), i.each(function() {
    var t = e(this);
    (t.val() == String(a) || e.inArray(t.val(), e.isArray(a) ? a : [a]) >= 0) && t._propAttr("checked", !0)
   }), i
  }

  function o(n, a) {
   for (var i = 0, o = ["textbox", "numberbox", "slider"], r = 0; r < o.length; r++) {
    var d = o[r],
     s = e(t).find("input[" + d + 'Name="' + n + '"]');
    s.length && (s[d]("setValue", a), i += s.length)
   }
   return i
  }

  function r(n, a) {
   var i = e(t),
    o = ["combobox", "combotree", "combogrid", "datetimebox", "datebox", "combo"],
    r = i.find('[comboName="' + n + '"]');
   if (r.length)
    for (var d = 0; d < o.length; d++) {
     var s = o[d];
     if (r.hasClass(s + "-f")) return void(r[s]("options").multiple ? r[s]("setValues", a) : r[s]("setValue", a))
    }
  }
  var s = e.data(t, "form").options;
  if ("string" == typeof n) {
   var l = {};
   if (0 == s.onBeforeLoad.call(t, l)) return;
   e.ajax({
    url: n,
    data: l,
    dataType: "json",
    success: function(e) {
     a(e)
    },
    error: function() {
     s.onLoadError.apply(t, arguments)
    }
   })
  } else a(n)
 }

 function a(t) {
  e("input,select,textarea", t).each(function() {
   var t = this.type,
    n = this.tagName.toLowerCase();
   if ("text" == t || "hidden" == t || "password" == t || "textarea" == n) this.value = "";
   else if ("file" == t) {
    var a = e(this);
    if (!a.hasClass("textbox-value")) {
     var i = a.clone().val("");
     i.insertAfter(a), a.data("validatebox") ? (a.validatebox("destroy"), i.validatebox()) : a.remove()
    }
   } else "checkbox" == t || "radio" == t ? this.checked = !1 : "select" == n && (this.selectedIndex = -1)
  });
  for (var n = e(t), a = ["textbox", "combo", "combobox", "combotree", "combogrid", "slider"], i = 0; i < a.length; i++) {
   var o = a[i],
    r = n.find("." + o + "-f");
   r.length && r[o] && r[o]("clear")
  }
  d(t)
 }

 function i(t) {
  t.reset();
  for (var n = e(t), a = ["textbox", "combo", "combobox", "combotree", "combogrid", "datebox", "datetimebox", "spinner", "timespinner", "numberbox", "numberspinner", "slider"], i = 0; i < a.length; i++) {
   var o = a[i],
    r = n.find("." + o + "-f");
   r.length && r[o] && r[o]("reset")
  }
  d(t)
 }

 function o(n) {
  var a = e.data(n, "form").options;
  e(n).unbind(".form"), a.ajax && e(n).bind("submit.form", function() {
   return setTimeout(function() {
    t(n, a)
   }, 0), !1
  }), s(n, a.novalidate)
 }

 function r(t, n) {
  n = n || {};
  var a = e.data(t, "form");
  a ? e.extend(a.options, n) : e.data(t, "form", {
   options: e.extend({}, e.fn.form.defaults, e.fn.form.parseOptions(t), n)
  })
 }

 function d(t) {
  if (e.fn.validatebox) {
   var n = e(t);
   n.find(".validatebox-text:not(:disabled)").validatebox("validate");
   var a = n.find(".validatebox-invalid");
   return a.filter(":not(:disabled):first").focus(), 0 == a.length
  }
  return !0
 }

 function s(t, n) {
  var a = e.data(t, "form").options;
  a.novalidate = n, e(t).find(".validatebox-text:not(:disabled)").validatebox(n ? "disableValidation" : "enableValidation")
 }
 e.fn.form = function(t, n) {
  return "string" == typeof t ? (this.each(function() {
   r(this)
  }), e.fn.form.methods[t](this, n)) : this.each(function() {
   r(this, t), o(this)
  })
 }, e.fn.form.methods = {
  options: function(t) {
   return e.data(t[0], "form").options
  },
  submit: function(e, n) {
   return e.each(function() {
    t(this, n)
   })
  },
  load: function(e, t) {
   return e.each(function() {
    n(this, t)
   })
  },
  clear: function(e) {
   return e.each(function() {
    a(this)
   })
  },
  reset: function(e) {
   return e.each(function() {
    i(this)
   })
  },
  validate: function(e) {
   return d(e[0])
  },
  disableValidation: function(e) {
   return e.each(function() {
    s(this, !0)
   })
  },
  enableValidation: function(e) {
   return e.each(function() {
    s(this, !1)
   })
  }
 }, e.fn.form.parseOptions = function(t) {
  var n = e(t);
  return e.extend({}, e.parser.parseOptions(t, [{
   ajax: "boolean"
  }]), {
   url: n.attr("action") ? n.attr("action") : void 0
  })
 }, e.fn.form.defaults = {
  novalidate: !1,
  ajax: !0,
  url: null,
  queryParams: {},
  onSubmit: function(t) {
   return e(this).form("validate")
  },
  success: function(e) {},
  onBeforeLoad: function(e) {},
  onLoadSuccess: function(e) {},
  onLoadError: function() {}
 }
}(jQuery),
function(e) {
 function t(t) {
  var n = e.data(t, "numberbox"),
   a = n.options;
  e(t).addClass("numberbox-f").textbox(a), e(t).textbox("textbox").css({
   imeMode: "disabled"
  }), e(t).attr("numberboxName", e(t).attr("textboxName")), n.numberbox = e(t).next(), n.numberbox.addClass("numberbox");
  var i = a.parser.call(t, a.value),
   o = a.formatter.call(t, i);
  e(t).numberbox("initValue", i).numberbox("setText", o)
 }

 function n(t, n) {
  var a = e.data(t, "numberbox"),
   i = a.options,
   n = i.parser.call(t, n),
   o = i.formatter.call(t, n);
  i.value = n, e(t).textbox("setValue", n).textbox("setText", o)
 }
 e.fn.numberbox = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.numberbox.methods[n];
   return i ? i(this, a) : this.textbox(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "numberbox");
   a ? e.extend(a.options, n) : a = e.data(this, "numberbox", {
    options: e.extend({}, e.fn.numberbox.defaults, e.fn.numberbox.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.numberbox.methods = {
  options: function(t) {
   var n = t.data("textbox") ? t.textbox("options") : {};
   return e.extend(e.data(t[0], "numberbox").options, {
    width: n.width,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  fix: function(t) {
   return t.each(function() {
    e(this).numberbox("setValue", e(this).numberbox("getText"))
   })
  },
  setValue: function(e, t) {
   return e.each(function() {
    n(this, t)
   })
  },
  clear: function(t) {
   return t.each(function() {
    e(this).textbox("clear"), e(this).numberbox("options").value = ""
   })
  },
  reset: function(t) {
   return t.each(function() {
    e(this).textbox("reset"), e(this).numberbox("setValue", e(this).numberbox("getValue"))
   })
  }
 }, e.fn.numberbox.parseOptions = function(t) {
  var n = e(t);
  return e.extend({}, e.fn.textbox.parseOptions(t), e.parser.parseOptions(t, ["decimalSeparator", "groupSeparator", "suffix", {
   min: "number",
   max: "number",
   precision: "number"
  }]), {
   prefix: n.attr("prefix") ? n.attr("prefix") : void 0
  })
 }, e.fn.numberbox.defaults = e.extend({}, e.fn.textbox.defaults, {
  inputEvents: {
   keypress: function(t) {
    var n = t.data.target,
     a = e(n).numberbox("options");
    return a.filter.call(n, t)
   },
   blur: function(t) {
    var n = t.data.target;
    e(n).numberbox("setValue", e(n).numberbox("getText"))
   },
   keydown: function(t) {
    if (13 == t.keyCode) {
     var n = t.data.target;
     e(n).numberbox("setValue", e(n).numberbox("getText"))
    }
   }
  },
  min: null,
  max: null,
  precision: 0,
  decimalSeparator: ".",
  groupSeparator: "",
  prefix: "",
  suffix: "",
  filter: function(t) {
   var n = e(this).numberbox("options"),
    a = e(this).numberbox("getText");
   if (13 == t.which) return !0;
   if (45 == t.which) return -1 == a.indexOf("-") ? !0 : !1;
   var i = String.fromCharCode(t.which);
   return i == n.decimalSeparator ? -1 == a.indexOf(i) ? !0 : !1 : i == n.groupSeparator ? !0 : t.which >= 48 && t.which <= 57 && 0 == t.ctrlKey && 0 == t.shiftKey || 0 == t.which || 8 == t.which ? !0 : 1 != t.ctrlKey || 99 != t.which && 118 != t.which ? !1 : !0
  },
  formatter: function(t) {
   if (!t) return t;
   t += "";
   var n = e(this).numberbox("options"),
    a = t,
    i = "",
    o = t.indexOf(".");
   if (o >= 0 && (a = t.substring(0, o), i = t.substring(o + 1, t.length)), n.groupSeparator)
    for (var r = /(\d+)(\d{3})/; r.test(a);) a = a.replace(r, "$1" + n.groupSeparator + "$2");
   return i ? n.prefix + a + n.decimalSeparator + i + n.suffix : n.prefix + a + n.suffix
  },
  parser: function(t) {
   t += "";
   var n = e(this).numberbox("options");
   parseFloat(t) != t && (n.prefix && (t = e.trim(t.replace(new RegExp("\\" + e.trim(n.prefix), "g"), ""))), n.suffix && (t = e.trim(t.replace(new RegExp("\\" + e.trim(n.suffix), "g"), ""))), n.groupSeparator && (t = e.trim(t.replace(new RegExp("\\" + n.groupSeparator, "g"), ""))), n.decimalSeparator && (t = e.trim(t.replace(new RegExp("\\" + n.decimalSeparator, "g"), "."))), t = t.replace(/\s/g, ""));
   var a = parseFloat(t).toFixed(n.precision);
   return isNaN(a) ? a = "" : "number" == typeof n.min && a < n.min ? a = n.min.toFixed(n.precision) : "number" == typeof n.max && a > n.max && (a = n.max.toFixed(n.precision)), a
  }
 })
}(jQuery),
function(e) {
 function t(t, n) {
  var a = e.data(t, "calendar").options,
   o = e(t);
  n && e.extend(a, {
   width: n.width,
   height: n.height
  }), o._size(a, o.parent()), o.find(".calendar-body")._outerHeight(o.height() - o.find(".calendar-header")._outerHeight()), o.find(".calendar-menu").is(":visible") && i(t)
 }

 function n(n) {
  e(n).addClass("calendar").html('<div class="calendar-header"><div class="calendar-nav calendar-prevmonth"></div><div class="calendar-nav calendar-nextmonth"></div><div class="calendar-nav calendar-prevyear"></div><div class="calendar-nav calendar-nextyear"></div><div class="calendar-title"><span class="calendar-text"></span></div></div><div class="calendar-body"><div class="calendar-menu"><div class="calendar-menu-year-inner"><span class="calendar-nav calendar-menu-prev"></span><span><input class="calendar-menu-year" type="text"></input></span><span class="calendar-nav calendar-menu-next"></span></div><div class="calendar-menu-month-inner"></div></div></div>'), e(n).bind("_resize", function(a, i) {
   return (e(this).hasClass("easyui-fluid") || i) && t(n), !1
  })
 }

 function a(t) {
  function n(t) {
   var n = e(t).closest(".calendar-day");
   return n.length ? n : e(t)
  }

  function a(n) {
   var a = e(t).find(".calendar-menu"),
    i = a.find(".calendar-menu-year").val(),
    o = a.find(".calendar-selected").attr("abbr");
   isNaN(i) || (s.year = parseInt(i), s.month = parseInt(o), r(t)), n && a.hide()
  }

  function o(e) {
   s.year += e, r(t), l.find(".calendar-menu-year").val(s.year)
  }

  function d(e) {
   s.month += e, s.month > 12 ? (s.year++, s.month = 1) : s.month < 1 && (s.year--, s.month = 12), r(t), l.find("td.calendar-selected").removeClass("calendar-selected"), l.find("td:eq(" + (s.month - 1) + ")").addClass("calendar-selected")
  }
  var s = e.data(t, "calendar").options,
   l = e(t).find(".calendar-menu");
  l.find(".calendar-menu-year").unbind(".calendar").bind("keypress.calendar", function(e) {
   13 == e.keyCode && a(!0)
  }), e(t).unbind(".calendar").bind("mouseover.calendar", function(e) {
   var t = n(e.target);
   (t.hasClass("calendar-nav") || t.hasClass("calendar-text") || t.hasClass("calendar-day") && !t.hasClass("calendar-disabled")) && t.addClass("calendar-nav-hover")
  }).bind("mouseout.calendar", function(e) {
   var t = n(e.target);
   (t.hasClass("calendar-nav") || t.hasClass("calendar-text") || t.hasClass("calendar-day") && !t.hasClass("calendar-disabled")) && t.removeClass("calendar-nav-hover")
  }).bind("click.calendar", function(e) {
   var c = n(e.target);
   if (c.hasClass("calendar-menu-next") || c.hasClass("calendar-nextyear")) o(1);
   else if (c.hasClass("calendar-menu-prev") || c.hasClass("calendar-prevyear")) o(-1);
   else if (c.hasClass("calendar-menu-month")) l.find(".calendar-selected").removeClass("calendar-selected"), c.addClass("calendar-selected"), a(!0);
   else if (c.hasClass("calendar-prevmonth")) d(-1);
   else if (c.hasClass("calendar-nextmonth")) d(1);
   else if (c.hasClass("calendar-text")) l.is(":visible") ? l.hide() : i(t);
   else if (c.hasClass("calendar-day")) {
    if (c.hasClass("calendar-disabled")) return;
    var u = s.current;
    c.closest("div.calendar-body").find(".calendar-selected").removeClass("calendar-selected"), c.addClass("calendar-selected");
    var h = c.attr("abbr").split(","),
     f = parseInt(h[0]),
     p = parseInt(h[1]),
     g = parseInt(h[2]);
    s.current = new Date(f, p - 1, g), s.onSelect.call(t, s.current), u && u.getTime() == s.current.getTime() || s.onChange.call(t, s.current, u), (s.year != f || s.month != p) && (s.year = f, s.month = p, r(t))
   }
  })
 }

 function i(t) {
  var n = e.data(t, "calendar").options;
  if (e(t).find(".calendar-menu").show(), e(t).find(".calendar-menu-month-inner").is(":empty")) {
   e(t).find(".calendar-menu-month-inner").empty();
   for (var a = e('<table class="calendar-mtable"></table>').appendTo(e(t).find(".calendar-menu-month-inner")), i = 0, o = 0; 3 > o; o++)
    for (var r = e("<tr></tr>").appendTo(a), d = 0; 4 > d; d++) e('<td class="calendar-nav calendar-menu-month"></td>').html(n.months[i++]).attr("abbr", i).appendTo(r)
  }
  var s = e(t).find(".calendar-body"),
   l = e(t).find(".calendar-menu"),
   c = l.find(".calendar-menu-year-inner"),
   u = l.find(".calendar-menu-month-inner");
  c.find("input").val(n.year).focus(), u.find("td.calendar-selected").removeClass("calendar-selected"), u.find("td:eq(" + (n.month - 1) + ")").addClass("calendar-selected"), l._outerWidth(s._outerWidth()), l._outerHeight(s._outerHeight()), u._outerHeight(l.height() - c._outerHeight())
 }

 function o(t, n, a) {
  for (var i = e.data(t, "calendar").options, o = [], r = new Date(n, a, 0).getDate(), d = 1; r >= d; d++) o.push([n, a, d]);
  for (var s = [], l = [], c = -1; o.length > 0;) {
   var u = o.shift();
   l.push(u);
   var h = new Date(u[0], u[1] - 1, u[2]).getDay();
   c == h ? h = 0 : h == (0 == i.firstDay ? 7 : i.firstDay) - 1 && (s.push(l), l = []), c = h
  }
  l.length && s.push(l);
  var f = s[0];
  if (f.length < 7)
   for (; f.length < 7;) {
    var p = f[0],
     u = new Date(p[0], p[1] - 1, p[2] - 1);
    f.unshift([u.getFullYear(), u.getMonth() + 1, u.getDate()])
   } else {
    for (var p = f[0], l = [], d = 1; 7 >= d; d++) {
     var u = new Date(p[0], p[1] - 1, p[2] - d);
     l.unshift([u.getFullYear(), u.getMonth() + 1, u.getDate()])
    }
    s.unshift(l)
   }
  for (var g = s[s.length - 1]; g.length < 7;) {
   var v = g[g.length - 1],
    u = new Date(v[0], v[1] - 1, v[2] + 1);
   g.push([u.getFullYear(), u.getMonth() + 1, u.getDate()])
  }
  if (s.length < 6) {
   for (var v = g[g.length - 1], l = [], d = 1; 7 >= d; d++) {
    var u = new Date(v[0], v[1] - 1, v[2] + d);
    l.push([u.getFullYear(), u.getMonth() + 1, u.getDate()])
   }
   s.push(l)
  }
  return s
 }

 function r(t) {
  var n = e.data(t, "calendar").options;
  n.current && !n.validator.call(t, n.current) && (n.current = null);
  var a = new Date,
   i = a.getFullYear() + "," + (a.getMonth() + 1) + "," + a.getDate(),
   r = n.current ? n.current.getFullYear() + "," + (n.current.getMonth() + 1) + "," + n.current.getDate() : "",
   d = 6 - n.firstDay,
   s = d + 1;
  d >= 7 && (d -= 7), s >= 7 && (s -= 7), e(t).find(".calendar-title span").html(n.months[n.month - 1] + " " + n.year);
  var l = e(t).find("div.calendar-body");
  l.children("table").remove();
  var c = ['<table class="calendar-dtable" cellspacing="0" cellpadding="0" border="0">'];
  c.push("<thead><tr>");
  for (var u = n.firstDay; u < n.weeks.length; u++) c.push("<th>" + n.weeks[u] + "</th>");
  for (var u = 0; u < n.firstDay; u++) c.push("<th>" + n.weeks[u] + "</th>");
  c.push("</tr></thead>"), c.push("<tbody>");
  for (var h = o(t, n.year, n.month), u = 0; u < h.length; u++) {
   var f = h[u],
    p = "";
   0 == u ? p = "calendar-first" : u == h.length - 1 && (p = "calendar-last"), c.push('<tr class="' + p + '">');
   for (var g = 0; g < f.length; g++) {
    var v = f[g],
     b = v[0] + "," + v[1] + "," + v[2],
     m = new Date(v[0], parseInt(v[1]) - 1, v[2]),
     x = n.formatter.call(t, m),
     w = n.styler.call(t, m),
     _ = "",
     y = "";
    "string" == typeof w ? y = w : w && (_ = w["class"] || "", y = w.style || "");
    var p = "calendar-day";
    (n.year != v[0] || n.month != v[1]) && (p += " calendar-other-month"), b == i && (p += " calendar-today"), b == r && (p += " calendar-selected"), g == d ? p += " calendar-saturday" : g == s && (p += " calendar-sunday"), 0 == g ? p += " calendar-first" : g == f.length - 1 && (p += " calendar-last"), p += " " + _, n.validator.call(t, m) || (p += " calendar-disabled"), c.push('<td class="' + p + '" abbr="' + b + '" style="' + y + '">' + x + "</td>")
   }
   c.push("</tr>")
  }
  c.push("</tbody>"), c.push("</table>"), l.append(c.join("")), l.children("table.calendar-dtable").prependTo(l), n.onNavigate.call(t, n.year, n.month)
 }
 e.fn.calendar = function(i, o) {
  return "string" == typeof i ? e.fn.calendar.methods[i](this, o) : (i = i || {}, this.each(function() {
   var o = e.data(this, "calendar");
   o ? e.extend(o.options, i) : (o = e.data(this, "calendar", {
    options: e.extend({}, e.fn.calendar.defaults, e.fn.calendar.parseOptions(this), i)
   }), n(this)), 0 == o.options.border && e(this).addClass("calendar-noborder"), t(this), a(this), r(this), e(this).find("div.calendar-menu").hide()
  }))
 }, e.fn.calendar.methods = {
  options: function(t) {
   return e.data(t[0], "calendar").options
  },
  resize: function(e, n) {
   return e.each(function() {
    t(this, n)
   })
  },
  moveTo: function(t, n) {
   return t.each(function() {
    var t = e(this).calendar("options");
    if (t.validator.call(this, n)) {
     var a = t.current;
     e(this).calendar({
      year: n.getFullYear(),
      month: n.getMonth() + 1,
      current: n
     }), a && a.getTime() == n.getTime() || t.onChange.call(this, t.current, a)
    }
   })
  }
 }, e.fn.calendar.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.parser.parseOptions(t, [{
   firstDay: "number",
   fit: "boolean",
   border: "boolean"
  }]))
 }, e.fn.calendar.defaults = {
  width: 180,
  height: 180,
  fit: !1,
  border: !0,
  firstDay: 0,
  weeks: ["S", "M", "T", "W", "T", "F", "S"],
  months: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  year: (new Date).getFullYear(),
  month: (new Date).getMonth() + 1,
  current: function() {
   var e = new Date;
   return new Date(e.getFullYear(), e.getMonth(), e.getDate())
  }(),
  formatter: function(e) {
   return e.getDate()
  },
  styler: function(e) {
   return ""
  },
  validator: function(e) {
   return !0
  },
  onSelect: function(e) {},
  onChange: function(e, t) {},
  onNavigate: function(e, t) {}
 }
}(jQuery),
function(e) {
 function t(t) {
  var a = e.data(t, "spinner"),
   i = a.options,
   o = e.extend(!0, [], i.icons);
  o.push({
   iconCls: "spinner-arrow",
   handler: function(e) {
    n(e)
   }
  }), e(t).addClass("spinner-f").textbox(e.extend({}, i, {
   icons: o
  }));
  var r = e(t).textbox("getIcon", o.length - 1);
  r.append('<a href="javascript:void(0)" class="spinner-arrow-up" tabindex="-1"></a>'), r.append('<a href="javascript:void(0)" class="spinner-arrow-down" tabindex="-1"></a>'), e(t).attr("spinnerName", e(t).attr("textboxName")), a.spinner = e(t).next(), a.spinner.addClass("spinner")
 }

 function n(t) {
  var n = t.data.target,
   a = e(n).spinner("options"),
   i = e(t.target).closest("a.spinner-arrow-up");
  i.length && (a.spin.call(n, !1), a.onSpinUp.call(n), e(n).spinner("validate"));
  var o = e(t.target).closest("a.spinner-arrow-down");
  o.length && (a.spin.call(n, !0), a.onSpinDown.call(n), e(n).spinner("validate"))
 }
 e.fn.spinner = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.spinner.methods[n];
   return i ? i(this, a) : this.textbox(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "spinner");
   a ? e.extend(a.options, n) : a = e.data(this, "spinner", {
    options: e.extend({}, e.fn.spinner.defaults, e.fn.spinner.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.spinner.methods = {
  options: function(t) {
   var n = t.textbox("options");
   return e.extend(e.data(t[0], "spinner").options, {
    width: n.width,
    value: n.value,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  }
 }, e.fn.spinner.parseOptions = function(t) {
  return e.extend({}, e.fn.textbox.parseOptions(t), e.parser.parseOptions(t, ["min", "max", {
   increment: "number"
  }]))
 }, e.fn.spinner.defaults = e.extend({}, e.fn.textbox.defaults, {
  min: null,
  max: null,
  increment: 1,
  spin: function(e) {},
  onSpinUp: function() {},
  onSpinDown: function() {}
 })
}(jQuery),
function(e) {
 function t(t) {
  e(t).addClass("numberspinner-f");
  var n = e.data(t, "numberspinner").options;
  e(t).numberbox(n).spinner(n), e(t).numberbox("setValue", n.value)
 }

 function n(t, n) {
  var a = e.data(t, "numberspinner").options,
   i = parseFloat(e(t).numberbox("getValue") || a.value) || 0;
  n ? i -= a.increment : i += a.increment, e(t).numberbox("setValue", i)
 }
 e.fn.numberspinner = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.numberspinner.methods[n];
   return i ? i(this, a) : this.numberbox(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "numberspinner");
   a ? e.extend(a.options, n) : e.data(this, "numberspinner", {
    options: e.extend({}, e.fn.numberspinner.defaults, e.fn.numberspinner.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.numberspinner.methods = {
  options: function(t) {
   var n = t.numberbox("options");
   return e.extend(e.data(t[0], "numberspinner").options, {
    width: n.width,
    value: n.value,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  }
 }, e.fn.numberspinner.parseOptions = function(t) {
  return e.extend({}, e.fn.spinner.parseOptions(t), e.fn.numberbox.parseOptions(t), {})
 }, e.fn.numberspinner.defaults = e.extend({}, e.fn.spinner.defaults, e.fn.numberbox.defaults, {
  spin: function(e) {
   n(this, e)
  }
 })
}(jQuery),
function(e) {
 function t(e) {
  var t = 0;
  if (e.selectionStart) t = e.selectionStart;
  else if (e.createTextRange) {
   var n = e.createTextRange(),
    a = document.selection.createRange();
   a.setEndPoint("StartToStart", n), t = a.text.length
  }
  return t
 }

 function n(e, t, n) {
  if (e.selectionStart) e.setSelectionRange(t, n);
  else if (e.createTextRange) {
   var a = e.createTextRange();
   a.collapse(), a.moveEnd("character", n), a.moveStart("character", t), a.select()
  }
 }

 function a(t) {
  var n = e.data(t, "timespinner").options;
  e(t).addClass("timespinner-f").spinner(n);
  var a = n.formatter.call(t, n.parser.call(t, n.value));
  e(t).timespinner("initValue", a)
 }

 function i(n) {
  for (var a = n.data.target, i = e.data(a, "timespinner").options, r = t(this), d = 0; d < i.selections.length; d++) {
   var s = i.selections[d];
   if (r >= s[0] && r <= s[1]) return void o(a, d)
  }
 }

 function o(t, a) {
  var i = e.data(t, "timespinner").options;
  void 0 != a && (i.highlight = a);
  var o = i.selections[i.highlight];
  if (o) {
   var r = e(t).timespinner("textbox");
   n(r[0], o[0], o[1]), r.focus()
  }
 }

 function r(t, n) {
  var a = e.data(t, "timespinner").options,
   n = a.parser.call(t, n),
   i = a.formatter.call(t, n);
  e(t).spinner("setValue", i)
 }

 function d(t, n) {
  var a = e.data(t, "timespinner").options,
   i = e(t).timespinner("getValue"),
   r = a.selections[a.highlight],
   d = i.substring(0, r[0]),
   s = i.substring(r[0], r[1]),
   l = i.substring(r[1]),
   c = d + ((parseInt(s) || 0) + a.increment * (n ? -1 : 1)) + l;
  e(t).timespinner("setValue", c), o(t)
 }
 e.fn.timespinner = function(t, n) {
  if ("string" == typeof t) {
   var i = e.fn.timespinner.methods[t];
   return i ? i(this, n) : this.spinner(t, n)
  }
  return t = t || {}, this.each(function() {
   var n = e.data(this, "timespinner");
   n ? e.extend(n.options, t) : e.data(this, "timespinner", {
    options: e.extend({}, e.fn.timespinner.defaults, e.fn.timespinner.parseOptions(this), t)
   }), a(this)
  })
 }, e.fn.timespinner.methods = {
  options: function(t) {
   var n = t.data("spinner") ? t.spinner("options") : {};
   return e.extend(e.data(t[0], "timespinner").options, {
    width: n.width,
    value: n.value,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  setValue: function(e, t) {
   return e.each(function() {
    r(this, t)
   })
  },
  getHours: function(t) {
   var n = e.data(t[0], "timespinner").options,
    a = t.timespinner("getValue").split(n.separator);
   return parseInt(a[0], 10)
  },
  getMinutes: function(t) {
   var n = e.data(t[0], "timespinner").options,
    a = t.timespinner("getValue").split(n.separator);
   return parseInt(a[1], 10)
  },
  getSeconds: function(t) {
   var n = e.data(t[0], "timespinner").options,
    a = t.timespinner("getValue").split(n.separator);
   return parseInt(a[2], 10) || 0
  }
 }, e.fn.timespinner.parseOptions = function(t) {
  return e.extend({}, e.fn.spinner.parseOptions(t), e.parser.parseOptions(t, ["separator", {
   showSeconds: "boolean",
   highlight: "number"
  }]))
 }, e.fn.timespinner.defaults = e.extend({}, e.fn.spinner.defaults, {
  inputEvents: e.extend({}, e.fn.spinner.defaults.inputEvents, {
   click: function(e) {
    i.call(this, e)
   },
   blur: function(t) {
    var n = e(t.data.target);
    n.timespinner("setValue", n.timespinner("getText"))
   },
   keydown: function(t) {
    if (13 == t.keyCode) {
     var n = e(t.data.target);
     n.timespinner("setValue", n.timespinner("getText"))
    }
   }
  }),
  formatter: function(t) {
   function n(e) {
    return (10 > e ? "0" : "") + e
   }
   if (!t) return "";
   var a = e(this).timespinner("options"),
    i = [n(t.getHours()), n(t.getMinutes())];
   return a.showSeconds && i.push(n(t.getSeconds())), i.join(a.separator)
  },
  parser: function(t) {
   function n(e) {
    if (!e) return null;
    var t = e.split(a.separator);
    return new Date(1900, 0, 0, parseInt(t[0], 10) || 0, parseInt(t[1], 10) || 0, parseInt(t[2], 10) || 0)
   }
   var a = e(this).timespinner("options"),
    i = n(t);
   if (i) {
    var o = n(a.min),
     r = n(a.max);
    o && o > i && (i = o), r && i > r && (i = r)
   }
   return i
  },
  selections: [
   [0, 2],
   [3, 5],
   [6, 8]
  ],
  separator: ":",
  showSeconds: !1,
  highlight: 0,
  spin: function(e) {
   d(this, e)
  }
 })
}(jQuery),
function(e) {
 function t(t) {
  var n = e.data(t, "datetimespinner").options;
  e(t).addClass("datetimespinner-f").timespinner(n)
 }
 e.fn.datetimespinner = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.datetimespinner.methods[n];
   return i ? i(this, a) : this.timespinner(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "datetimespinner");
   a ? e.extend(a.options, n) : e.data(this, "datetimespinner", {
    options: e.extend({}, e.fn.datetimespinner.defaults, e.fn.datetimespinner.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.datetimespinner.methods = {
  options: function(t) {
   var n = t.timespinner("options");
   return e.extend(e.data(t[0], "datetimespinner").options, {
    width: n.width,
    value: n.value,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  }
 }, e.fn.datetimespinner.parseOptions = function(t) {
  return e.extend({}, e.fn.timespinner.parseOptions(t), e.parser.parseOptions(t, []))
 }, e.fn.datetimespinner.defaults = e.extend({}, e.fn.timespinner.defaults, {
  formatter: function(t) {
   return t ? e.fn.datebox.defaults.formatter.call(this, t) + " " + e.fn.timespinner.defaults.formatter.call(this, t) : ""
  },
  parser: function(t) {
   if (t = e.trim(t), !t) return null;
   var n = t.split(" "),
    a = e.fn.datebox.defaults.parser.call(this, n[0]);
   if (n.length < 2) return a;
   var i = e.fn.timespinner.defaults.parser.call(this, n[1]);
   return new Date(a.getFullYear(), a.getMonth(), a.getDate(), i.getHours(), i.getMinutes(), i.getSeconds())
  },
  selections: [
   [0, 2],
   [3, 5],
   [6, 10],
   [11, 13],
   [14, 16],
   [17, 19]
  ]
 })
}(jQuery),
function($) {
 function _56a(e, t) {
  for (var n = 0, a = e.length; a > n; n++)
   if (e[n] == t) return n;
  return -1
 }

 function _56b(e, t, n) {
  if ("string" == typeof t) {
   for (var a = 0, i = e.length; i > a; a++)
    if (e[a][t] == n) return void e.splice(a, 1)
  } else {
   var o = _56a(e, t); - 1 != o && e.splice(o, 1)
  }
 }

 function _56d(e, t, n) {
  for (var a = 0, i = e.length; i > a; a++)
   if (e[a][t] == n[t]) return;
  e.push(n)
 }

 function _56e(e) {
  var t = $.data(e, "datagrid"),
   n = t.options,
   a = t.panel,
   i = t.dc,
   o = null;
  n.sharedStyleSheet ? o = "boolean" == typeof n.sharedStyleSheet ? "head" : n.sharedStyleSheet : (o = a.closest("div.datagrid-view"), o.length || (o = i.view));
  var r = $(o),
   d = $.data(r[0], "ss");
  return d || (d = $.data(r[0], "ss", {
   cache: {},
   dirty: []
  })), {
   add: function(e) {
    for (var t = ['<style type="text/css" easyui="true">'], n = 0; n < e.length; n++) d.cache[e[n][0]] = {
     width: e[n][1]
    };
    var a = 0;
    for (var i in d.cache) {
     var o = d.cache[i];
     o.index = a++, t.push(i + "{width:" + o.width + "}")
    }
    t.push("</style>"), $(t.join("\n")).appendTo(r), r.children("style[easyui]:not(:last)").remove()
   },
   getRule: function(e) {
    var t = r.children("style[easyui]:last")[0],
     n = t.styleSheet ? t.styleSheet : t.sheet || document.styleSheets[document.styleSheets.length - 1],
     a = n.cssRules || n.rules;
    return a[e]
   },
   set: function(e, t) {
    var n = d.cache[e];
    if (n) {
     n.width = t;
     var a = this.getRule(n.index);
     a && (a.style.width = t)
    }
   },
   remove: function(e) {
    var t = [];
    for (var n in d.cache) - 1 == n.indexOf(e) && t.push([n, d.cache[n].width]);
    d.cache = {}, this.add(t)
   },
   dirty: function(e) {
    e && d.dirty.push(e)
   },
   clean: function() {
    for (var e = 0; e < d.dirty.length; e++) this.remove(d.dirty[e]);
    d.dirty = []
   }
  }
 }

 function _57d(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = n.panel;
  if (t && $.extend(a, t), 1 == a.fit) {
   var o = i.panel("panel").parent();
   a.width = o.width(), a.height = o.height()
  }
  i.panel("resize", a)
 }

 function _582(e) {
  var t = $.data(e, "datagrid"),
   n = t.options,
   a = t.dc,
   i = t.panel,
   o = i.width(),
   r = i.height(),
   d = a.view,
   s = a.view1,
   l = a.view2,
   c = s.children("div.datagrid-header"),
   u = l.children("div.datagrid-header"),
   h = c.find("table"),
   f = u.find("table");
  d.width(o);
  var p = c.children("div.datagrid-header-inner").show();
  s.width(p.find("table").width()), n.showHeader || p.hide(), l.width(o - s._outerWidth()), s.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer").width(s.width()), l.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer").width(l.width());
  var g;
  c.add(u).css("height", ""), h.add(f).css("height", ""), g = Math.max(h.height(), f.height()), h.add(f).height(g), c.add(u)._outerHeight(g), a.body1.add(a.body2).children("table.datagrid-btable-frozen").css({
   position: "absolute",
   top: a.header2._outerHeight()
  });
  var v = a.body2.children("table.datagrid-btable-frozen")._outerHeight(),
   b = v + l.children("div.datagrid-header")._outerHeight() + l.children("div.datagrid-footer")._outerHeight() + i.children("div.datagrid-toolbar")._outerHeight();
  i.children("div.datagrid-pager").each(function() {
   b += $(this)._outerHeight()
  });
  var m = i.outerHeight() - i.height(),
   x = i._size("minHeight") || "",
   w = i._size("maxHeight") || "";
  s.add(l).children("div.datagrid-body").css({
   marginTop: v,
   height: isNaN(parseInt(n.height)) ? "" : r - b,
   minHeight: x ? x - m - b : "",
   maxHeight: w ? w - m - b : ""
  }), d.height(l.height())
 }

 function _593(e, t, n) {
  function a(e, t) {
   /*2017-12-18*/ 
   var a, i, aH, iH, o, $allRows;
   for (var n = 0; n < t.length; n++) {
     a = $(e[n]), i = $(t[n]);
     
     aH = a[0].clientHeight, iH = i[0].clientHeight;
     o = (aH > iH) ? aH : iH;
     $allRows = a.add(i);
     $allRows.css("height", o);
     
     /*a.css("height", ""), i.css("height", "");
     var o = Math.max(a.height(), i.height());
     a.css("height", o), i.css("height", o);*/
   }
  }

  function i(e) {
   var t = 0,
    n = 0;
   return $(e).children().each(function() {
    var e = $(this);
    e.is(":visible") && (n += e._outerHeight(), t < e._outerWidth() && (t = e._outerWidth()))
   }), {
    width: t,
    height: n
   }
  }
  var o = ($.data(e, "datagrid").data.rows, $.data(e, "datagrid").options),
   r = $.data(e, "datagrid").dc;
  if (!r.body1.is(":empty") && (!o.nowrap || o.autoRowHeight || n))
   if (void 0 != t) {
    var d = o.finder.getTr(e, t, "body", 1),
     s = o.finder.getTr(e, t, "body", 2);
    a(d, s)
   } else {
    var d = o.finder.getTr(e, 0, "allbody", 1),
     s = o.finder.getTr(e, 0, "allbody", 2);
    if (a(d, s), o.showFooter) {
     var d = o.finder.getTr(e, 0, "allfooter", 1),
      s = o.finder.getTr(e, 0, "allfooter", 2);
     a(d, s)
    }
   }
  if (_582(e), "auto" == o.height) {
   var l = r.body1.parent(),
    c = r.body2,
    u = i(c),
    h = u.height;
   u.width > c.width() && (h += 18), h -= parseInt(c.css("marginTop")) || 0, l.height(h), c.height(h), r.view.height(r.view2.height())
  }
  r.body2.triggerHandler("scroll")
 }

 function _5a0(e, t) {
  function n(n) {
   var a = n ? 1 : 2,
    r = i.finder.getTr(e, t, "body", a);
   (n ? o.body1 : o.body2).children("table.datagrid-btable-frozen").append(r)
  }
  var a = $.data(e, "datagrid"),
   i = a.options,
   o = a.dc;
  o.body2.children("table.datagrid-btable-frozen").length || o.body1.add(o.body2).prepend('<table class="datagrid-btable datagrid-btable-frozen" cellspacing="0" cellpadding="0"></table>'), n(!0), n(!1), _582(e)
 }

 function _5a7(_5a8, _5a9) {
  function _5aa() {
   var _5ab = [],
    _5ac = [];
   return $(_5a8).children("thead").each(function() {
    var opt = $.parser.parseOptions(this, [{
     frozen: "boolean"
    }]);
    $(this).find("tr").each(function() {
     var cols = [];
     $(this).find("th").each(function() {
      var th = $(this),
       col = $.extend({}, $.parser.parseOptions(this, ["field", "align", "halign", "order", "width", {
        sortable: "boolean",
        checkbox: "boolean",
        resizableu: "boolean",
        fixed: "boolean"
       }, {
        rowspan: "number",
        colspan: "number"
       }]), {
        title: th.html() || void 0,
        hidden: th.attr("hidden") ? !0 : void 0,
        formatter: th.attr("formatter") ? eval(th.attr("formatter")) : void 0,
        styler: th.attr("styler") ? eval(th.attr("styler")) : void 0,
        sorter: th.attr("sorter") ? eval(th.attr("sorter")) : void 0
       });
      if (col.width && -1 == String(col.width).indexOf("%") && (col.width = parseInt(col.width)), th.attr("editor")) {
       var s = $.trim(th.attr("editor"));
       "{" == s.substr(0, 1) ? col.editor = eval("(" + s + ")") : col.editor = s
      }
      cols.push(col)
     }), opt.frozen ? _5ab.push(cols) : _5ac.push(cols)
    })
   }), [_5ab, _5ac]
  }
  var _5ad = $('<div class="datagrid-wrap"><div class="datagrid-view"><div class="datagrid-view1"><div class="datagrid-header"><div class="datagrid-header-inner"></div></div><div class="datagrid-body"><div class="datagrid-body-inner"></div></div><div class="datagrid-footer"><div class="datagrid-footer-inner"></div></div></div><div class="datagrid-view2"><div class="datagrid-header"><div class="datagrid-header-inner"></div></div><div class="datagrid-body"></div><div class="datagrid-footer"><div class="datagrid-footer-inner"></div></div></div></div></div>').insertAfter(_5a8);
  _5ad.panel({
   doSize: !1,
   cls: "datagrid"
  }), $(_5a8).addClass("datagrid-f").hide().appendTo(_5ad.children("div.datagrid-view"));
  var cc = _5aa(),
   view = _5ad.children("div.datagrid-view"),
   _5ae = view.children("div.datagrid-view1"),
   _5af = view.children("div.datagrid-view2");
  return {
   panel: _5ad,
   frozenColumns: cc[0],
   columns: cc[1],
   dc: {
    view: view,
    view1: _5ae,
    view2: _5af,
    header1: _5ae.children("div.datagrid-header").children("div.datagrid-header-inner"),
    header2: _5af.children("div.datagrid-header").children("div.datagrid-header-inner"),
    body1: _5ae.children("div.datagrid-body").children("div.datagrid-body-inner"),
    body2: _5af.children("div.datagrid-body"),
    footer1: _5ae.children("div.datagrid-footer").children("div.datagrid-footer-inner"),
    footer2: _5af.children("div.datagrid-footer").children("div.datagrid-footer-inner")
   }
  }
 }

 function _5b0(_5b1) {
  function _5b6(e, t, n) {
   if (t) {
    $(e).show(), $(e).empty();
    var a = [],
     i = [];
    opts.sortName && (a = opts.sortName.split(","), i = opts.sortOrder.split(","));
    for (var o = $('<table class="datagrid-htable" border="0" cellspacing="0" cellpadding="0"><tbody></tbody></table>').appendTo(e), r = 0; r < t.length; r++)
     for (var d = $('<tr class="datagrid-header-row"></tr>').appendTo($("tbody", o)), s = t[r], l = 0; l < s.length; l++) {
      var c = s[l],
       u = "";
      c.rowspan && (u += 'rowspan="' + c.rowspan + '" '), c.colspan && (u += 'colspan="' + c.colspan + '" '), c.id || (c.id = ["datagrid-td-group" + _569, r, l].join("-"));
      var h = $("<td " + u + "></td>").appendTo(d);
      if (c.checkbox) h.attr("field", c.field), $('<div class="datagrid-header-check"></div>').html('<input type="checkbox"/>').appendTo(h);
      else if (c.field) {
       h.attr("field", c.field), h.append('<div class="datagrid-cell"><span></span><span class="datagrid-sort-icon"></span></div>'), $("span", h).html(c.title), $("span.datagrid-sort-icon", h).text('');
       var f = h.find("div.datagrid-cell"),
        p = _56a(a, c.field);
       if (p >= 0 && f.addClass("datagrid-sort-" + i[p]), 0 == c.resizableu && f.attr("resizableu", "false"), c.width) {
        var g = $.parser.parseValue("width", c.width, dc.view, opts.scrollbarSize);
        f._outerWidth(g - 1), c.boxWidth = parseInt(f[0].style.width), c.deltaWidth = g - c.boxWidth
       } else c.auto = !0;
       f.css("text-align", c.halign || c.align || ""), c.cellClass = _5b2.cellClassPrefix + "-" + c.field.replace(/[\.\:\\\/|\s]/g, "-"), f.addClass(c.cellClass).css("width", "")
      } else $('<div class="datagrid-cell-group"></div>').html(c.title).appendTo(h);
      c.hidden && h.hide()
     }
    if (n && opts.rownumbers) {
     var h = $('<td rowspan="' + opts.frozenColumns.length + '"><div class="datagrid-header-rownumber"></div></td>');
     0 == $("tr", o).length ? h.wrap('<tr class="datagrid-header-row"></tr>').parent().appendTo($("tbody", o)) : h.prependTo($("tr:first", o))
    }
   }
  }

  function _5b7() {
   for (var e = [], t = _5c3(_5b1, !0).concat(_5c3(_5b1)), n = 0; n < t.length; n++) {
    var a = _5c4(_5b1, t[n]);
    a && !a.checkbox && e.push(["." + a.cellClass, a.boxWidth ? a.boxWidth + "px" : "auto"])
   }
   _5b2.ss.add(e), _5b2.ss.dirty(_5b2.cellSelectorPrefix), _5b2.cellSelectorPrefix = "." + _5b2.cellClassPrefix
  }
  var _5b2 = $.data(_5b1, "datagrid"),
   opts = _5b2.options,
   dc = _5b2.dc,
   _5b3 = _5b2.panel;
  if (_5b2.ss = $(_5b1).datagrid("createStyleSheet"), _5b3.panel($.extend({}, opts, {
    id: null,
    doSize: !1,
    onResize: function(e, t) {
     setTimeout(function() {
      $.data(_5b1, "datagrid") && (_582(_5b1), _5f7(_5b1), opts.onResize.call(_5b3, e, t))
     }, 0)
    },
    onExpand: function() {
     _593(_5b1), opts.onExpand.call(_5b3)
    }
   })), _5b2.rowIdPrefix = "datagrid-row-r" + ++_569, _5b2.cellClassPrefix = "datagrid-cell-c" + _569, _5b6(dc.header1, opts.frozenColumns, !0), _5b6(dc.header2, opts.columns, !1), _5b7(), dc.header1.add(dc.header2).css("display", opts.showHeader ? "block" : "none"), dc.footer1.add(dc.footer2).css("display", opts.showFooter ? "block" : "none"), opts.toolbar)
   if ($.isArray(opts.toolbar)) {
    $("div.datagrid-toolbar", _5b3).remove();
    for (var tb = $('<div class="datagrid-toolbar"><table cellspacing="0" cellpadding="0"><tr></tr></table></div>').prependTo(_5b3), tr = tb.find("tr"), i = 0; i < opts.toolbar.length; i++) {
     var btn = opts.toolbar[i];
     if ("-" == btn) $('<td><div class="datagrid-btn-separator"></div></td>').appendTo(tr);
     else {
      var td = $("<td></td>").appendTo(tr),
       tool = $('<a href="javascript:void(0)"></a>').appendTo(td);
      tool[0].onclick = eval(btn.handler || function() {}), tool.linkbutton($.extend({}, btn, {
       plain: !0
      }))
     }
    }
   } else $(opts.toolbar).addClass("datagrid-toolbar").prependTo(_5b3), $(opts.toolbar).show();
  else $("div.datagrid-toolbar", _5b3).remove();
  if ($("div.datagrid-pager", _5b3).remove(), opts.pagination) {
   var _5b8 = $('<div class="datagrid-pager"></div>');
   if ("bottom" == opts.pagePosition) _5b8.appendTo(_5b3);
   else if ("top" == opts.pagePosition) _5b8.addClass("datagrid-pager-top").prependTo(_5b3);
   else {
    var ptop = $('<div class="datagrid-pager datagrid-pager-top"></div>').prependTo(_5b3);
    _5b8.appendTo(_5b3), _5b8 = _5b8.add(ptop)
   }
   _5b8.pagination({
    total: opts.pageNumber * opts.pageSize,
    pageNumber: opts.pageNumber,
    pageSize: opts.pageSize,
    pageList: opts.pageList,
    onSelectPage: function(e, t) {
     opts.pageNumber = e || 1, opts.pageSize = t, _5b8.pagination("refresh", {
      pageNumber: e,
      pageSize: t
     }), _5f5(_5b1)
    }
   }), opts.pageSize = _5b8.pagination("options").pageSize
  }
 }

 function _5c5(e) {
  var t = $.data(e, "datagrid"),
   n = t.panel,
   a = t.options,
   i = t.dc,
   o = i.header1.add(i.header2);
  o.find("input[type=checkbox]").unbind(".datagrid").bind("click.datagrid", function(t) {
   return a.singleSelect && a.selectOnCheck ? !1 : ($(this).is(":checked") ? _65d(e) : _663(e), void t.stopPropagation())
  });
  var r = o.find("div.datagrid-cell");
  r.closest("td").unbind(".datagrid").bind("mouseenter.datagrid", function() {
   t.resizing || $(this).addClass("datagrid-header-over")
  }).bind("mouseleave.datagrid", function() {
   $(this).removeClass("datagrid-header-over")
  }).bind("contextmenu.datagrid", function(t) {
   var n = $(this).attr("field");
   a.onHeaderContextMenu.call(e, t, n)
  }), r.unbind(".datagrid").bind("click.datagrid", function(t) {
   var n = $(this).offset().left + 5,
    a = $(this).offset().left + $(this)._outerWidth() - 5;
   t.pageX < a && t.pageX > n && _5ea(e, $(this).parent().attr("field"))
  }).bind("dblclick.datagrid", function(t) {
   var n = $(this).offset().left + 5,
    i = $(this).offset().left + $(this)._outerWidth() - 5,
    o = "right" == a.resizeHandle ? t.pageX > i : "left" == a.resizeHandle ? t.pageX < n : t.pageX < n || t.pageX > i;
   if (o) {
    var r = $(this).parent().attr("field"),
     d = _5c4(e, r);
    if (0 == d.resizableu) return;
    $(e).datagrid("autoSizeColumn", r), d.auto = !1
   }
  });
  var d = "right" == a.resizeHandle ? "e" : "left" == a.resizeHandle ? "w" : "e,w";
  r.each(function() {
   $(this).resizableu({
    handles: d,
    disabled: $(this).attr("resizableu") ? "false" == $(this).attr("resizableu") : !1,
    minWidth: 25,
    onStartResize: function(e) {
     t.resizing = !0, o.css("cursor", $("body").css("cursor")), t.proxy || (t.proxy = $('<div class="datagrid-resize-proxy"></div>').appendTo(i.view)), t.proxy.css({
      left: e.pageX - $(n).offset().left - 1,
      display: "none"
     }), setTimeout(function() {
      t.proxy && t.proxy.show()
     }, 500)
    },
    onResize: function(e) {
     return t.proxy.css({
      left: e.pageX - $(n).offset().left - 1,
      display: "block"
     }), !1
    },
    onStopResize: function(n) {
     o.css("cursor", ""), $(this).css("height", "");
     var i = $(this).parent().attr("field"),
      r = _5c4(e, i);
     r.width = $(this)._outerWidth(), r.boxWidth = r.width - r.deltaWidth, r.auto = void 0, $(this).css("width", ""), _613(e, i), t.proxy.remove(), t.proxy = null, $(this).parents("div:first.datagrid-header").parent().hasClass("datagrid-view1") && _582(e), _5f7(e), a.onResizeColumn.call(e, i, r.width), setTimeout(function() {
      t.resizing = !1
     }, 0)
    }
   })
  });
  var s = i.body1.add(i.body2);
  s.unbind();
  for (var l in a.rowEvents) s.bind(l, a.rowEvents[l]);
  i.body1.bind("mousewheel DOMMouseScroll", function(e) {
   var t = e.originalEvent || window.event,
    n = t.wheelDelta || -1 * t.detail,
    a = $(e.target).closest("div.datagrid-view").children(".datagrid-f"),
    i = a.data("datagrid").dc;
   i.body2.scrollTop(i.body2.scrollTop() - n)
  }), i.body2.bind("scroll", function() {
   var e = i.view1.children("div.datagrid-body");
   e.scrollTop($(this).scrollTop());
   var t = i.body1.children(":first"),
    n = i.body2.children(":first");
   if (t.length && n.length) {
    var a = t.offset().top,
     o = n.offset().top;
    a != o && e.scrollTop(e.scrollTop() + a - o)
   }
   i.view2.children("div.datagrid-header,div.datagrid-footer")._scrollLeft($(this)._scrollLeft()), i.body2.children("table.datagrid-btable-frozen").css("left", -$(this)._scrollLeft());
  })
 }

 function _5d1(e) {
  return function(t) {
   var n = _5d3(t.target);
   if (n) {
    var a = _5d5(n);
    if (!$.data(a, "datagrid").resizing) {
     var i = _5d7(n);
     if (e) _5d8(a, i);
     else {
      var o = $.data(a, "datagrid").options;
      o.finder.getTr(a, i).removeClass("datagrid-row-over")
     }
    }
   }
  }
 }

 function _5d9(e) {
  var t = _5d3(e.target);
  if (t) {
   var n = _5d5(t),
    a = $.data(n, "datagrid").options,
    i = _5d7(t),
    o = $(e.target);
   if (o.parent().hasClass("datagrid-cell-check")) a.singleSelect && a.selectOnCheck ? (o._propAttr("checked", !o.is(":checked")), _5dc(n, i)) : o.is(":checked") ? (o._propAttr("checked", !1), _5dc(n, i)) : (o._propAttr("checked", !0), _5dd(n, i));
   else {
    var r = a.finder.getRow(n, i),
     d = o.closest("td[field]", t);
    if (d.length) {
     var s = d.attr("field");
     a.onClickCell.call(n, i, s, r[s])
    }
    if (1 == a.singleSelect) _5df(n, i);
    else if (a.ctrlSelect)
     if (e.ctrlKey) t.hasClass("datagrid-row-selected") ? _5e0(n, i) : _5df(n, i);
     else if (e.shiftKey) {
     $(n).datagrid("clearSelections");
     for (var l = Math.min(a.lastSelectedIndex || 0, i), c = Math.max(a.lastSelectedIndex || 0, i), u = l; c >= u; u++) _5df(n, u)
    } else $(n).datagrid("clearSelections"), _5df(n, i), a.lastSelectedIndex = i;
    else t.hasClass("datagrid-row-selected") ? _5e0(n, i) : _5df(n, i);
    a.onClickRow.call(n, i, r)
   }
  }
 }

 function _5e3(e) {
  var t = _5d3(e.target);
  if (t) {
   var n = _5d5(t),
    a = $.data(n, "datagrid").options,
    i = _5d7(t),
    o = a.finder.getRow(n, i),
    r = $(e.target).closest("td[field]", t);
   if (r.length) {
    var d = r.attr("field");
    a.onDblClickCell.call(n, i, d, o[d])
   }
   a.onDblClickRow.call(n, i, o)
  }
 }

 function _5e7(e) {
  var t = _5d3(e.target);
  if (t) {
   var n = _5d5(t),
    a = $.data(n, "datagrid").options,
    i = _5d7(t),
    o = a.finder.getRow(n, i);
   a.onRowContextMenu.call(n, e, i, o)
  }
 }

 function _5d5(e) {
  return $(e).closest("div.datagrid-view").children(".datagrid-f")[0]
 }

 function _5d3(e) {
  var t = $(e).closest("tr.datagrid-row");
  return t.length && t.parent().length ? t : void 0
 }

 function _5d7(e) {
  return e.attr("datagrid-row-index") ? parseInt(e.attr("datagrid-row-index")) : e.attr("node-id")
 }

 function _5ea(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options;
  t = t || {};
  var i = {
   sortName: a.sortName,
   sortOrder: a.sortOrder
  };
  "object" == typeof t && $.extend(i, t);
  var o = [],
   r = [];
  if (i.sortName && (o = i.sortName.split(","), r = i.sortOrder.split(",")), "string" == typeof t) {
   var d = t,
    s = _5c4(e, d);
   if (!s.sortable || n.resizing) return;
   var l = s.order || "asc",
    c = _56a(o, d);
   if (c >= 0) {
    var u = "asc" == r[c] ? "desc" : "asc";
    a.multiSort && u == l ? (o.splice(c, 1), r.splice(c, 1)) : r[c] = u
   } else a.multiSort ? (o.push(d), r.push(l)) : (o = [d], r = [l]);
   i.sortName = o.join(","), i.sortOrder = r.join(",")
  }
  if (0 != a.onBeforeSortColumn.call(e, i.sortName, i.sortOrder)) {
   $.extend(a, i);
   var h = n.dc,
    f = h.header1.add(h.header2);
   f.find("div.datagrid-cell").removeClass("datagrid-sort-asc datagrid-sort-desc");
   for (var p = 0; p < o.length; p++) {
    var s = _5c4(e, o[p]);
    f.find("div." + s.cellClass).addClass("datagrid-sort-" + r[p])
   }
   a.remoteSort ? _5f5(e) : _5f6(e, $(e).datagrid("getData")), a.onSortColumn.call(e, a.sortName, a.sortOrder)
  }
 }

 function _5f7(e) {
  function t() {
   if (r.fitColumns) {
    o.leftWidth || (o.leftWidth = 0);
    for (var t = 0, n = [], a = _5c3(e, !1), d = 0; d < a.length; d++) {
     var l = _5c4(e, a[d]);
     i(l) && (t += l.width, n.push({
      field: l.field,
      col: l,
      addingWidth: 0
     }))
    }
    if (t) {
     n[n.length - 1].addingWidth -= o.leftWidth;
     var c = s.children("div.datagrid-header-inner").show(),
      u = s.width() - s.find("table").width() - r.scrollbarSize + o.leftWidth,
      h = u / t;
     r.showHeader || c.hide();
     for (var d = 0; d < n.length; d++) {
      var f = n[d],
       p = parseInt(f.col.width * h);
      f.addingWidth += p, u -= p
     }
     n[n.length - 1].addingWidth += u;
     for (var d = 0; d < n.length; d++) {
      var f = n[d];
      f.col.boxWidth + f.addingWidth > 0 && (f.col.boxWidth += f.addingWidth, f.col.width += f.addingWidth)
     }
     o.leftWidth = u, _613(e)
    }
   }
  }

  function n(t) {
   var n = d.header1.add(d.header2).find(".datagrid-cell-group");
   n.length && (n.each(function() {
    $(this)._outerWidth(t ? $(this).parent().width() : 10)
   }), t && _582(e))
  }

  function a() {
   var t = !1,
    n = _5c3(e, !0).concat(_5c3(e, !1));
   $.map(n, function(n) {
    var a = _5c4(e, n);
    if (String(a.width || "").indexOf("%") >= 0) {
     var i = $.parser.parseValue("width", a.width, d.view, r.scrollbarSize) - a.deltaWidth;
     i > 0 && (a.boxWidth = i, t = !0)
    }
   }), t && _613(e)
  }

  function i(e) {
   return String(e.width || "").indexOf("%") >= 0 ? !1 : e.hidden || e.checkbox || e.auto || e.fixed ? void 0 : !0
  }
  var o = $.data(e, "datagrid"),
   r = o.options,
   d = o.dc,
   s = d.view2.children("div.datagrid-header");
  d.body2.css("overflow-x", ""), n(), a(), t(), n(!0), s.width() >= s.find("table").width() && d.body2.css("overflow-x", "hidden")
 }

 function _607(e, t) {
  function n(t) {
   function n(n) {
    function o(e) {
     return e.is(":visible") ? e._outerWidth() : r.html(e.html())._outerWidth()
    }
    var d = 0;
    return "header" == n ? d = o(a) : i.finder.getTr(e, 0, n).find('td[field="' + t + '"] div.datagrid-cell').each(function() {
     var e = o($(this));
     e > d && (d = e)
    }), d
   }
   var a = o.view.find('div.datagrid-header td[field="' + t + '"] div.datagrid-cell');
   a.css("width", "");
   var d = $(e).datagrid("getColumnOption", t);
   d.width = void 0, d.boxWidth = void 0, d.auto = !0, $(e).datagrid("fixColumnSize", t);
   var s = Math.max(n("header"), n("allbody"), n("allfooter")) + 1;
   a._outerWidth(s - 1), d.width = s, d.boxWidth = parseInt(a[0].style.width), d.deltaWidth = s - d.boxWidth, a.css("width", ""), $(e).datagrid("fixColumnSize", t), i.onResizeColumn.call(e, t, d.width)
  }
  var a = $.data(e, "datagrid"),
   i = a.options,
   o = a.dc,
   r = $('<div class="datagrid-cell" style="position:absolute;left:-9999px"></div>').appendTo("body");
  if (t) n(t), i.fitColumns && (_582(e), _5f7(e));
  else {
   for (var d = !1, s = _5c3(e, !0).concat(_5c3(e, !1)), l = 0; l < s.length; l++) {
    var t = s[l],
     c = _5c4(e, t);
    c.auto && (n(t), d = !0)
   }
   d && i.fitColumns && (_582(e), _5f7(e))
  }
  r.remove()
 }

 function _613(e, t) {
  function n(t) {
   var n = _5c4(e, t);
   n.cellClass && a.ss.set("." + n.cellClass, n.boxWidth ? n.boxWidth + "px" : "auto")
  }
  var a = $.data(e, "datagrid"),
   i = (a.options, a.dc),
   o = i.view.find("table.datagrid-btable,table.datagrid-ftable");
  if (o.css("table-layout", "fixed"), t) n(t);
  else
   for (var r = _5c3(e, !0).concat(_5c3(e, !1)), d = 0; d < r.length; d++) n(r[d]);
  o.css("table-layout", "auto"), _618(e), _593(e), _619(e)
 }

 function _618(e) {
  var t = $.data(e, "datagrid").dc;
  t.view.find("td.datagrid-td-merged").each(function() {
   for (var t = $(this), n = t.attr("colspan") || 1, a = _5c4(e, t.attr("field")), i = a.boxWidth + a.deltaWidth - 1, o = 1; n > o; o++) t = t.next(), a = _5c4(e, t.attr("field")), i += a.boxWidth + a.deltaWidth;
   $(this).children("div.datagrid-cell")._outerWidth(i)
  })
 }

 function _619(e) {
  var t = $.data(e, "datagrid").dc;
  t.view.find("div.datagrid-editable").each(function() {
   var t = $(this),
    n = t.parent().attr("field"),
    a = $(e).datagrid("getColumnOption", n);
   t._outerWidth(a.boxWidth + a.deltaWidth - 1);
   var i = $.data(this, "datagrid.editor");
   i.actions.resize && i.actions.resize(i.target, t.width())
  })
 }

 function _5c4(e, t) {
  function n(e) {
   if (e)
    for (var n = 0; n < e.length; n++)
     for (var a = e[n], i = 0; i < a.length; i++) {
      var o = a[i];
      if (o.field == t) return o
     }
   return null
  }
  var a = $.data(e, "datagrid").options,
   i = n(a.columns);
  return i || (i = n(a.frozenColumns)), i
 }

 function _5c3(e, t) {
  function n() {
   var e = 0;
   return $.map(o[0], function(t) {
    e += t.colspan || 1
   }), e
  }

  function a(e) {
   for (var t = 0; t < e.length; t++)
    if (void 0 == e[t]) return t;
   return -1
  }
  
    
  var i = $.data(e, "datagrid").options,
   o = 1 == t ? i.frozenColumns || [[]] : i.columns;
  if (0 == o.length) return [];
  for (var r = [], d = n(), s = 0; s < o.length; s++) r[s] = new Array(d);
  for (var l = 0; l < o.length; l++) $.map(o[l], function(e) {
   var t = a(r[l]);
   if (t >= 0)
    for (var n = e.field || "", i = 0; i < (e.colspan || 1); i++) {
     for (var o = 0; o < (e.rowspan || 1); o++) {
         if (typeof r[l + o] != 'undefined')
            r[l + o][t] = n;
     }
     t++
    }
  });
  return r[r.length - 1]
 }

 function _5f6(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = n.dc;
  if (t = a.loadFilter.call(e, t), t.total = parseInt(t.total), n.data = t, t.footer && (n.footer = t.footer), !a.remoteSort && a.sortName) {
   var o = a.sortName.split(","),
    r = a.sortOrder.split(",");
   t.rows.sort(function(t, n) {
    for (var a = 0, i = 0; i < o.length; i++) {
     var d = o[i],
      s = r[i],
      l = _5c4(e, d),
      c = l.sorter || function(e, t) {
       return e == t ? 0 : e > t ? 1 : -1
      };
     if (a = c(t[d], n[d]) * ("asc" == s ? 1 : -1), 0 != a) return a
    }
    return a
   })
  }
  a.view.onBeforeRender && a.view.onBeforeRender.call(a.view, e, t.rows), a.view.render.call(a.view, e, i.body2, !1), a.view.render.call(a.view, e, i.body1, !0), a.showFooter && (a.view.renderFooter.call(a.view, e, i.footer2, !1), a.view.renderFooter.call(a.view, e, i.footer1, !0)), a.view.onAfterRender && a.view.onAfterRender.call(a.view, e), n.ss.clean();
  var d = $(e).datagrid("getPager");
  if (d.length) {
   var s = d.pagination("options");
   s.total != t.total && (d.pagination("refresh", {
    total: t.total
   }), a.pageNumber != s.pageNumber && s.pageNumber > 0 && (a.pageNumber = s.pageNumber, _5f5(e)))
  }
  _593(e), i.body2.triggerHandler("scroll"), $(e).datagrid("setSelectionState"), $(e).datagrid("autoSizeColumn"), a.onLoadSuccess.call(e, t)
 }

 function _634(e) {
  function t(e, t) {
   for (var n = 0; n < e.length; n++)
    if (e[n][a.idField] == t[a.idField]) return e[n] = t, !0;
   return !1
  }
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = n.dc;
  if (i.header1.add(i.header2).find("input[type=checkbox]")._propAttr("checked", !1), a.idField) {
   var o = $.data(e, "treegrid") ? !0 : !1,
    r = a.onSelect,
    d = a.onCheck;
   a.onSelect = a.onCheck = function() {};
   for (var s = a.finder.getRows(e), l = 0; l < s.length; l++) {
    var c = s[l],
     u = o ? c[a.idField] : l;
    t(n.selectedRows, c) && _5df(e, u, !0), t(n.checkedRows, c) && _5dc(e, u, !0)
   }
   a.onSelect = r, a.onCheck = d
  }
 }

 function _63c(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = n.data.rows;
  if ("object" == typeof t) return _56a(i, t);
  for (var o = 0; o < i.length; o++)
   if (i[o][a.idField] == t) return o;
  return -1
 }

 function _63f(e) {
  var t = $.data(e, "datagrid"),
   n = t.options;
  t.data;
  if (n.idField) return t.selectedRows;
  var a = [];
  return n.finder.getTr(e, "", "selected", 2).each(function() {
   a.push(n.finder.getRow(e, $(this)))
  }), a
 }

 function _642(e) {
  var t = $.data(e, "datagrid"),
   n = t.options;
  if (n.idField) return t.checkedRows;
  var a = [];
  return n.finder.getTr(e, "", "checked", 2).each(function() {
   a.push(n.finder.getRow(e, $(this)))
  }), a
 }

 function _645(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.dc,
   i = n.options,
   o = i.finder.getTr(e, t);
  if (o.length) {
   if (o.closest("table").hasClass("datagrid-btable-frozen")) return;
   var r = a.view2.children("div.datagrid-header")._outerHeight(),
    d = a.body2,
    s = d.outerHeight(!0) - d.outerHeight(),
    l = o.position().top - r - s;
   /*[2016-11-25] 0 > l ? d.scrollTop(d.scrollTop() + l) : l + o._outerHeight() > d.height() - 18 && d.scrollTop(d.scrollTop() + l + o._outerHeight() - d.height() + 18)*/
  }
 }

 function _5d8(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options;
  a.finder.getTr(e, n.highlightIndex).removeClass("datagrid-row-over"), a.finder.getTr(e, t).addClass("datagrid-row-over"), n.highlightIndex = t
 }

 function _5df(e, t, n) {
  var a = $.data(e, "datagrid"),
   i = a.options,
   o = i.finder.getRow(e, t);
  0 != i.onBeforeSelect.call(e, t, o) && (i.singleSelect && (_653(e, !0), a.selectedRows = []), !n && i.checkOnSelect && _5dc(e, t, !0), i.idField && _56d(a.selectedRows, i.idField, o), i.finder.getTr(e, t).addClass("datagrid-row-selected"), i.onSelect.call(e, t, o), _645(e, t))
 }

 function _5e0(e, t, n) {
  var a = $.data(e, "datagrid"),
   i = (a.dc, a.options),
   o = i.finder.getRow(e, t);
  0 != i.onBeforeUnselect.call(e, t, o) && (!n && i.checkOnSelect && _5dd(e, t, !0), i.finder.getTr(e, t).removeClass("datagrid-row-selected"), i.idField && _56b(a.selectedRows, i.idField, o[i.idField]), i.onUnselect.call(e, t, o))
 }

 function _658(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = a.finder.getRows(e),
   o = $.data(e, "datagrid").selectedRows;
  if (!t && a.checkOnSelect && _65d(e, !0), a.finder.getTr(e, "", "allbody").addClass("datagrid-row-selected"), a.idField)
   for (var r = 0; r < i.length; r++) _56d(o, a.idField, i[r]);
  a.onSelectAll.call(e, i)
 }

 function _653(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = a.finder.getRows(e),
   o = $.data(e, "datagrid").selectedRows;
  if (!t && a.checkOnSelect && _663(e, !0), a.finder.getTr(e, "", "selected").removeClass("datagrid-row-selected"), a.idField)
   for (var r = 0; r < i.length; r++) _56b(o, a.idField, i[r][a.idField]);
  a.onUnselectAll.call(e, i)
 }

 function _5dc(e, t, n) {
  var a = $.data(e, "datagrid"),
   i = a.options,
   o = i.finder.getRow(e, t);
  if (0 != i.onBeforeCheck.call(e, t, o)) {
   i.singleSelect && i.selectOnCheck && (_663(e, !0), a.checkedRows = []), !n && i.selectOnCheck && _5df(e, t, !0);
   var r = i.finder.getTr(e, t).addClass("datagrid-row-checked");
   if (r.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", !0), r = i.finder.getTr(e, "", "checked", 2), r.length == i.finder.getRows(e).length) {
    var d = a.dc;
    d.header1.add(d.header2).find("input[type=checkbox]")._propAttr("checked", !0)
   }
   i.idField && _56d(a.checkedRows, i.idField, o), i.onCheck.call(e, t, o)
  }
 }

 function _5dd(e, t, n) {
  var a = $.data(e, "datagrid"),
   i = a.options,
   o = i.finder.getRow(e, t);
  if (0 != i.onBeforeUncheck.call(e, t, o)) {
   !n && i.selectOnCheck && _5e0(e, t, !0);
   var r = i.finder.getTr(e, t).removeClass("datagrid-row-checked");
   r.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", !1);
   var d = a.dc,
    s = d.header1.add(d.header2);
   s.find("input[type=checkbox]")._propAttr("checked", !1), i.idField && _56b(a.checkedRows, i.idField, o[i.idField]), i.onUncheck.call(e, t, o)
  }
 }

 function _65d(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = a.finder.getRows(e);
  !t && a.selectOnCheck && _658(e, !0);
  var o = n.dc,
   r = o.header1.add(o.header2).find("input[type=checkbox]"),
   d = a.finder.getTr(e, "", "allbody").addClass("datagrid-row-checked").find("div.datagrid-cell-check input[type=checkbox]");
  if (r.add(d)._propAttr("checked", !0), a.idField)
   for (var s = 0; s < i.length; s++) _56d(n.checkedRows, a.idField, i[s]);
  a.onCheckAll.call(e, i)
 }

 function _663(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = a.finder.getRows(e);
  !t && a.selectOnCheck && _653(e, !0);
  var o = n.dc,
   r = o.header1.add(o.header2).find("input[type=checkbox]"),
   d = a.finder.getTr(e, "", "checked").removeClass("datagrid-row-checked").find("div.datagrid-cell-check input[type=checkbox]");
  if (r.add(d)._propAttr("checked", !1), a.idField)
   for (var s = 0; s < i.length; s++) _56b(n.checkedRows, a.idField, i[s][a.idField]);
  a.onUncheckAll.call(e, i)
 }

 function _674(e, t) {
  var n = $.data(e, "datagrid").options,
   a = n.finder.getTr(e, t),
   i = n.finder.getRow(e, t);
  a.hasClass("datagrid-row-editing") || 0 != n.onBeforeEdit.call(e, t, i) && (a.addClass("datagrid-row-editing"), _677(e, t), _619(e), a.find("div.datagrid-editable").each(function() {
   var e = $(this).parent().attr("field"),
    t = $.data(this, "datagrid.editor");
   t.actions.setValue(t.target, i[e])
  }), _679(e, t), n.onBeginEdit.call(e, t, i))
 }

 function _67a(e, t, n) {
  var a = $.data(e, "datagrid"),
   i = a.options,
   o = a.updatedRows,
   r = a.insertedRows,
   d = i.finder.getTr(e, t),
   s = i.finder.getRow(e, t);
  if (d.hasClass("datagrid-row-editing")) {
   if (!n) {
    if (!_679(e, t)) return;
    var l = !1,
     c = {};
    d.find("div.datagrid-editable").each(function() {
     var e = $(this).parent().attr("field"),
      t = $.data(this, "datagrid.editor"),
      n = $(t.target),
      a = n.data("textbox") ? n.textbox("textbox") : n;
     a.triggerHandler("blur");
     var i = t.actions.getValue(t.target);
     s[e] != i && (s[e] = i, l = !0, c[e] = i)
    }), l && -1 == _56a(r, s) && -1 == _56a(o, s) && o.push(s), i.onEndEdit.call(e, t, s, c)
   }
   d.removeClass("datagrid-row-editing"), _686(e, t), $(e).datagrid("refreshRow", t), n ? i.onCancelEdit.call(e, t, s) : i.onAfterEdit.call(e, t, s, c)
  }
 }

 function _687(e, t) {
  var n = $.data(e, "datagrid").options,
   a = n.finder.getTr(e, t),
   i = [];
  return a.children("td").each(function() {
   var e = $(this).find("div.datagrid-editable");
   if (e.length) {
    var t = $.data(e[0], "datagrid.editor");
    i.push(t)
   }
  }), i
 }

 function _68b(e, t) {
  for (var n = _687(e, void 0 != t.index ? t.index : t.id), a = 0; a < n.length; a++)
   if (n[a].field == t.field) return n[a];
  return null
 }

 function _677(e, t) {
  var n = $.data(e, "datagrid").options,
   a = n.finder.getTr(e, t);
  a.children("td").each(function() {
   var t = $(this).find("div.datagrid-cell"),
    a = $(this).attr("field"),
    i = _5c4(e, a);
   if (i && i.editor) {
    var o, r;
    "string" == typeof i.editor ? o = i.editor : (o = i.editor.type, r = i.editor.options);
    var d = n.editors[o];
    if (d) {
     var s = t.html(),
      l = t._outerWidth();
     t.addClass("datagrid-editable"), t._outerWidth(l), t.html('<table border="0" cellspacing="0" cellpadding="1"><tr><td></td></tr></table>'), t.children("table").bind("click dblclick contextmenu", function(e) {
      e.stopPropagation()
     }), $.data(t[0], "datagrid.editor", {
      actions: d,
      target: d.init(t.find("td"), r),
      field: a,
      type: o,
      oldHtml: s
     })
    }
   }
  }), _593(e, t, !0)
 }

 function _686(e, t) {
  var n = $.data(e, "datagrid").options,
   a = n.finder.getTr(e, t);
  a.children("td").each(function() {
   var e = $(this).find("div.datagrid-editable");
   if (e.length) {
    var t = $.data(e[0], "datagrid.editor");
    t.actions.destroy && t.actions.destroy(t.target), e.html(t.oldHtml), $.removeData(e[0], "datagrid.editor"), e.removeClass("datagrid-editable"), e.css("width", "")
   }
  })
 }

 function _679(e, t) {
  var n = $.data(e, "datagrid").options.finder.getTr(e, t);
  if (!n.hasClass("datagrid-row-editing")) return !0;
  var a = n.find(".validatebox-text");
  a.validatebox("validate"), a.trigger("mouseleave");
  var i = n.find(".validatebox-invalid");
  return 0 == i.length
 }

 function _69c(e, t) {
  var n = $.data(e, "datagrid").insertedRows,
   a = $.data(e, "datagrid").deletedRows,
   i = $.data(e, "datagrid").updatedRows;
  if (!t) {
   var o = [];
   return o = o.concat(n), o = o.concat(a), o = o.concat(i)
  }
  return "inserted" == t ? n : "deleted" == t ? a : "updated" == t ? i : []
 }

 function _6a2(e, t) {
  var n = $.data(e, "datagrid"),
   a = n.options,
   i = n.data,
   o = n.insertedRows,
   r = n.deletedRows;
  $(e).datagrid("cancelEdit", t);
  var d = a.finder.getRow(e, t);
  _56a(o, d) >= 0 ? _56b(o, d) : r.push(d), _56b(n.selectedRows, a.idField, d[a.idField]), _56b(n.checkedRows, a.idField, d[a.idField]), a.view.deleteRow.call(a.view, e, t), "auto" == a.height && _593(e), $(e).datagrid("getPager").pagination("refresh", {
   total: i.total
  })
 }

 function _6a8(e, t) {
  var n = $.data(e, "datagrid").data,
   a = $.data(e, "datagrid").options.view,
   i = $.data(e, "datagrid").insertedRows;
  a.insertRow.call(a, e, t.index, t.row), i.push(t.row), $(e).datagrid("getPager").pagination("refresh", {
   total: n.total
  })
 }

 function _6ac(e, t) {
  var n = $.data(e, "datagrid").data,
   a = $.data(e, "datagrid").options.view,
   i = $.data(e, "datagrid").insertedRows;
  a.insertRow.call(a, e, null, t), i.push(t), $(e).datagrid("getPager").pagination("refresh", {
   total: n.total
  })
 }

 function _6af(e) {
  for (var t = $.data(e, "datagrid"), n = t.data, a = n.rows, i = [], o = 0; o < a.length; o++) i.push($.extend({}, a[o]));
  t.originalRows = i, t.updatedRows = [], t.insertedRows = [], t.deletedRows = []
 }

 function _6b3(e) {
  for (var t = $.data(e, "datagrid").data, n = !0, a = 0, i = t.rows.length; i > a; a++) _679(e, a) ? $(e).datagrid("endEdit", a) : n = !1;
  n && _6af(e)
 }

 function _6b5(e) {
  function t(e) {
   for (var t = [], n = 0; n < e.length; n++) t.push(e[n][i.idField]);
   return t
  }

  function n(t, n) {
   for (var a = 0; a < t.length; a++) {
    var i = _63c(e, t[a]);
    i >= 0 && ("s" == n ? _5df : _5dc)(e, i, !0)
   }
  }
  for (var a = $.data(e, "datagrid"), i = a.options, o = a.originalRows, r = a.insertedRows, d = a.deletedRows, s = a.selectedRows, l = a.checkedRows, c = a.data, u = 0; u < c.rows.length; u++) $(e).datagrid("cancelEdit", u);
  var h = t(s),
   f = t(l);
  s.splice(0, s.length), l.splice(0, l.length), c.total += d.length - r.length, c.rows = o, _5f6(e, c), n(h, "s"), n(f, "c"), _6af(e)
 }

 function _5f5(e, t) {
  function n() {
   var t = a.loader.call(e, i, function(t) {
    setTimeout(function() {
     $(e).datagrid("loaded")
    }, 0), _5f6(e, t), setTimeout(function() {
     _6af(e)
    }, 0)
   }, function() {
    setTimeout(function() {
     $(e).datagrid("loaded")
    }, 0), a.onLoadError.apply(e, arguments)
   });
   0 == t && $(e).datagrid("loaded")
  }
  var a = $.data(e, "datagrid").options;
  t && (a.queryParams = t);
  var i = $.extend({}, a.queryParams);
  a.pagination && $.extend(i, {
   page: a.pageNumber || 1,
   rows: a.pageSize
  }), a.sortName && $.extend(i, {
   sort: a.sortName,
   order: a.sortOrder
  }), 0 != a.onBeforeLoad.call(e, i) && ($(e).datagrid("loading"), setTimeout(function() {
   n()
  }, 0))
 }

 function _6c8(e, t) {
  function n(e, t) {
   for (var n = 0; t > n; n++) e.addClass('datagrid-td-merged-hidden'), e.hide(), e = e.next()
  }
  
  var isTree = false;
  if (t.hasOwnProperty('rowId')) {
      isTree = true;
      var a = $.data(e, "treegrid").options;
  } else {
      var a = $.data(e, "datagrid").options;
  }

  if (t.type = t.type || "body", t.rowspan = t.rowspan || 1, t.colspan = t.colspan || 1, 1 != t.rowspan || 1 != t.colspan) {
      
   var i = isTree ? a.finder.getTr(e, t.rowId, 'body') : a.finder.getTr(e, void 0 != t.index ? t.index : t.id, t.type);

   if (i.length) {
    
    var o = i.find('td[field="' + t.field + '"]');
    o.attr("rowspan", t.rowspan).attr("colspan", t.colspan), o.addClass("datagrid-td-merged"), n(o.next(), t.colspan - 1);   
    for (var r = 1; r < t.rowspan && (i = i.next(), i.length); r++) 
      if(i.find('.datagrid-row-detail').length === 0)
        o = i.find('td[field="' + t.field + '"]'), n(o, t.colspan);
      else
        r--      
    _618(e)
   }
  }
 }

 function _6d1(e) {
  function t(e) {
   function t(t) {
    return void 0 != $.data($(t)[0], e)
   }
   return {
    init: function(t, n) {
     var a = $('<input type="text" class="datagrid-editable-input">').appendTo(t);
     return a[e] && "text" != e ? a[e](n) : a
    },
    destroy: function(n) {
     t(n, e) && $(n)[e]("destroy")
    },
    getValue: function(n) {
     if (t(n, e)) {
      var a = $(n)[e]("options");
      return a.multiple ? $(n)[e]("getValues").join(a.separator) : $(n)[e]("getValue")
     }
     return $(n).val()
    },
    setValue: function(n, a) {
     if (t(n, e)) {
      var i = $(n)[e]("options");
      i.multiple ? a ? $(n)[e]("setValues", a.split(i.separator)) : $(n)[e]("clear") : $(n)[e]("setValue", a)
     } else $(n).val(a)
    },
    resize: function(n, a) {
     t(n, e) ? $(n)[e]("resize", a) : $(n)._outerWidth(a)._outerHeight(22)
    }
   }
  }
  var n = {};
  return $.map(e, function(e) {
   n[e] = t(e)
  }), n
 }
 var _569 = 0;
 $.fn.datagrid = function(e, t) {
  return "string" == typeof e ? $.fn.datagrid.methods[e](this, t) : (e = e || {}, this.each(function() {
   var t, n = $.data(this, "datagrid");
   if (n) t = $.extend(n.options, e), n.options = t;
   else {
    t = $.extend({}, $.extend({}, $.fn.datagrid.defaults, {
     queryParams: {}
    }), $.fn.datagrid.parseOptions(this), e), $(this).css("width", "").css("height", "");
    var a = _5a7(this, t.rownumbers);
    t.columns || (t.columns = a.columns), t.frozenColumns || (t.frozenColumns = a.frozenColumns), t.columns = $.extend(!0, [], t.columns), t.frozenColumns = $.extend(!0, [], t.frozenColumns), t.view = $.extend({}, t.view), $.data(this, "datagrid", {
     options: t,
     panel: a.panel,
     dc: a.dc,
     ss: null,
     selectedRows: [],
     checkedRows: [],
     data: {
      total: 0,
      rows: []
     },
     originalRows: [],
     updatedRows: [],
     insertedRows: [],
     deletedRows: []
    })
   }
   if (_5b0(this), _5c5(this), _57d(this), t.data) _5f6(this, t.data), _6af(this);
   else {
    var i = $.fn.datagrid.parseData(this);
    i.total > 0 && (_5f6(this, i), _6af(this))
   }
   _5f5(this)
  }))
 };
 var _6df = $.extend({}, _6d1(["text", "textbox", "numberbox", "numberspinner", "combobox", "combotree", "combogrid", "datebox", "datetimebox", "timespinner", "datetimespinner"]), {
  textarea: {
   init: function(e, t) {
    var n = $('<textarea class="datagrid-editable-input"></textarea>').appendTo(e);
    return n
   },
   getValue: function(e) {
    return $(e).val()
   },
   setValue: function(e, t) {
    $(e).val(t)
   },
   resize: function(e, t) {
    $(e)._outerWidth(t)
   }
  },
  checkbox: {
   init: function(e, t) {
    var n = $('<input type="checkbox">').appendTo(e);
    return n.val(t.on), n.attr("offval", t.off), n
   },
   getValue: function(e) {
    return $(e).is(":checked") ? $(e).val() : $(e).attr("offval")
   },
   setValue: function(e, t) {
    var n = !1;
    $(e).val() == t && (n = !0), $(e)._propAttr("checked", n)
   }
  },
  validatebox: {
   init: function(e, t) {
    var n = $('<input type="text" class="datagrid-editable-input">').appendTo(e);
    return n.validatebox(t), n
   },
   destroy: function(e) {
    $(e).validatebox("destroy")
   },
   getValue: function(e) {
    return $(e).val()
   },
   setValue: function(e, t) {
    $(e).val(t)
   },
   resize: function(e, t) {
    $(e)._outerWidth(t)._outerHeight(22)
   }
  }
 });
 $.fn.datagrid.methods = {
  options: function(e) {
   var t = $.data(e[0], "datagrid").options,
    n = $.data(e[0], "datagrid").panel.panel("options"),
    a = $.extend(t, {
     width: n.width,
     height: n.height,
     closed: n.closed,
     collapsed: n.collapsed,
     minimized: n.minimized,
     maximized: n.maximized
    });
   return a
  },
  setSelectionState: function(e) {
   return e.each(function() {
    _634(this)
   })
  },
  createStyleSheet: function(e) {
   return _56e(e[0])
  },
  getPanel: function(e) {
   return $.data(e[0], "datagrid").panel
  },
  getPager: function(e) {
   return $.data(e[0], "datagrid").panel.children("div.datagrid-pager")
  },
  getColumnFields: function(e, t) {
   return _5c3(e[0], t)
  },
  getColumnOption: function(e, t) {
   return _5c4(e[0], t)
  },
  resize: function(e, t) {
   return e.each(function() {
    _57d(this, t)
   })
  },
  load: function(e, t) {
   return e.each(function() {
    var e = $(this).datagrid("options");
    "string" == typeof t && (e.url = t, t = null), e.pageNumber = 1;
    var n = $(this).datagrid("getPager");
    n.pagination("refresh", {
     pageNumber: 1
    }), _5f5(this, t)
   })
  },
  reload: function(e, t) {
   return e.each(function() {
    var e = $(this).datagrid("options");
    "string" == typeof t && (e.url = t, t = null), _5f5(this, t)
   })
  },
  reloadFooter: function(e, t) {
   return e.each(function() {
    var e = $.data(this, "datagrid").options,
     n = $.data(this, "datagrid").dc;
    t && ($.data(this, "datagrid").footer = t), e.showFooter && (e.view.renderFooter.call(e.view, this, n.footer2, !1), e.view.renderFooter.call(e.view, this, n.footer1, !0), e.view.onAfterRender && e.view.onAfterRender.call(e.view, this), $(this).datagrid("fixRowHeight"))
   })
  },
  loading: function(e) {
   return e.each(function() {
    var e = $.data(this, "datagrid").options;
    if ($(this).datagrid("getPager").pagination("loading"), e.loadMsg) {
     var t = $(this).datagrid("getPanel");
     if (!t.children("div.datagrid-mask").length && e.loadMsg !== 'no_text') {
      $('<div class="datagrid-mask" style="display:block"></div>').appendTo(t);
      var n = $('<div class="datagrid-mask-msg" style="display:block;left:50%"></div>').html(e.loadMsg).appendTo(t);
      n._outerHeight(40), n.css({
       marginLeft: -n.outerWidth() / 2,
       lineHeight: n.height() + "px"
      })
     }
    }
   })
  },
  loaded: function(e) {
   return e.each(function() {
    $(this).datagrid("getPager").pagination("loaded");
    var e = $(this).datagrid("getPanel");
    e.children("div.datagrid-mask-msg").remove(), e.children("div.datagrid-mask").remove()
   })
  },
  fitColumns: function(e) {
   return e.each(function() {
    _5f7(this)
   })
  },
  fixColumnSize: function(e, t) {
   return e.each(function() {
    _613(this, t)
   })
  },
  fixRowHeight: function(e, t) {
   return e.each(function() {
    _593(this, t)
   })
  },
  freezeRow: function(e, t) {
   return e.each(function() {
    _5a0(this, t)
   })
  },
  autoSizeColumn: function(e, t) {
   return e.each(function() {
    _607(this, t)
   })
  },
  loadData: function(e, t) {
   return e.each(function() {
    _5f6(this, t), _6af(this)
   })
  },
  getData: function(e) {
   return $.data(e[0], "datagrid").data
  },
  getRows: function(e) {
   return $.data(e[0], "datagrid").data.rows
  },
  getFooterRows: function(e) {
   return $.data(e[0], "datagrid").footer
  },
  getRowIndex: function(e, t) {
   return _63c(e[0], t)
  },
  getChecked: function(e) {
   return _642(e[0])
  },
  getSelected: function(e) {
   var t = _63f(e[0]);
   return t.length > 0 ? t[0] : null
  },
  getSelections: function(e) {
   return _63f(e[0])
  },
  clearSelections: function(e) {
   return e.each(function() {
    var e = $.data(this, "datagrid"),
     t = e.selectedRows,
     n = e.checkedRows;
    t.splice(0, t.length), _653(this), e.options.checkOnSelect && n.splice(0, n.length)
   })
  },
  clearChecked: function(e) {
   return e.each(function() {
    var e = $.data(this, "datagrid"),
     t = e.selectedRows,
     n = e.checkedRows;
    n.splice(0, n.length), _663(this), e.options.selectOnCheck && t.splice(0, t.length)
   })
  },
  scrollTo: function(e, t) {
   return e.each(function() {
    _645(this, t)
   })
  },
  highlightRow: function(e, t) {
   return e.each(function() {
    _5d8(this, t), _645(this, t)
   })
  },
  selectAll: function(e) {
   return e.each(function() {
    _658(this)
   })
  },
  unselectAll: function(e) {
   return e.each(function() {
    _653(this)
   })
  },
  selectRow: function(e, t) {
   return e.each(function() {
    _5df(this, t)
   })
  },
  selectRecord: function(e, t) {
   return e.each(function() {
    var e = $.data(this, "datagrid").options;
    if (e.idField) {
     var n = _63c(this, t);
     n >= 0 && $(this).datagrid("selectRow", n)
    }
   })
  },
  unselectRow: function(e, t) {
   return e.each(function() {
    _5e0(this, t)
   })
  },
  checkRow: function(e, t) {
   return e.each(function() {
    _5dc(this, t)
   })
  },
  uncheckRow: function(e, t) {
   return e.each(function() {
    _5dd(this, t)
   })
  },
  checkAll: function(e) {
   return e.each(function() {
    _65d(this)
   })
  },
  uncheckAll: function(e) {
   return e.each(function() {
    _663(this)
   })
  },
  beginEdit: function(e, t) {
   return e.each(function() {
    _674(this, t)
   })
  },
  endEdit: function(e, t) {
   return e.each(function() {
    _67a(this, t, !1)
   })
  },
  cancelEdit: function(e, t) {
   return e.each(function() {
    _67a(this, t, !0)
   })
  },
  getEditors: function(e, t) {
   return _687(e[0], t)
  },
  getEditor: function(e, t) {
   return _68b(e[0], t)
  },
  refreshRow: function(e, t) {
   return e.each(function() {
    var e = $.data(this, "datagrid").options;
    e.view.refreshRow.call(e.view, this, t)
   })
  },
  validateRow: function(e, t) {
   return _679(e[0], t)
  },
  updateRow: function(e, t) {
   return e.each(function() {
    var e = $.data(this, "datagrid").options;
    e.view.updateRow.call(e.view, this, t.index, t.row)
   })
  },
  appendRow: function(e, t) {
   return e.each(function() {
    _6ac(this, t)
   })
  },
  insertRow: function(e, t) {
   return e.each(function() {
    _6a8(this, t)
   })
  },
  deleteRow: function(e, t) {
   return e.each(function() {
    _6a2(this, t)
   })
  },
  getChanges: function(e, t) {
   return _69c(e[0], t)
  },
  acceptChanges: function(e) {
   return e.each(function() {
    _6b3(this)
   })
  },
  rejectChanges: function(e) {
   return e.each(function() {
    _6b5(this)
   })
  },
  mergeCells: function(e, t) {
   return e.each(function() {
    _6c8(this, t)
   })
  },
  showColumn: function(e, t) {
   return e.each(function() {
    var e = $(this).datagrid("getPanel");
    e.find('td[field="' + t + '"]').show(), $(this).datagrid("getColumnOption", t).hidden = !1, $(this).datagrid("fitColumns")
   })
  },
  hideColumn: function(e, t) {
   return e.each(function() {
    var e = $(this).datagrid("getPanel");
    e.find('td[field="' + t + '"]').hide(), $(this).datagrid("getColumnOption", t).hidden = !0, $(this).datagrid("fitColumns")
   })
  },
  sort: function(e, t) {
   return e.each(function() {
    _5ea(this, t)
   })
  }
 }, $.fn.datagrid.parseOptions = function(_725) {
  var t = $(_725);
  return $.extend({}, $.fn.panel.parseOptions(_725), $.parser.parseOptions(_725, ["url", "toolbar", "idField", "sortName", "sortOrder", "pagePosition", "resizeHandle", {
   sharedStyleSheet: "boolean",
   fitColumns: "boolean",
   autoRowHeight: "boolean",
   striped: "boolean",
   nowrap: "boolean"
  }, {
   rownumbers: "boolean",
   singleSelect: "boolean",
   ctrlSelect: "boolean",
   checkOnSelect: "boolean",
   selectOnCheck: "boolean"
  }, {
   pagination: "boolean",
   pageSize: "number",
   pageNumber: "number"
  }, {
   multiSort: "boolean",
   remoteSort: "boolean",
   showHeader: "boolean",
   showFooter: "boolean"
  }, {
   scrollbarSize: "number"
  }]), {
   pageList: t.attr("pageList") ? eval(t.attr("pageList")) : void 0,
   loadMsg: void 0 != t.attr("loadMsg") ? t.attr("loadMsg") : void 0,
   rowStyler: t.attr("rowStyler") ? eval(t.attr("rowStyler")) : void 0
  })
 }, $.fn.datagrid.parseData = function(e) {
  var t = $(e),
   n = {
    total: 0,
    rows: []
   },
   a = t.datagrid("getColumnFields", !0).concat(t.datagrid("getColumnFields", !1));
  return t.find("tbody tr").each(function() {
   n.total++;
   var e = {};
   $.extend(e, $.parser.parseOptions(this, ["iconCls", "state"]));
   for (var t = 0; t < a.length; t++) e[a[t]] = $(this).find("td:eq(" + t + ")").html();
   n.rows.push(e)
  }), n
 };
 var _728 = {
  render: function(e, t, n) {
   var a = $.data(e, "datagrid"),
    i = a.options,
    o = a.data.rows,
    r = $(e).datagrid("getColumnFields", n);
   if (!n || i.rownumbers || i.frozenColumns && i.frozenColumns.length) {
    var d = ['<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>'];   
    for (var s = 0; s < o.length; s++) {
     var l = i.rowStyler ? i.rowStyler.call(e, s, o[s]) : "",
      c = "",
      u = "";
     "string" == typeof l ? u = l : l && (c = l["class"] || "", u = l.style || "");
     var h = 'class="datagrid-row ' + (s % 2 && i.striped ? "datagrid-row-alt " : " ") + c + '"',
      f = u ? 'style="' + u + '"' : "",
      p = a.rowIdPrefix + "-" + (n ? 1 : 2) + "-" + s;
     d.push('<tr id="' + p + '" datagrid-row-index="' + s + '" ' + h + " " + f + ">"), d.push(this.renderRow.call(this, e, r, n, s, o[s])), d.push("</tr>")
    }
    d.push("</tbody></table>"), $(t)[0].innerHTML = d.join("")
   }
  },
  renderFooter: function(e, t, n) {
   for (var a = ($.data(e, "datagrid").options, $.data(e, "datagrid").footer || []), i = $(e).datagrid("getColumnFields", n), o = ['<table class="datagrid-ftable" cellspacing="0" cellpadding="0" border="0"><tbody>'], r = 0; r < a.length; r++) o.push('<tr class="datagrid-row" datagrid-row-index="' + r + '">'), o.push(this.renderRow.call(this, e, i, n, r, a[r])), o.push("</tr>");
   o.push("</tbody></table>"), $(t)[0].innerHTML = o.join("")
  },
  renderRow: function(e, t, n, a, i) {
    var o = $.data(e, "datagrid").options, r = [], tLength = t.length;
    if (n && o.rownumbers) {
        var d = parseInt(a) + 1;
        o.pagination && (d += (o.pageNumber - 1) * o.pageSize), r.push('<td class="datagrid-td-rownumber"><div class="datagrid-cell-rownumber">' + d + ".</div></td>")
    }
    for (var s = 0; s < tLength; s++) {
        var l = t[s], c = $(e).datagrid("getColumnOption", l);
        if (c) {
            var u = i[l],
                h = c.styler ? c.styler(u, i, a) || "" : "",
                f = "",
                p = "";
            "string" == typeof h ? p = h : h && (f = h["class"] || "", p = h.style || "");
            var g = f ? 'class="' + f + '"' : "",
            v = c.hidden ? 'style="display:none;' + p + '"' : p ? 'style="' + p + '"' : "";
            r.push('<td field="' + l + '" ' + g + ' ' + v + '>');
            var v = "";
            c.checkbox || (c.align && (v += "text-align:" + c.align + ";"), o.nowrap ? o.autoRowHeight && (v += "height:auto;") : v += "white-space:normal;height:auto;"), r.push('<div style="' + v + '" '), r.push(c.checkbox ? 'class="datagrid-cell-check"' : 'class="datagrid-cell ' + c.cellClass + '"'), r.push(">"), c.checkbox ? (r.push('<input type="checkbox" ' + (i.checked ? 'checked="checked"' : "")), r.push(' name="' + l + '" value="' + (void 0 != u ? u : "") + '">')) : c.formatter ? r.push(c.formatter(u, i, a)) : r.push(u), r.push("</div>"), r.push("</td>")
        }
    }
    return r.join("")
  },
    vrRenderRow: function(target, fields, frozen, rowIndex, rowData){
            var opts = $.data(target, 'datagrid').options;
            var cc = [];
            var minusWidth = 9;
            
            if (frozen && opts.rownumbers) {
                var rownumber = rowIndex + 1;
                if (opts.pagination){
                    rownumber += (opts.pageNumber-1)*opts.pageSize;
                }
                cc.push('<td class="datagrid-td-rownumber"><div class="datagrid-cell-rownumber">'+rownumber+'.</div></td>');
            }
            if (opts.frozenColumns && opts.frozenColumns[0] && opts.frozenColumns[0][0] && opts.frozenColumns[0][0]['field'] == 'ck') {
                minusWidth = 25;
            }
            
            for (var i=0; i<fields.length; i++) {
                var field = fields[i];
                var col = $(target).datagrid('getColumnOption', field);
                if (col){
                    var value = rowData[field];	/* the field value*/
                    var css = col.styler ? (col.styler(value, rowData, rowIndex)||'') : '';
                    var classValue = '';
                    var styleValue = '';
                    if (typeof css == 'string'){
                        styleValue = css;
                    } else if (cc){
                        classValue = css['class'] || '';
                        styleValue = css['style'] || '';
                    }
                    var cls = classValue ? 'class="' + classValue + '"' : '';
                    var style = col.hidden ? 'style="display:none;' + styleValue + '"' : (styleValue ? 'style="' + styleValue + '"' : '');
                    var colWidth = col.width;

                    if (i === 0) {
                        colWidth = colWidth - minusWidth;
                    }
                    cc.push('<td style="width:' + colWidth + 'px;max-width:' + colWidth + 'px" class="text-right">');

                    if (col.checkbox){
                        style = '';
                    } else if (col.expander){
                        style = "text-align:center;height:16px;";
                    } else {
                        style = styleValue;
                        if (col.align){style += ';text-align:' + col.align + ';'}
                        if (!opts.nowrap){
                            style += ';white-space:normal;height:auto;';
                        } else if (opts.autoRowHeight){
                            style += ';height:auto;';
                        }
                    }

                    if (field === 'delete') {
                        cc.push('');
                    } else if (col.checkbox){
                        cc.push('');
                    } else if (col.expander) {
                        /*cc.push('<div style="text-align:center;width:16px;height:16px;">');*/
                        cc.push('<span class="datagrid-row-expander datagrid-row-expand" style="display:inline-block;width:16px;height:16px;cursor:pointer;" />');
                        /*cc.push('</div>');*/
                    } else if (col.formatter){
                        if (/formatterMinutToTime|sheetDataviewCall/gi.test(col.formatter.toString())) {
                            if (value == "") { cc.push('00:00'); } else { cc.push('<div class="text-center" title="">' + pureNumberFormat(parseFloat(value).toFixed(2)) + '</div>'); }
                        } else {
                            if (value === undefined) { cc.push(''); } else { cc.push(col.formatter(value, rowData)); }
                        }
                    } else {
                        cc.push('');
                    }

                    cc.push('</td>');
                }
            }
            return cc.join('');
    },  
  refreshRow: function(e, t) {
   this.updateRow.call(this, e, t, {})
  },
  updateRow: function(e, t, n) {
   function a(t) {
    var n = o.rowStyler ? o.rowStyler.call(e, t, r[t]) : "",
     a = "",
     i = "";
    return "string" == typeof n ? i = n : n && (a = n["class"] || "", i = n.style || ""), {
     c: a,
     s: i
    }
   }

   function i(n) {
    var a = $(e).datagrid("getColumnFields", n),
     i = o.finder.getTr(e, t, "body", n ? 1 : 2),
     d = i.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
    i.html(this.renderRow.call(this, e, a, n, t, r[t])), i.attr("style", c).removeClass(l).addClass(u), d && i.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", !0)
   }
   var o = $.data(e, "datagrid").options,
    r = $(e).datagrid("getRows"),
    d = a(t);
   $.extend(r[t], n);
   var s = a(t),
    l = d.c,
    c = s.s,
    u = "datagrid-row " + (t % 2 && o.striped ? "datagrid-row-alt " : " ") + s.c;
   i.call(this, !0), i.call(this, !1), $(e).datagrid("fixRowHeight", t)
  },
  insertRow: function(e, t, n) {
   function a(n) {
    for (var a = n ? 1 : 2, i = s.rows.length - 1; i >= t; i--) {
     var d = r.finder.getTr(e, i, "body", a);
     if (d.attr("datagrid-row-index", i + 1), d.attr("id", o.rowIdPrefix + "-" + a + "-" + (i + 1)), n && r.rownumbers) {
      var l = i + 2;
      r.pagination && (l += (r.pageNumber - 1) * r.pageSize), d.find("div.datagrid-cell-rownumber").html(l)
     }
     r.striped && d.removeClass("datagrid-row-alt").addClass((i + 1) % 2 ? "datagrid-row-alt" : "")
    }
   }

   function i(n) {
    var a = n ? 1 : 2,
     i = ($(e).datagrid("getColumnFields", n), o.rowIdPrefix + "-" + a + "-" + t),
     l = '<tr id="' + i + '" class="datagrid-row" datagrid-row-index="' + t + '"></tr>';
    if (t >= s.rows.length)
     if (s.rows.length) r.finder.getTr(e, "", "last", a).after(l);
     else {
      var c = n ? d.body1 : d.body2;
      c.html('<table cellspacing="0" cellpadding="0" border="0"><tbody>' + l + "</tbody></table>")
     } else r.finder.getTr(e, t + 1, "body", a).before(l)
   }
   var o = $.data(e, "datagrid"),
    r = o.options,
    d = o.dc,
    s = o.data;
   (void 0 == t || null == t) && (t = s.rows.length), t > s.rows.length && (t = s.rows.length), a.call(this, !0), a.call(this, !1), i.call(this, !0), i.call(this, !1), s.total += 1, s.rows.splice(t, 0, n), this.refreshRow.call(this, e, t)
  },
  deleteRow: function(e, t) {
   function n(n) {
    for (var r = n ? 1 : 2, d = t + 1; d < o.rows.length; d++) {
     var s = i.finder.getTr(e, d, "body", r);
     if (s.attr("datagrid-row-index", d - 1), s.attr("id", a.rowIdPrefix + "-" + r + "-" + (d - 1)), n && i.rownumbers) {
      var l = d;
      i.pagination && (l += (i.pageNumber - 1) * i.pageSize), s.find("div.datagrid-cell-rownumber").html(l)
     }
     i.striped && s.removeClass("datagrid-row-alt").addClass((d - 1) % 2 ? "datagrid-row-alt" : "")
    }
   }
   var a = $.data(e, "datagrid"),
    i = a.options,
    o = a.data;
   i.finder.getTr(e, t).remove(), n.call(this, !0), n.call(this, !1), o.total -= 1, o.rows.splice(t, 1)
  },
  onBeforeRender: function(e, t) {},
  onAfterRender: function(e) {
   var t = $.data(e, "datagrid").options;
   if (t.showFooter) {
    var n = $(e).datagrid("getPanel").find("div.datagrid-footer");
    n.find("div.datagrid-cell-rownumber,div.datagrid-cell-check").css("visibility", "hidden")
   }
  }
 };
 $.fn.datagrid.defaults = $.extend({}, $.fn.panel.defaults, {
  sharedStyleSheet: !1,
  frozenColumns: void 0,
  columns: void 0,
  fitColumns: !1,
  resizeHandle: "right",
  autoRowHeight: !0,
  toolbar: null,
  striped: !1,
  method: "post",
  nowrap: !0,
  idField: null,
  url: null,
  data: null,
  loadMsg: "Processing, please wait ...",
  rownumbers: !1,
  singleSelect: !1,
  ctrlSelect: !1,
  selectOnCheck: !0,
  checkOnSelect: !0,
  pagination: !1,
  pagePosition: "bottom",
  pageNumber: 1,
  pageSize: 10,
  pageList: [10, 20, 30, 40, 50],
  queryParams: {},
  sortName: null,
  sortOrder: "asc",
  multiSort: !1,
  remoteSort: !0,
  showHeader: !0,
  showFooter: !1,
  scrollbarSize: 18,
  rowEvents: {
   mouseover: _5d1(!0),
   mouseout: _5d1(!1),
   click: _5d9,
   dblclick: _5e3,
   contextmenu: _5e7
  },
  rowStyler: function(e, t) {},
  loader: function(e, t, n) {
   var a = $(this).datagrid("options");
   return a.url ? void $.ajax({
    type: a.method,
    url: a.url,
    data: e,
    dataType: "json",
    success: function(e) {
     t(e)
    },
    error: function() {
     n.apply(this, arguments)
    }
   }) : !1
  },
  loadFilter: function(e) {
   return "number" == typeof e.length && "function" == typeof e.splice ? {
    total: e.length,
    rows: e
   } : e
  },
  editors: _6df,
  finder: {
   getTr: function(e, t, n, a) {
    n = n || "body", a = a || 0;
    var i = $.data(e, "datagrid"),
     o = i.dc,
     r = i.options;
    if (0 == a) {
     var d = r.finder.getTr(e, t, n, 1),
      s = r.finder.getTr(e, t, n, 2);
     return d.add(s)
    }
    if ("body" == n) {
     var l = $("#" + i.rowIdPrefix + "-" + a + "-" + t);
     return l.length || (l = (1 == a ? o.body1 : o.body2).find(">table>tbody>tr[datagrid-row-index=" + t + "]")), l
    }
    return "footer" == n ? (1 == a ? o.footer1 : o.footer2).find(">table>tbody>tr[datagrid-row-index=" + t + "]") : "selected" == n ? (1 == a ? o.body1 : o.body2).find(">table>tbody>tr.datagrid-row-selected") : "highlight" == n ? (1 == a ? o.body1 : o.body2).find(">table>tbody>tr.datagrid-row-over") : "checked" == n ? (1 == a ? o.body1 : o.body2).find(">table>tbody>tr.datagrid-row-checked") : "editing" == n ? (1 == a ? o.body1 : o.body2).find(">table>tbody>tr.datagrid-row-editing") : "last" == n ? (1 == a ? o.body1 : o.body2).find(">table>tbody>tr[datagrid-row-index]:last") : "allbody" == n ? (1 == a ? o.body1 : o.body2).find(">table>tbody>tr[datagrid-row-index]") : "allfooter" == n ? (1 == a ? o.footer1 : o.footer2).find(">table>tbody>tr[datagrid-row-index]") : void 0
   },
   getRow: function(e, t) {
    var n = "object" == typeof t ? t.attr("datagrid-row-index") : t;
    return $.data(e, "datagrid").data.rows[parseInt(n)]
   },
   getRows: function(e) {
    return $(e).datagrid("getRows")
   }
  },
  view: _728,
  onBeforeLoad: function(e) {},
  onLoadSuccess: function() {},
  onLoadError: function() {},
  onClickRow: function(e, t) {},
  onDblClickRow: function(e, t) {},
  onClickCell: function(e, t, n) {},
  onDblClickCell: function(e, t, n) {},
  onBeforeSortColumn: function(e, t) {},
  onSortColumn: function(e, t) {},
  onResizeColumn: function(e, t) {},
  onBeforeSelect: function(e, t) {},
  onSelect: function(e, t) {},
  onBeforeUnselect: function(e, t) {},
  onUnselect: function(e, t) {},
  onSelectAll: function(e) {},
  onUnselectAll: function(e) {},
  onBeforeCheck: function(e, t) {},
  onCheck: function(e, t) {},
  onBeforeUncheck: function(e, t) {},
  onUncheck: function(e, t) {},
  onCheckAll: function(e) {},
  onUncheckAll: function(e) {},
  onBeforeEdit: function(e, t) {},
  onBeginEdit: function(e, t) {},
  onEndEdit: function(e, t, n) {},
  onAfterEdit: function(e, t, n) {},
  onCancelEdit: function(e, t) {},
  onHeaderContextMenu: function(e, t) {},
  onRowContextMenu: function(e, t, n) {}
 })
}(jQuery),
function(e) {
 function t(t) {
  var i = (e.data(t, "propertygrid"), e.data(t, "propertygrid").options);
  e(t).datagrid(e.extend({}, i, {
   cls: "propertygrid",
   view: i.showGroup ? i.groupView : i.view,
   onBeforeEdit: function(n, a) {
    if (0 == i.onBeforeEdit.call(t, n, a)) return !1;
    var o = e(this),
     a = o.datagrid("getRows")[n],
     r = o.datagrid("getColumnOption", "value");
    r.editor = a.editor
   },
   onClickCell: function(o, r, d) {
    if (a != this && (n(a), a = this), i.editIndex != o) {
     n(a), e(this).datagrid("beginEdit", o);
     var s = e(this).datagrid("getEditor", {
      index: o,
      field: r
     });
     if (s || (s = e(this).datagrid("getEditor", {
       index: o,
       field: "value"
      })), s) {
      var l = e(s.target),
       c = l.data("textbox") ? l.textbox("textbox") : l;
      c.focus(), i.editIndex = o
     }
    }
    i.onClickCell.call(t, o, r, d)
   },
   loadFilter: function(e) {
    return n(this), i.loadFilter.call(this, e)
   }
  }))
 }

 function n(t) {
  var n = e(t);
  if (n.length) {
   var a = e.data(t, "propertygrid").options;
   a.finder.getTr(t, null, "editing").each(function() {
    var t = parseInt(e(this).attr("datagrid-row-index"));
    n.datagrid("validateRow", t) ? n.datagrid("endEdit", t) : n.datagrid("cancelEdit", t)
   })
  }
 }
 var a;
 e(document).unbind(".propertygrid").bind("mousedown.propertygrid", function(t) {
  var i = e(t.target).closest("div.datagrid-view,div.combo-panel");
  i.length || (n(a), a = void 0)
 }), e.fn.propertygrid = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.propertygrid.methods[n];
   return i ? i(this, a) : this.datagrid(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "propertygrid");
   if (a) e.extend(a.options, n);
   else {
    var i = e.extend({}, e.fn.propertygrid.defaults, e.fn.propertygrid.parseOptions(this), n);
    i.frozenColumns = e.extend(!0, [], i.frozenColumns), i.columns = e.extend(!0, [], i.columns), e.data(this, "propertygrid", {
     options: i
    })
   }
   t(this)
  })
 }, e.fn.propertygrid.methods = {
  options: function(t) {
   return e.data(t[0], "propertygrid").options
  }
 }, e.fn.propertygrid.parseOptions = function(t) {
  return e.extend({}, e.fn.datagrid.parseOptions(t), e.parser.parseOptions(t, [{
   showGroup: "boolean"
  }]))
 };
 var i = e.extend({}, e.fn.datagrid.defaults.view, {
  render: function(t, n, a) {
   for (var i = [], o = this.groups, r = 0; r < o.length; r++) i.push(this.renderGroup.call(this, t, r, o[r], a));
   e(n)[0].innerHTML = i.join("")
  },
  renderGroup: function(t, n, a, i) {
   var o = e.data(t, "datagrid"),
    r = o.options,
    d = e(t).datagrid("getColumnFields", i),
    s = [];
   s.push('<div class="datagrid-group" group-index=' + n + ">"), s.push('<table cellspacing="0" cellpadding="0" border="0" style="height:100%"><tbody>'), s.push("<tr>"), (i && (r.rownumbers || r.frozenColumns.length) || !i && !r.rownumbers && !r.frozenColumns.length) && s.push('<td style="border:0;text-align:center;width:25px"><span class="datagrid-row-expander datagrid-row-collapse" style="display:inline-block;width:16px;height:16px;cursor:pointer">&nbsp;</span></td>'), s.push('<td style="border:0;">'), i || (s.push('<span class="datagrid-group-title">'), s.push(r.groupFormatter.call(t, a.value, a.rows)), s.push("</span>")), s.push("</td>"), s.push("</tr>"), s.push("</tbody></table>"), s.push("</div>"), s.push('<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>');
   for (var l = a.startIndex, c = 0; c < a.rows.length; c++) {
    var u = r.rowStyler ? r.rowStyler.call(t, l, a.rows[c]) : "",
     h = "",
     f = "";
    "string" == typeof u ? f = u : u && (h = u["class"] || "", f = u.style || "");
    var p = 'class="datagrid-row ' + (l % 2 && r.striped ? "datagrid-row-alt " : " ") + h + '"',
     g = f ? 'style="' + f + '"' : "",
     v = o.rowIdPrefix + "-" + (i ? 1 : 2) + "-" + l;
    s.push('<tr id="' + v + '" datagrid-row-index="' + l + '" ' + p + " " + g + ">"), s.push(this.renderRow.call(this, t, d, i, l, a.rows[c])), s.push("</tr>"), l++
   }
   return s.push("</tbody></table>"), s.join("")
  },
  bindEvents: function(t) {
   var n = e.data(t, "datagrid"),
    a = n.dc,
    i = a.body1.add(a.body2),
    o = (e.data(i[0], "events") || e._data(i[0], "events")).click[0].handler;
   i.unbind("click").bind("click", function(n) {
    var a = e(n.target),
     i = a.closest("span.datagrid-row-expander");
    if (i.length) {
     var r = i.closest("div.datagrid-group").attr("group-index");
     i.hasClass("datagrid-row-collapse") ? e(t).datagrid("collapseGroup", r) : e(t).datagrid("expandGroup", r)
    } else o(n);
    n.stopPropagation()
   })
  },
  onBeforeRender: function(t, n) {
   function a(e) {
    for (var t = 0; t < d.length; t++) {
     var n = d[t];
     if (n.value == e) return n
    }
    return null
   }

   function i() {
    e("#datagrid-group-style").length || e("head").append('<style id="datagrid-group-style">.datagrid-group{height:25px;overflow:hidden;font-weight:bold;border-bottom:1px solid #ccc;}</style>')
   }
   var o = e.data(t, "datagrid"),
    r = o.options;
   i();
   for (var d = [], s = 0; s < n.length; s++) {
    var l = n[s],
     c = a(l[r.groupField]);
    c ? c.rows.push(l) : (c = {
     value: l[r.groupField],
     rows: [l]
    }, d.push(c))
   }
   for (var u = 0, h = [], s = 0; s < d.length; s++) {
    var c = d[s];
    c.startIndex = u, u += c.rows.length, h = h.concat(c.rows)
   }
   o.data.rows = h, this.groups = d;
   var f = this;
   setTimeout(function() {
    f.bindEvents(t)
   }, 0)
  }
 });
 e.extend(e.fn.datagrid.methods, {
  expandGroup: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "datagrid").dc.view,
     a = t.find(void 0 != n ? 'div.datagrid-group[group-index="' + n + '"]' : "div.datagrid-group"),
     i = a.find("span.datagrid-row-expander");
    i.hasClass("datagrid-row-expand") && (i.removeClass("datagrid-row-expand").addClass("datagrid-row-collapse"), a.next("table").show()), e(this).datagrid("fixRowHeight")
   })
  },
  collapseGroup: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "datagrid").dc.view,
     a = t.find(void 0 != n ? 'div.datagrid-group[group-index="' + n + '"]' : "div.datagrid-group"),
     i = a.find("span.datagrid-row-expander");
    i.hasClass("datagrid-row-collapse") && (i.removeClass("datagrid-row-collapse").addClass("datagrid-row-expand"), a.next("table").hide()), e(this).datagrid("fixRowHeight")
   })
  }
 }), e.extend(i, {
  refreshGroupTitle: function(t, n) {
   var a = e.data(t, "datagrid"),
    i = a.options,
    o = a.dc,
    r = this.groups[n],
    d = o.body2.children("div.datagrid-group[group-index=" + n + "]").find("span.datagrid-group-title");
   d[0].innerHTML = i.groupFormatter.call(t, r.value, r.rows)
  },
  insertRow: function(t, n, a) {
   function i(e, n) {
    var a = n ? 1 : 2,
     i = d.finder.getTr(t, e - 1, "body", a),
     o = d.finder.getTr(t, e, "body", a);
    o.insertAfter(i)
   }
   for (var o, r = e.data(t, "datagrid"), d = r.options, s = r.dc, l = null, c = 0; c < this.groups.length; c++)
    if (this.groups[c].value == a[d.groupField]) {
     l = this.groups[c], o = c;
     break
    }
   l ? ((void 0 == n || null == n) && (n = r.data.rows.length), n < l.startIndex ? n = l.startIndex : n > l.startIndex + l.rows.length && (n = l.startIndex + l.rows.length), e.fn.datagrid.defaults.view.insertRow.call(this, t, n, a), n >= l.startIndex + l.rows.length && (i(n, !0), i(n, !1)), l.rows.splice(n - l.startIndex, 0, a)) : (l = {
    value: a[d.groupField],
    rows: [a],
    startIndex: r.data.rows.length
   }, o = this.groups.length, s.body1.append(this.renderGroup.call(this, t, o, l, !0)), s.body2.append(this.renderGroup.call(this, t, o, l, !1)), this.groups.push(l), r.data.rows.push(a)), this.refreshGroupTitle(t, o)
  },
  updateRow: function(t, n, a) {
   var i = e.data(t, "datagrid").options;
   e.fn.datagrid.defaults.view.updateRow.call(this, t, n, a);
   var o = i.finder.getTr(t, n, "body", 2).closest("table.datagrid-btable"),
    r = parseInt(o.prev().attr("group-index"));
   this.refreshGroupTitle(t, r)
  },
  deleteRow: function(t, n) {
   var a = e.data(t, "datagrid"),
    i = a.options,
    o = a.dc,
    r = o.body1.add(o.body2),
    d = i.finder.getTr(t, n, "body", 2).closest("table.datagrid-btable"),
    s = parseInt(d.prev().attr("group-index"));
   e.fn.datagrid.defaults.view.deleteRow.call(this, t, n);
   var l = this.groups[s];
   if (l.rows.length > 1) l.rows.splice(n - l.startIndex, 1), this.refreshGroupTitle(t, s);
   else {
    r.children("div.datagrid-group[group-index=" + s + "]").remove();
    for (var c = s + 1; c < this.groups.length; c++) r.children("div.datagrid-group[group-index=" + c + "]").attr("group-index", c - 1);
    this.groups.splice(s, 1)
   }
   for (var n = 0, c = 0; c < this.groups.length; c++) {
    var l = this.groups[c];
    l.startIndex = n, n += l.rows.length
   }
  }
 }), e.fn.propertygrid.defaults = e.extend({}, e.fn.datagrid.defaults, {
  singleSelect: !0,
  remoteSort: !1,
  fitColumns: !0,
  loadMsg: "",
  frozenColumns: [
   [{
    field: "f",
    width: 16,
    resizableu: !1
   }]
  ],
  columns: [
   [{
    field: "name",
    title: "Name",
    width: 100,
    sortable: !0
   }, {
    field: "value",
    title: "Value",
    width: 100,
    resizableu: !1
   }]
  ],
  showGroup: !1,
  groupView: i,
  groupField: "group",
  groupFormatter: function(e, t) {
   return e
  }
 })
}(jQuery),
function(e) {
 function t(t) {
  var a = e.data(t, "treegrid"),
   i = a.options;
  if (e(t).datagrid(e.extend({}, i, {
    url: null,
    data: null,
    loader: function() {
     return !1
    },
    onBeforeLoad: function() {
     return !1
    },
    onLoadSuccess: function() {},
    onResizeColumn: function(e, a) {
     n(t), i.onResizeColumn.call(t, e, a)
    },
    onBeforeSortColumn: function(e, n) {
     return 0 == i.onBeforeSortColumn.call(t, e, n) ? !1 : void 0
    },
    onSortColumn: function(n, a) {
     if (i.sortName = n, i.sortOrder = a, i.remoteSort) s(t);
     else {
      var o = e(t).treegrid("getData");
      d(t, 0, o)
     }
     i.onSortColumn.call(t, n, a)
    },
    onBeforeEdit: function(e, n) {
     return 0 == i.onBeforeEdit.call(t, n) ? !1 : void 0
    },
    onAfterEdit: function(e, n, a) {
     i.onAfterEdit.call(t, n, a)
    },
    onCancelEdit: function(e, n) {
     i.onCancelEdit.call(t, n)
    },
    onBeforeSelect: function(e) {
     return 0 == i.onBeforeSelect.call(t, p(t, e)) ? !1 : void 0
    },
    onSelect: function(e) {
     i.onSelect.call(t, p(t, e))
    },
    onBeforeUnselect: function(e) {
     return 0 == i.onBeforeUnselect.call(t, p(t, e)) ? !1 : void 0
    },
    onUnselect: function(e) {
     i.onUnselect.call(t, p(t, e))
    },
    onBeforeCheck: function(e) {
     return 0 == i.onBeforeCheck.call(t, p(t, e)) ? !1 : void 0
    },
    onCheck: function(e) {
     i.onCheck.call(t, p(t, e))
    },
    onBeforeUncheck: function(e) {
     return 0 == i.onBeforeUncheck.call(t, p(t, e)) ? !1 : void 0
    },
    onUncheck: function(e) {
     i.onUncheck.call(t, p(t, e))
    },
    onClickRow: function(e) {
     i.onClickRow.call(t, p(t, e))
    },
    onDblClickRow: function(e) {
     i.onDblClickRow.call(t, p(t, e))
    },
    onClickCell: function(e, n) {
     i.onClickCell.call(t, n, p(t, e))
    },
    onDblClickCell: function(e, n) {
     i.onDblClickCell.call(t, n, p(t, e))
    },
    onRowContextMenu: function(e, n) {
     i.onContextMenu.call(t, e, p(t, n))
    }
   })), !i.columns) {
   var o = e.data(t, "datagrid").options;
   i.columns = o.columns, i.frozenColumns = o.frozenColumns
  }
  if (a.dc = e.data(t, "datagrid").dc, i.pagination) {
   var r = e(t).datagrid("getPager");
   r.pagination({
    pageNumber: i.pageNumber,
    pageSize: i.pageSize,
    pageList: i.pageList,
    onSelectPage: function(e, n) {
     i.pageNumber = e, i.pageSize = n, s(t)
    }
   }), i.pageSize = r.pagination("options").pageSize
  }
 }

 function n(t, n) {
  function a(e) {
   var n = i.finder.getTr(t, e, "body", 1),
    a = i.finder.getTr(t, e, "body", 2);
   n.css("height", ""), a.css("height", "");
   var o = Math.max(n.height(), a.height());
   n.css("height", o), a.css("height", o)
  }
  var i = e.data(t, "datagrid").options,
   o = e.data(t, "datagrid").dc;
  if (!o.body1.is(":empty") && (!i.nowrap || i.autoRowHeight) && void 0 != n)
   for (var r = h(t, n), d = 0; d < r.length; d++) a(r[d][i.idField]);
  e(t).datagrid("fixRowHeight", n)
 }

 function a(t) {
  var n = e.data(t, "datagrid").dc,
   a = e.data(t, "treegrid").options,
   p = a.pageNumber, s = a.pageSize;
  a.rownumbers && n.body1.find("div.datagrid-cell-rownumber").each(function(t) {
   var d = parseInt(t) + 1;   
   d += (p - 1) * s;
   e(this).html(d+'.');
  });
 }

 function i(t) {
  return function(n) {
   e.fn.datagrid.defaults.rowEvents[t ? "mouseover" : "mouseout"](n);
   var a = e(n.target),
    i = t ? "addClass" : "removeClass";
   a.hasClass("tree-hit") && (a.hasClass("tree-expanded") ? a[i]("tree-expanded-hover") : a[i]("tree-collapsed-hover"))
  }
 }

 function o(t) {
  var n = e(t.target);
  if (n.hasClass("tree-hit")) {
   var a = n.closest("tr.datagrid-row"),
    i = a.closest("div.datagrid-view").children(".datagrid-f")[0];
   b(i, a.attr("node-id"))
  } else e.fn.datagrid.defaults.rowEvents.click(t)
 }

 function r(t, n) {
  function a(t, n) {
   e('<tr class="treegrid-tr-tree"><td style="border:0px" colspan="' + n + '"><div></div></td></tr>').insertAfter(t)
  }
  var i = e.data(t, "treegrid").options,
   o = i.finder.getTr(t, n, "body", 1),
   r = i.finder.getTr(t, n, "body", 2),
   d = e(t).datagrid("getColumnFields", !0).length + (i.rownumbers ? 1 : 0),
   s = e(t).datagrid("getColumnFields", !1).length;
  a(o, d), a(r, s)
 }

 function d(t, i, o, r) {
  var d = e.data(t, "treegrid"),
   s = d.options,
   l = d.dc;
  o = s.loadFilter.call(t, o, i);
  var c = p(t, i);
  if (c) {
   var u = s.finder.getTr(t, i, "body", 1),
    h = s.finder.getTr(t, i, "body", 2),
    f = u.next("tr.treegrid-tr-tree").children("td").children("div"),
    g = h.next("tr.treegrid-tr-tree").children("td").children("div");
   r || (c.children = [])
  } else {
   var f = l.body1,
    g = l.body2;
   r || (d.data = [])
  }
  if (r || (f.empty(), g.empty()), s.view.onBeforeRender && s.view.onBeforeRender.call(s.view, t, i, o), s.view.render.call(s.view, t, f, !0), s.view.render.call(s.view, t, g, !1), s.showFooter && (s.view.renderFooter.call(s.view, t, l.footer1, !0), s.view.renderFooter.call(s.view, t, l.footer2, !1)), s.view.onAfterRender && s.view.onAfterRender.call(s.view, t), !i && s.pagination) {
   var v = e.data(t, "treegrid").total,
    b = e(t).datagrid("getPager");
   b.pagination("options").total != v && b.pagination({
    total: v
   })
  }
  n(t), a(t), e(t).treegrid("showLines"), e(t).treegrid("setSelectionState"), e(t).treegrid("autoSizeColumn"), s.onLoadSuccess.call(t, c, o)
 }

 function s(t, n, a, i, o) {
  var r = e.data(t, "treegrid").options,
   s = e(t).datagrid("getPanel").find("div.datagrid-body");
  a && (r.queryParams = a);
  var l = e.extend({}, r.queryParams);
  r.pagination && e.extend(l, {
   page: r.pageNumber,
   rows: r.pageSize
  }), r.sortName && e.extend(l, {
   sort: r.sortName,
   order: r.sortOrder
  });
  var c = p(t, n);
  if (0 != r.onBeforeLoad.call(t, c, l)) {
   var u = s.find('tr[node-id="' + n + '"] span.tree-folder');
   u.addClass("tree-loading"), e(t).treegrid("loading");
   var h = r.loader.call(t, l, function(a) {
    u.removeClass("tree-loading"), e(t).treegrid("loaded"), d(t, n, a, i), o && o()
   }, function() {
    u.removeClass("tree-loading"), e(t).treegrid("loaded"), r.onLoadError.apply(t, arguments), o && o()
   });
   0 == h && (u.removeClass("tree-loading"), e(t).treegrid("loaded"))
  }
 }

 function l(e) {
  var t = c(e);
  return t.length ? t[0] : null
 }

 function c(t) {
  return e.data(t, "treegrid").data
 }

 function u(e, t) {
  var n = p(e, t);
  return n._parentId ? p(e, n._parentId) : null
 }

 function h(t, n) {
  function a(e) {
   var n = p(t, e);
   if (n && n.children)
    for (var r = 0, d = n.children.length; d > r; r++) {
     var s = n.children[r];
     o.push(s), a(s[i.idField])
    }
  }
  var i = e.data(t, "treegrid").options,
   o = (e(t).datagrid("getPanel").find("div.datagrid-view2 div.datagrid-body"), []);
  if (n) a(n);
  else
   for (var r = c(t), d = 0; d < r.length; d++) o.push(r[d]), a(r[d][i.idField]);
  return o
 }

 function f(t, n) {
  if (!n) return 0;
  var a = e.data(t, "treegrid").options,
   i = e(t).datagrid("getPanel").children("div.datagrid-view"),
   o = i.find('div.datagrid-body tr[node-id="' + n + '"]').children('td[field="' + a.treeField + '"]');
  return o.find("span.tree-indent,span.tree-hit").length
 }

 function p(t, n) {
  for (var a = e.data(t, "treegrid").options, i = e.data(t, "treegrid").data, o = [i]; o.length;)
   for (var r = o.shift(), d = 0; d < r.length; d++) {
    var s = r[d];
    if (s[a.idField] == n) return s;
    s.children && o.push(s.children)
   }
  return null
 }

 function g(t, a) {
  var i = e.data(t, "treegrid").options,
   o = p(t, a),
   r = i.finder.getTr(t, a),
   d = r.find("span.tree-hit");
  if (0 != d.length && !d.hasClass("tree-collapsed") && 0 != i.onBeforeCollapse.call(t, o)) {
   d.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed"), d.next().removeClass("tree-folder-open"), o.state = "closed", r = r.next("tr.treegrid-tr-tree");
   var s = r.children("td").children("div");
   i.animate ? s.slideUp("normal", function() {
    e(t).treegrid("autoSizeColumn"), n(t, a), i.onCollapse.call(t, o)
   }) : (s.hide(), e(t).treegrid("autoSizeColumn"), n(t, a), i.onCollapse.call(t, o))
  }
 }

 function v(t, a) {
  function i(i) {
   c.state = "open", o.animate ? i.slideDown("normal", function() {
    e(t).treegrid("autoSizeColumn"), n(t, a), o.onExpand.call(t, c)
   }) : (i.show(), e(t).treegrid("autoSizeColumn"), n(t, a), o.onExpand.call(t, c))
  }
  var o = e.data(t, "treegrid").options,
   d = o.finder.getTr(t, a),
   l = d.find("span.tree-hit"),
   c = p(t, a);
  if (0 != l.length && !l.hasClass("tree-expanded") && 0 != o.onBeforeExpand.call(t, c)) {
   l.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded"), l.next().addClass("tree-folder-open");
   var u = d.next("tr.treegrid-tr-tree");
   if (u.length) {
    var h = u.children("td").children("div");
    i(h)
   } else {
    r(t, c[o.idField]);
    var u = d.next("tr.treegrid-tr-tree"),
     h = u.children("td").children("div");
    h.hide();
    var f = e.extend({}, o.queryParams || {});
    f.id = c[o.idField], s(t, c[o.idField], f, !0, function() {
     h.is(":empty") ? u.remove() : i(h)
    })
   }
  }
 }

 function b(t, n) {
  var a = e.data(t, "treegrid").options,
   i = a.finder.getTr(t, n),
   o = i.find("span.tree-hit");
  o.hasClass("tree-expanded") ? g(t, n) : v(t, n)
 }

 function m(t, n) {
  var a = e.data(t, "treegrid").options,
   i = h(t, n);
  n && i.unshift(p(t, n));
  for (var o = 0; o < i.length; o++) g(t, i[o][a.idField])
 }

 function x(t, n) {
  var a = e.data(t, "treegrid").options,
   i = h(t, n);
  n && i.unshift(p(t, n));
  for (var o = 0; o < i.length; o++) v(t, i[o][a.idField])
 }

 function w(t, n) {
  for (var a = e.data(t, "treegrid").options, i = [], o = u(t, n); o;) {
   var r = o[a.idField];
   i.unshift(r), o = u(t, r)
  }
  for (var d = 0; d < i.length; d++) v(t, i[d])
 }

 function _(t, n) {
  var a = e.data(t, "treegrid").options;
  if (n.parent) {
   var i = a.finder.getTr(t, n.parent);
   0 == i.next("tr.treegrid-tr-tree").length && r(t, n.parent);
   var o = i.children('td[field="' + a.treeField + '"]').children("div.datagrid-cell"),
    s = o.children("span.tree-icon");
   if (s.hasClass("tree-file")) {
    s.removeClass("tree-file").addClass("tree-folder tree-folder-open");
    var l = e('<span class="tree-hit tree-expanded"></span>').insertBefore(s);
    l.prev().length && l.prev().remove()
   }
  }
  d(t, n.parent, n.data, !0)
 }

 function y(t, n) {
  function i(e) {
   var a = e ? 1 : 2,
    i = r.finder.getTr(t, n.data[r.idField], "body", a),
    d = i.closest("table.datagrid-btable");
   i = i.parent().children();
   var s = r.finder.getTr(t, o, "body", a);
   if (n.before) i.insertBefore(s);
   else {
    var l = s.next("tr.treegrid-tr-tree");
    i.insertAfter(l.length ? l : s)
   }
   d.remove()
  }
  var o = n.before || n.after,
   r = e.data(t, "treegrid").options,
   d = u(t, o);
  _(t, {
   parent: d ? d[r.idField] : null,
   data: [n.data]
  });
  for (var s = d ? d.children : e(t).treegrid("getRoots"), l = 0; l < s.length; l++)
   if (s[l][r.idField] == o) {
    var c = s[s.length - 1];
    s.splice(n.before ? l : l + 1, 0, c), s.splice(s.length - 1, 1);
    break
   }
  i(!0), i(!1), a(t), e(t).treegrid("showLines")
 }

 function C(t, n) {
  var i = e.data(t, "treegrid");
  e(t).datagrid("deleteRow", n), a(t), i.total -= 1, e(t).datagrid("getPager").pagination("refresh", {
   total: i.total
  }), e(t).treegrid("showLines")
 }

 function $(t) {
  function n(t) {
   if (e.map(t, function(e) {
     if (e.children && e.children.length) n(e.children);
     else {
      var t = i(e);
      t.find(".tree-icon").prev().addClass("tree-join")
     }
    }), t.length) {
    var a = i(t[t.length - 1]);
    a.addClass("tree-node-last"), a.find(".tree-join").removeClass("tree-join").addClass("tree-joinbottom")
   }
  }

  function a(n) {
   e.map(n, function(e) {
    e.children && e.children.length && a(e.children)
   });
   for (var i = 0; i < n.length - 1; i++) {
    var d = n[i],
     s = o.treegrid("getLevel", d[r.idField]),
     l = r.finder.getTr(t, d[r.idField]),
     c = l.next().find('tr.datagrid-row td[field="' + r.treeField + '"] div.datagrid-cell');
    c.find("span:eq(" + (s - 1) + ")").addClass("tree-line")
   }
  }

  function i(e) {
   var n = r.finder.getTr(t, e[r.idField]),
    a = n.find('td[field="' + r.treeField + '"] div.datagrid-cell');
   return a
  }
  var o = e(t),
   r = o.treegrid("options");
  if (!r.lines) return void o.treegrid("getPanel").removeClass("tree-lines");
  o.treegrid("getPanel").addClass("tree-lines"), o.treegrid("getPanel").find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom"), o.treegrid("getPanel").find("div.datagrid-cell").removeClass("tree-node-last tree-root-first tree-root-one");
  var d = o.treegrid("getRoots");
  d.length > 1 ? i(d[0]).addClass("tree-root-first") : 1 == d.length && i(d[0]).addClass("tree-root-one"), n(d), a(d)
 }
 e.fn.treegrid = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.treegrid.methods[n];
   return i ? i(this, a) : this.datagrid(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "treegrid");
   a ? e.extend(a.options, n) : a = e.data(this, "treegrid", {
    options: e.extend({}, e.fn.treegrid.defaults, e.fn.treegrid.parseOptions(this), n),
    data: []
   }), t(this), a.options.data && e(this).treegrid("loadData", a.options.data), s(this)
  })
 }, e.fn.treegrid.methods = {
  options: function(t) {
   return e.data(t[0], "treegrid").options
  },
  resize: function(t, n) {
   return t.each(function() {
    e(this).datagrid("resize", n)
   })
  },
  fixRowHeight: function(e, t) {
   return e.each(function() {
    n(this, t)
   })
  },
  loadData: function(e, t) {
   return e.each(function() {
    d(this, t.parent, t)
   })
  },
  load: function(t, n) {
   return t.each(function() {
    e(this).treegrid("options").pageNumber = 1, e(this).treegrid("getPager").pagination({
     pageNumber: 1
    }), e(this).treegrid("reload", n)
   })
  },
  reload: function(t, n) {
   return t.each(function() {
    var t = e(this).treegrid("options"),
     a = {};
    if ("object" == typeof n ? a = n : (a = e.extend({}, t.queryParams), a.id = n), a.id) {
     var i = e(this).treegrid("find", a.id);
     i.children && i.children.splice(0, i.children.length), t.queryParams = a;
     var o = t.finder.getTr(this, a.id);
     o.next("tr.treegrid-tr-tree").remove(), o.find("span.tree-hit").removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed"), v(this, a.id)
    } else s(this, null, a)
   })
  },
  reloadFooter: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "treegrid").options,
     a = e.data(this, "datagrid").dc;
    n && (e.data(this, "treegrid").footer = n), t.showFooter && (t.view.renderFooter.call(t.view, this, a.footer1, !0), t.view.renderFooter.call(t.view, this, a.footer2, !1), t.view.onAfterRender && t.view.onAfterRender.call(t.view, this), e(this).treegrid("fixRowHeight"))
   })
  },
  getData: function(t) {
   return e.data(t[0], "treegrid").data
  },
  getFooterRows: function(t) {
   return e.data(t[0], "treegrid").footer
  },
  getRoot: function(e) {
   return l(e[0])
  },
  getRoots: function(e) {
   return c(e[0])
  },
  getParent: function(e, t) {
   return u(e[0], t)
  },
  getChildren: function(e, t) {
   return h(e[0], t)
  },
  getLevel: function(e, t) {
   return f(e[0], t)
  },
  find: function(e, t) {
   return p(e[0], t)
  },
  isLeaf: function(t, n) {
   var a = e.data(t[0], "treegrid").options,
    i = a.finder.getTr(t[0], n),
    o = i.find("span.tree-hit");
   return 0 == o.length
  },
  select: function(t, n) {
   return t.each(function() {
    e(this).datagrid("selectRow", n)
   })
  },
  unselect: function(t, n) {
   return t.each(function() {
    e(this).datagrid("unselectRow", n)
   })
  },
  collapse: function(e, t) {
   return e.each(function() {
    g(this, t)
   })
  },
  expand: function(e, t) {
   return e.each(function() {
    v(this, t)
   })
  },
  toggle: function(e, t) {
   return e.each(function() {
    b(this, t)
   })
  },
  collapseAll: function(e, t) {
   return e.each(function() {
    m(this, t)
   })
  },
  expandAll: function(e, t) {
   return e.each(function() {
    x(this, t)
   })
  },
  expandTo: function(e, t) {
   return e.each(function() {
    w(this, t)
   })
  },
  append: function(e, t) {
   return e.each(function() {
    _(this, t)
   })
  },
  insert: function(e, t) {
   return e.each(function() {
    y(this, t)
   })
  },
  remove: function(e, t) {
   return e.each(function() {
    C(this, t)
   })
  },
  pop: function(e, t) {
   var n = e.treegrid("find", t);
   return e.treegrid("remove", t), n
  },
  refresh: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "treegrid").options;
    t.view.refreshRow.call(t.view, this, n)
   })
  },
  update: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "treegrid").options;
    t.view.updateRow.call(t.view, this, n.id, n.row)
   })
  },
  beginEdit: function(t, n) {
   return t.each(function() {
    e(this).datagrid("beginEdit", n), e(this).treegrid("fixRowHeight", n)
   })
  },
  endEdit: function(t, n) {
   return t.each(function() {
    e(this).datagrid("endEdit", n)
   })
  },
  cancelEdit: function(t, n) {
   return t.each(function() {
    e(this).datagrid("cancelEdit", n)
   })
  },
  showLines: function(e) {
   return e.each(function() {
    $(this)
   })
  }
 }, e.fn.treegrid.parseOptions = function(t) {
  return e.extend({}, e.fn.datagrid.parseOptions(t), e.parser.parseOptions(t, ["treeField", {
   animate: "boolean"
  }]))
 };
 var k = e.extend({}, e.fn.datagrid.defaults.view, {
  render: function(t, n, a) {
   function i(n, a, l) {
    for (var c = e(t).treegrid("getParent", l[0][o.idField]), u = (c ? c.children.length : e(t).treegrid("getRoots").length) - l.length, h = ['<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>'], f = 0; f < l.length; f++) {
     var p = l[f];
     "open" != p.state && "closed" != p.state && (p.state = "open");
     var g = o.rowStyler ? o.rowStyler.call(t, p) : "",
      v = "",
      b = "";
     "string" == typeof g ? b = g : g && (v = g["class"] || "", b = g.style || "");
     var m = 'class="datagrid-row ' + (u++ % 2 && o.striped ? "datagrid-row-alt " : " ") + v + '"',
      x = b ? 'style="' + b + '"' : "",
      w = d + "-" + (n ? 1 : 2) + "-" + p[o.idField];
     if (h.push('<tr id="' + w + '" node-id="' + p[o.idField] + '" ' + m + " " + x + ">"), h = h.concat(s.renderRow.call(s, t, r, n, a, p)), h.push("</tr>"), p.children && p.children.length) {
      var _ = i(n, a + 1, p.children),
       y = "closed" == p.state ? "none" : "block";
      h.push('<tr class="treegrid-tr-tree"><td style="border:0px" colspan=' + (r.length + (o.rownumbers ? 1 : 0)) + '><div style="display:' + y + '">'), h = h.concat(_), h.push("</div></td></tr>")
     }
    }
    return h.push("</tbody></table>"), h
   }
   var o = e.data(t, "treegrid").options,
    r = e(t).datagrid("getColumnFields", a),
    d = e.data(t, "datagrid").rowIdPrefix;
   if (!a || o.rownumbers || o.frozenColumns && o.frozenColumns.length) {
    var s = this;
    if (this.treeNodes && this.treeNodes.length) {
     var l = i(a, this.treeLevel, this.treeNodes);
     e(n).append(l.join(""))
    }
   }
  },
  renderFooter: function(t, n, a) {
   for (var i = e.data(t, "treegrid").options, o = e.data(t, "treegrid").footer || [], r = e(t).datagrid("getColumnFields", a), d = ['<table class="datagrid-ftable" cellspacing="0" cellpadding="0" border="0"><tbody>'], s = 0; s < o.length; s++) {
    var l = o[s];
    l[i.idField] = l[i.idField] || "foot-row-id" + s, d.push('<tr class="datagrid-row" node-id="' + l[i.idField] + '">'), d.push(this.renderRow.call(this, t, r, a, 0, l)), d.push("</tr>")
   }
   d.push("</tbody></table>"), e(n)[0].innerHTML = d.join("") 
  },
  renderRow: function(t, n, a, i, o) {
   var r = e.data(t, "treegrid").options,
    d = [];
   a && r.rownumbers && d.push('<td class="datagrid-td-rownumber"><div class="datagrid-cell-rownumber">0</div></td>');
   for (var s = 0; s < n.length; s++) {
    var l = n[s],
     c = e(t).datagrid("getColumnOption", l);
    if (c) {
     var u = c.styler ? c.styler(o[l], o) || "" : "",
      h = "",
      f = "";
     "string" == typeof u ? f = u : d && (h = u["class"] || "", f = u.style || "");
     var p = h ? 'class="' + h + '"' : "",
      g = c.hidden ? 'style="display:none;' + f + '"' : f ? 'style="' + f + '"' : "";
     d.push('<td field="' + l + '" ' + p + " " + g + ">");
     var g = "";
     if (c.checkbox || (c.align && (g += "text-align:" + c.align + ";"), r.nowrap ? r.autoRowHeight && (g += "height:auto;") : g += "white-space:normal;height:auto;"), d.push('<div style="' + g + '" '), c.checkbox ? d.push('class="datagrid-cell-check ') : d.push('class="datagrid-cell ' + c.cellClass), d.push('">'), c.checkbox) o.checked ? d.push('<input type="checkbox" checked="checked"') : d.push('<input type="checkbox"'), d.push(' name="' + l + '" value="' + (void 0 != o[l] ? o[l] : "") + '">');
     else {
      var v = null;
      if (v = c.formatter ? c.formatter(o[l], o) : o[l], l == r.treeField) {
       for (var b = 0; i > b; b++) d.push('<span class="tree-indent"></span>'); 
       "closed" == o.state ? (d.push('<span class="tree-hit tree-collapsed"></span>'), d.push('<span class="tree-icon tree-folder ' + (o.iconCls ? o.iconCls : "") + '"></span>')) : o.children && o.children.length ? (d.push('<span class="tree-hit tree-expanded"></span>'), d.push('<span class="tree-icon tree-folder tree-folder-open ' + (o.iconCls ? o.iconCls : "") + '"></span>')) : (d.push('<span class="tree-indent"></span>'), d.push('<span class="tree-icon tree-file ' + (o.iconCls ? o.iconCls : "") + ( (typeof r.fileIconclass !== 'undefined' && r.fileIconclass) ? r.fileIconclass : "" )  + '"></span>')), d.push('<span class="tree-title">' + v + "</span>")
      } else d.push(v)
     }
     d.push("</div>"), d.push("</td>")
    }
   }
   return d.join("")
  },
  refreshRow: function(e, t) {
   this.updateRow.call(this, e, t, {})
  },
  updateRow: function(t, n, a) {
   function i(a) {
    var i = e(t).treegrid("getColumnFields", a),
     u = o.finder.getTr(t, n, "body", a ? 1 : 2),
     h = u.find("div.datagrid-cell-rownumber").html(),
     f = u.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
    u.html(this.renderRow(t, i, a, d, r)), u.attr("style", s || ""), u.find("div.datagrid-cell-rownumber").html(h), f && u.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", !0), c != n && (u.attr("id", l + "-" + (a ? 1 : 2) + "-" + c), u.attr("node-id", c))
   }
   var o = e.data(t, "treegrid").options,
    r = e(t).treegrid("find", n);
   e.extend(r, a);
   var d = e(t).treegrid("getLevel", n) - 1,
    s = o.rowStyler ? o.rowStyler.call(t, r) : "",
    l = e.data(t, "datagrid").rowIdPrefix,
    c = r[o.idField];
   i.call(this, !0), i.call(this, !1), e(t).treegrid("fixRowHeight", n)
  },
  deleteRow: function(t, n) {
   function a(n) {
    var a, o = e(t).treegrid("getParent", n);
    a = o ? o.children : e(t).treegrid("getData");
    for (var r = 0; r < a.length; r++)
     if (a[r][i.idField] == n) {
      a.splice(r, 1);
      break
     }
    return o
   }
   var i = e.data(t, "treegrid").options,
    o = i.finder.getTr(t, n);
   o.next("tr.treegrid-tr-tree").remove(), o.remove();
   var r = a(n);
   if (r && 0 == r.children.length) {
    o = i.finder.getTr(t, r[i.idField]), o.next("tr.treegrid-tr-tree").remove();
    var d = o.children('td[field="' + i.treeField + '"]').children("div.datagrid-cell");
    d.find(".tree-icon").removeClass("tree-folder").addClass("tree-file"), d.find(".tree-hit").remove(), e('<span class="tree-indent"></span>').prependTo(d)
   }
  },
  onBeforeRender: function(t, n, a) {
   function i(e, t) {
    for (var n = 0; n < e.length; n++) {
     var a = e[n];
     a._parentId = t, a.children && a.children.length && i(a.children, a[r.idField])
    }
   }
   if (e.isArray(n) && (a = {
     total: n.length,
     rows: n
    }, n = null), !a) return !1;
   var o = e.data(t, "treegrid"),
    r = o.options;
   void 0 == a.length ? (a.footer && (o.footer = a.footer), a.total && (o.total = a.total), a = this.transfer(t, n, a.rows)) : i(a, n);
   var d = p(t, n);
   d ? d.children ? d.children = d.children.concat(a) : d.children = a : o.data = o.data.concat(a), this.sort(t, a), this.treeNodes = a, this.treeLevel = e(t).treegrid("getLevel", n)
  },
  sort: function(t, n) {
   function a(n) {
    n.sort(function(n, a) {
     for (var i = 0, d = 0; d < o.length; d++) {
      var s = o[d],
       l = r[d],
       c = e(t).treegrid("getColumnOption", s),
       u = c.sorter || function(e, t) {
        return e == t ? 0 : e > t ? 1 : -1
       };
      if (i = u(n[s], a[s]) * ("asc" == l ? 1 : -1), 0 != i) return i
     }
     return i
    });
    for (var i = 0; i < n.length; i++) {
     var d = n[i].children;
     d && d.length && a(d);
    }
   }
   var i = e.data(t, "treegrid").options;
   if (!i.remoteSort && i.sortName) {
    var o = i.sortName.split(","),
     r = i.sortOrder.split(",");
    a(n)
   }
  },
  transfer: function(t, n, a) {
   for (var i = e.data(t, "treegrid").options, o = [], r = 0; r < a.length; r++) o.push(a[r]);
   for (var d = [], r = 0; r < o.length; r++) {
    var s = o[r];
    n ? s._parentId == n && (d.push(s), o.splice(r, 1), r--) : s._parentId || (d.push(s), o.splice(r, 1), r--)
   }
   for (var l = [], r = 0; r < d.length; r++) l.push(d[r]);
   for (; l.length;)
    for (var c = l.shift(), r = 0; r < o.length; r++) {
     var s = o[r];
     s._parentId == c[i.idField] && (c.children ? c.children.push(s) : c.children = [s], l.push(s), o.splice(r, 1), r--)
    }
   return d
  }
 });
 //end tree
 e.fn.treegrid.defaults = e.extend({}, e.fn.datagrid.defaults, {
  treeField: null,
  lines: !1,
  animate: !1,
  singleSelect: !0,
  view: k,
  rowEvents: e.extend({}, e.fn.datagrid.defaults.rowEvents, {
   mouseover: i(!0),
   mouseout: i(!1),
   click: o
  }),
  loader: function(t, n, a) {
   var i = e(this).treegrid("options");
   return i.url ? void e.ajax({
    type: i.method,
    url: i.url,
    data: t,
    dataType: "json",
    success: function(e) {
     n(e)
    },
    error: function() {
     a.apply(this, arguments)
    }
   }) : !1
  },
  loadFilter: function(e, t) {
   return e
  },
  finder: {
   getTr: function(t, n, a, i) {
    a = a || "body", i = i || 0;
    var o = e.data(t, "datagrid").dc;
    if (0 == i) {
     var r = e.data(t, "treegrid").options,
      d = r.finder.getTr(t, n, a, 1),
      s = r.finder.getTr(t, n, a, 2);
     return d.add(s)
    }
    if ("body" == a) {
     var l = e("#" + e.data(t, "datagrid").rowIdPrefix + "-" + i + "-" + n);
     return l.length || (l = (1 == i ? o.body1 : o.body2).find('tr[node-id="' + n + '"]')), l
    }
    return "footer" == a ? (1 == i ? o.footer1 : o.footer2).find('tr[node-id="' + n + '"]') : "selected" == a ? (1 == i ? o.body1 : o.body2).find("tr.datagrid-row-selected") : "highlight" == a ? (1 == i ? o.body1 : o.body2).find("tr.datagrid-row-over") : "checked" == a ? (1 == i ? o.body1 : o.body2).find("tr.datagrid-row-checked") : "last" == a ? (1 == i ? o.body1 : o.body2).find("tr:last[node-id]") : "allbody" == a ? (1 == i ? o.body1 : o.body2).find("tr[node-id]") : "allfooter" == a ? (1 == i ? o.footer1 : o.footer2).find("tr[node-id]") : void 0
   },
   getRow: function(t, n) {
    var a = "object" == typeof n ? n.attr("node-id") : n;
    return e(t).treegrid("find", a)
   },
   getRows: function(t) {
    return e(t).treegrid("getChildren")
   }
  },
  onBeforeLoad: function(e, t) {},
  onLoadSuccess: function(e, t) {},
  onLoadError: function() {},
  onBeforeCollapse: function(e) {},
  onCollapse: function(e) {},
  onBeforeExpand: function(e) {},
  onExpand: function(e) {},
  onClickRow: function(e) {},
  onDblClickRow: function(e) {},
  onClickCell: function(e, t) {},
  onDblClickCell: function(e, t) {},
  onContextMenu: function(e, t) {},
  onBeforeEdit: function(e) {},
  onAfterEdit: function(e, t) {},
  onCancelEdit: function(e) {}
 })
}(jQuery),
function(e) {
 function t(t) {
  var n = e.data(t, "combo"),
   o = n.options;
  n.panel || (n.panel = e('<div class="combo-panel"></div>').appendTo("body"), n.panel.panel({
   minWidth: o.panelMinWidth,
   maxWidth: o.panelMaxWidth,
   minHeight: o.panelMinHeight,
   maxHeight: o.panelMaxHeight,
   doSize: !1,
   closed: !0,
   cls: "combo-p",
   style: {
    position: "absolute",
    zIndex: 10
   },
   onOpen: function() {
    var t = e(this).panel("options").comboTarget,
     n = e.data(t, "combo");
    n && n.options.onShowPanel.call(t)
   },
   onBeforeClose: function() {
    i(this)
   },
   onClose: function() {
    var t = e(this).panel("options").comboTarget,
     n = e.data(t, "combo");
    n && n.options.onHidePanel.call(t)
   }
  }));
  var r = e.extend(!0, [], o.icons);
  o.hasDownArrow && r.push({
   iconCls: "combo-arrow",
   handler: function(e) {
    a(e.data.target)
   }
  }), e(t).addClass("combo-f").textbox(e.extend({}, o, {
   icons: r,
   onChange: function() {}
  })), e(t).attr("comboName", e(t).attr("textboxName")), n.combo = e(t).next(), n.combo.addClass("combo")
 }

 function n(t) {
  var n = e.data(t, "combo"),
   a = n.options,
   i = n.panel;
  i.is(":visible") && i.panel("close"), a.cloned || i.panel("destroy"), e(t).textbox("destroy")
 }

 function a(t) {
  var n = e.data(t, "combo").panel;
  if (n.is(":visible")) s(t);
  else {
   var a = e(t).closest("div.combo-panel");
   e("div.combo-panel:visible").not(n).not(a).panel("close"), e(t).combo("showPanel")
  }
  e(t).combo("textbox").focus()
 }

 function i(t) {
  e(t).find(".combo-f").each(function() {
   var t = e(this).combo("panel");
   t.is(":visible") && t.panel("close")
  })
 }

 function o(t) {
  var n = t.data.target,
   i = e.data(n, "combo"),
   o = i.options,
   r = i.panel;
  if (o.editable) {
   var d = e(n).closest("div.combo-panel");
   e("div.combo-panel:visible").not(r).not(d).panel("close")
  } else a(n)
 }

 function r(t) {
  var n = t.data.target,
   a = e(n),
   i = a.data("combo"),
   o = a.combo("options");
  switch (t.keyCode) {
   case 38:
    o.keyHandler.up.call(n, t);
    break;
   case 40:
    o.keyHandler.down.call(n, t);
    break;
   case 37:
    o.keyHandler.left.call(n, t);
    break;
   case 39:
    o.keyHandler.right.call(n, t);
    break;
   case 13:
    return t.preventDefault(), o.keyHandler.enter.call(n, t), !1;
   case 9:
   case 27:
    s(n);
    break;
   default:
    o.editable && (i.timer && clearTimeout(i.timer), i.timer = setTimeout(function() {
     var e = a.combo("getText");
     i.previousText != e && (i.previousText = e, a.combo("showPanel"), o.keyHandler.query.call(n, e, t), a.combo("validate"))
    }, o.delay))
  }
 }

 function d(t) {
  function n() {
   var t = o.offset().left;
   return "right" == d.panelAlign && (t += o._outerWidth() - r._outerWidth()), t + r._outerWidth() > e(window)._outerWidth() + e(document).scrollLeft() && (t = e(window)._outerWidth() + e(document).scrollLeft() - r._outerWidth()), 0 > t && (t = 0), t
  }

  function a() {
   var t = o.offset().top + o._outerHeight();
   return t + r._outerHeight() > e(window)._outerHeight() + e(document).scrollTop() && (t = o.offset().top - r._outerHeight()), t < e(document).scrollTop() && (t = o.offset().top + o._outerHeight()), t
  }
  var i = e.data(t, "combo"),
   o = i.combo,
   r = i.panel,
   d = e(t).combo("options"),
   s = r.panel("options");
  s.comboTarget = t, s.closed && (r.panel("panel").show().css({
    zIndex: e.fn.jemenu ? e.fn.jemenu.defaults.zIndex++ : e.fn.window.defaults.zIndex++,
    left: -999999
   }), r.panel("resize", {
    width: d.panelWidth ? d.panelWidth : o._outerWidth(),
    height: d.panelHeight
   }), r.panel("panel").hide(), r.panel("open")),
   function() {
    r.is(":visible") && (r.panel("move", {
     left: n(),
     top: a()
    }), setTimeout(arguments.callee, 200))
   }()
 }

 function s(t) {
  var n = e.data(t, "combo").panel;
  n.panel("close")
 }

 function l(t) {
  var n = e.data(t, "combo"),
   a = n.options,
   i = n.combo;
  e(t).textbox("clear"), a.multiple ? i.find(".textbox-value").remove() : i.find(".textbox-value").val("")
 }

 function c(t, n) {
  var a = e.data(t, "combo"),
   i = e(t).textbox("getText");
  i != n && (e(t).textbox("setText", n), a.previousText = n)
 }

 function u(t) {
  var n = [],
   a = e.data(t, "combo").combo;
  return a.find(".textbox-value").each(function() {
   n.push(e(this).val())
  }), n
 }

 function h(t, n) {
  var a = e.data(t, "combo"),
   i = a.options,
   o = a.combo;
  e.isArray(n) || (n = n.split(i.separator));
  var r = u(t);
  o.find(".textbox-value").remove();
  for (var d = e(t).attr("textboxName") || "", s = 0; s < n.length; s++) {
   var l = e('<input type="hidden" class="textbox-value">').appendTo(o);
   l.attr("name", d), i.disabled && l.attr("disabled", "disabled"), l.val(n[s])
  }
  var c = function() {
   if (r.length != n.length) return !0;
   var t = e.extend(!0, [], r),
    a = e.extend(!0, [], n);
   t.sort(), a.sort();
   for (var i = 0; i < t.length; i++)
    if (t[i] != a[i]) return !0;
   return !1
  }();
  c && (i.multiple ? i.onChange.call(t, n, r) : i.onChange.call(t, n[0], r[0]))
 }

 function f(e) {
  var t = u(e);
  return t[0]
 }

 function p(e, t) {
  h(e, [t])
 }

 function g(t) {
  var n = e.data(t, "combo").options,
   a = n.onChange;
  n.onChange = function() {}, n.multiple ? h(t, n.value ? n.value : []) : p(t, n.value), n.onChange = a
 }
 e(function() {
  e(document).unbind(".combo").bind("mousedown.combo mousewheel.combo", function(t) {
   var n = e(t.target).closest("span.combo,div.combo-p");
   return n.length ? void i(n) : void e("body>div.combo-p>div.combo-panel:visible").panel("close")
  })
 }), e.fn.combo = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.combo.methods[n];
   return i ? i(this, a) : this.textbox(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "combo");
   a ? (e.extend(a.options, n), void 0 != n.value && (a.options.originalValue = n.value)) : (a = e.data(this, "combo", {
    options: e.extend({}, e.fn.combo.defaults, e.fn.combo.parseOptions(this), n),
    previousText: ""
   }), a.options.originalValue = a.options.value), t(this), g(this)
  })
 }, e.fn.combo.methods = {
  options: function(t) {
   var n = t.textbox("options");
   return e.extend(e.data(t[0], "combo").options, {
    width: n.width,
    height: n.height,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  cloneFrom: function(t, n) {
   return t.each(function() {
    e(this).textbox("cloneFrom", n), e.data(this, "combo", {
     options: e.extend(!0, {
      cloned: !0
     }, e(n).combo("options")),
     combo: e(this).next(),
     panel: e(n).combo("panel")
    }), e(this).addClass("combo-f").attr("comboName", e(this).attr("textboxName"))
   })
  },
  panel: function(t) {
   return e.data(t[0], "combo").panel
  },
  destroy: function(e) {
   return e.each(function() {
    n(this)
   })
  },
  showPanel: function(e) {
   return e.each(function() {
    d(this)
   })
  },
  hidePanel: function(e) {
   return e.each(function() {
    s(this)
   })
  },
  clear: function(e) {
   return e.each(function() {
    l(this)
   })
  },
  reset: function(t) {
   return t.each(function() {
    var t = e.data(this, "combo").options;
    t.multiple ? e(this).combo("setValues", t.originalValue) : e(this).combo("setValue", t.originalValue)
   })
  },
  setText: function(e, t) {
   return e.each(function() {
    c(this, t)
   })
  },
  getValues: function(e) {
   return u(e[0])
  },
  setValues: function(e, t) {
   return e.each(function() {
    h(this, t)
   })
  },
  getValue: function(e) {
   return f(e[0])
  },
  setValue: function(e, t) {
   return e.each(function() {
    p(this, t)
   })
  }
 }, e.fn.combo.parseOptions = function(t) {
  var n = e(t);
  return e.extend({}, e.fn.textbox.parseOptions(t), e.parser.parseOptions(t, ["separator", "panelAlign", {
   panelWidth: "number",
   hasDownArrow: "boolean",
   delay: "number",
   selectOnNavigation: "boolean"
  }, {
   panelMinWidth: "number",
   panelMaxWidth: "number",
   panelMinHeight: "number",
   panelMaxHeight: "number"
  }]), {
   panelHeight: "auto" == n.attr("panelHeight") ? "auto" : parseInt(n.attr("panelHeight")) || void 0,
   multiple: n.attr("multiple") ? !0 : void 0
  })
 }, e.fn.combo.defaults = e.extend({}, e.fn.textbox.defaults, {
  inputEvents: {
   click: o,
   keydown: r,
   paste: r,
   drop: r
  },
  panelWidth: null,
  panelHeight: 200,
  panelMinWidth: null,
  panelMaxWidth: null,
  panelMinHeight: null,
  panelMaxHeight: null,
  panelAlign: "left",
  multiple: !1,
  selectOnNavigation: !0,
  separator: ",",
  hasDownArrow: !0,
  delay: 200,
  keyHandler: {
   up: function(e) {},
   down: function(e) {},
   left: function(e) {},
   right: function(e) {},
   enter: function(e) {},
   query: function(e, t) {}
  },
  onShowPanel: function() {},
  onHidePanel: function() {},
  onChange: function(e, t) {}
 })
}(jQuery),
function(e) {
 function t(t, n) {
  for (var a = e.data(t, "combobox"), i = a.options, o = a.data, r = 0; r < o.length; r++)
   if (o[r][i.valueField] == n) return r;
  return -1
 }

 function n(t, n) {
  var a = e.data(t, "combobox").options,
   i = e(t).combo("panel"),
   o = a.finder.getEl(t, n);
  if (o.length)
   if (o.position().top <= 0) {
    var r = i.scrollTop() + o.position().top;
    i.scrollTop(r)
   } else if (o.position().top + o.outerHeight() > i.height()) {
   var r = i.scrollTop() + o.position().top + o.outerHeight() - i.height();
   i.scrollTop(r)
  }
 }

 function a(t, a) {
  var o = e.data(t, "combobox").options,
   r = e(t).combobox("panel"),
   d = r.children("div.combobox-item-hover");
  d.length || (d = r.children("div.combobox-item-selected")), d.removeClass("combobox-item-hover");
  var s = "div.combobox-item:visible:not(.combobox-item-disabled):first",
   l = "div.combobox-item:visible:not(.combobox-item-disabled):last";
  if (d.length ? "next" == a ? (d = d.nextAll(s), d.length || (d = r.children(s))) : (d = d.prevAll(s), d.length || (d = r.children(l))) : d = r.children("next" == a ? s : l), d.length) {
   d.addClass("combobox-item-hover");
   var c = o.finder.getRow(t, d);
   c && (n(t, c[o.valueField]), o.selectOnNavigation && i(t, c[o.valueField]))
  }
 }

 function i(t, n) {
  var a = e.data(t, "combobox").options,
   i = e(t).combo("getValues"); - 1 == e.inArray(n + "", i) && (a.multiple ? i.push(n) : i = [n], r(t, i), a.onSelect.call(t, a.finder.getRow(t, n)))
 }

 function o(t, n) {
  var a = e.data(t, "combobox").options,
   i = e(t).combo("getValues"),
   o = e.inArray(n + "", i);
  o >= 0 && (i.splice(o, 1), r(t, i), a.onUnselect.call(t, a.finder.getRow(t, n)))
 }

 function r(t, n, a) {
  var i = e.data(t, "combobox").options,
   o = e(t).combo("panel");
  e.isArray(n) || (n = n.split(i.separator)), o.find("div.combobox-item-selected").removeClass("combobox-item-selected");
  for (var r = [], d = [], s = 0; s < n.length; s++) {
   var l = n[s],
    c = l;
   i.finder.getEl(t, l).addClass("combobox-item-selected");
   var u = i.finder.getRow(t, l);
   u && (c = u[i.textField]), r.push(l), d.push(c)
  }
  e(t).combo("setValues", r), a || e(t).combo("setText", d.join(i.separator))
 }

 function d(t, n, a) {
  var i = e.data(t, "combobox"),
   o = i.options;
  i.data = o.loadFilter.call(t, n), i.groups = [], n = i.data;
  for (var d = e(t).combobox("getValues"), s = [], l = void 0, c = 0; c < n.length; c++) {
   var u = n[c],
    h = u[o.valueField] + "",
    f = u[o.textField],
    p = u[o.groupField];
   p ? l != p && (l = p, i.groups.push(p), s.push('<div id="' + (i.groupIdPrefix + "_" + (i.groups.length - 1)) + '" class="combobox-group">'), s.push(o.groupFormatter ? o.groupFormatter.call(t, p) : p), s.push("</div>")) : l = void 0;
   var g = "combobox-item" + (u.disabled ? " combobox-item-disabled" : "") + (p ? " combobox-gitem" : "");
   s.push('<div id="' + (i.itemIdPrefix + "_" + c) + '" class="' + g + '">'), s.push(o.formatter ? o.formatter.call(t, u) : f), s.push("</div>"), u.selected && -1 == e.inArray(h, d) && d.push(h)
  }
  e(t).combo("panel").html(s.join("")), o.multiple ? r(t, d, a) : r(t, d.length ? [d[d.length - 1]] : [], a), o.onLoadSuccess.call(t, n)
 }

 function s(t, n, a, i) {
  var o = e.data(t, "combobox").options;
  n && (o.url = n), a = a || {}, 0 != o.onBeforeLoad.call(t, a) && o.loader.call(t, a, function(e) {
   d(t, e, i)
  }, function() {
   o.onLoadError.apply(this, arguments)
  })
 }

 function l(t, n) {
  var a = e.data(t, "combobox"),
   i = a.options;
  if (i.multiple && !n ? r(t, [], !0) : r(t, [n], !0), "remote" == i.mode) s(t, null, {
   q: n
  }, !0);
  else {
   var o = e(t).combo("panel");
   o.find("div.combobox-item-selected,div.combobox-item-hover").removeClass("combobox-item-selected combobox-item-hover"), o.find("div.combobox-item,div.combobox-group").hide();
   var d = a.data,
    l = [],
    c = i.multiple ? n.split(i.separator) : [n];
   e.map(c, function(n) {
    n = e.trim(n);
    for (var o = void 0, r = 0; r < d.length; r++) {
     var s = d[r];
     if (i.filter.call(t, n, s)) {
      var c = s[i.valueField],
       u = s[i.textField],
       h = s[i.groupField],
       f = i.finder.getEl(t, c).show();
      u.toLowerCase() == n.toLowerCase() && (l.push(c), f.addClass("combobox-item-selected")), i.groupField && o != h && (e("#" + a.groupIdPrefix + "_" + e.inArray(h, a.groups)).show(), o = h)
     }
    }
   }), r(t, l, !0)
  }
 }

 function c(n) {
  var a = e(n),
   i = a.combobox("options"),
   o = a.combobox("panel"),
   r = o.children("div.combobox-item-hover");
  if (r.length) {
   var d = i.finder.getRow(n, r),
    s = d[i.valueField];
   i.multiple && r.hasClass("combobox-item-selected") ? a.combobox("unselect", s) : a.combobox("select", s)
  }
  var l = [];
  e.map(a.combobox("getValues"), function(e) {
   t(n, e) >= 0 && l.push(e)
  }), a.combobox("setValues", l), i.multiple || a.combobox("hidePanel")
 }

 function u(t) {
  var a = e.data(t, "combobox"),
   r = a.options;
  h++, a.itemIdPrefix = "_easyui_combobox_i" + h, a.groupIdPrefix = "_easyui_combobox_g" + h, e(t).addClass("combobox-f"), e(t).combo(e.extend({}, r, {
   onShowPanel: function() {
    e(t).combo("panel").find("div.combobox-item,div.combobox-group").show(), n(t, e(t).combobox("getValue")), r.onShowPanel.call(t)
   }
  })), e(t).combo("panel").unbind().bind("mouseover", function(t) {
   e(this).children("div.combobox-item-hover").removeClass("combobox-item-hover");
   var n = e(t.target).closest("div.combobox-item");
   n.hasClass("combobox-item-disabled") || n.addClass("combobox-item-hover"), t.stopPropagation()
  }).bind("mouseout", function(t) {
   e(t.target).closest("div.combobox-item").removeClass("combobox-item-hover"), t.stopPropagation()
  }).bind("click", function(n) {
   var a = e(n.target).closest("div.combobox-item");
   if (a.length && !a.hasClass("combobox-item-disabled")) {
    var d = r.finder.getRow(t, a);
    if (d) {
     var s = d[r.valueField];
     r.multiple ? a.hasClass("combobox-item-selected") ? o(t, s) : i(t, s) : (i(t, s), e(t).combo("hidePanel")), n.stopPropagation()
    }
   }
  })
 }
 var h = 0;
 e.fn.combobox = function(t, n) {
  if ("string" == typeof t) {
   var a = e.fn.combobox.methods[t];
   return a ? a(this, n) : this.combo(t, n)
  }
  return t = t || {}, this.each(function() {
   var n = e.data(this, "combobox");
   if (n) e.extend(n.options, t), u(this);
   else {
    n = e.data(this, "combobox", {
     options: e.extend({}, e.fn.combobox.defaults, e.fn.combobox.parseOptions(this), t),
     data: []
    }), u(this);
    var a = e.fn.combobox.parseData(this);
    a.length && d(this, a)
   }
   n.options.data && d(this, n.options.data), s(this)
  })
 }, e.fn.combobox.methods = {
  options: function(t) {
   var n = t.combo("options");
   return e.extend(e.data(t[0], "combobox").options, {
    width: n.width,
    height: n.height,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  getData: function(t) {
   return e.data(t[0], "combobox").data
  },
  setValues: function(e, t) {
   return e.each(function() {
    r(this, t)
   })
  },
  setValue: function(e, t) {
   return e.each(function() {
    r(this, [t])
   })
  },
  clear: function(t) {
   return t.each(function() {
    e(this).combo("clear");
    var t = e(this).combo("panel");
    t.find("div.combobox-item-selected").removeClass("combobox-item-selected")
   })
  },
  reset: function(t) {
   return t.each(function() {
    var t = e(this).combobox("options");
    t.multiple ? e(this).combobox("setValues", t.originalValue) : e(this).combobox("setValue", t.originalValue)
   })
  },
  loadData: function(e, t) {
   return e.each(function() {
    d(this, t)
   })
  },
  reload: function(e, t) {
   return e.each(function() {
    s(this, t)
   })
  },
  select: function(e, t) {
   return e.each(function() {
    i(this, t)
   })
  },
  unselect: function(e, t) {
   return e.each(function() {
    o(this, t)
   })
  }
 }, e.fn.combobox.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.fn.combo.parseOptions(t), e.parser.parseOptions(t, ["valueField", "textField", "groupField", "mode", "method", "url"]))
 }, e.fn.combobox.parseData = function(t) {
  function n(t, n) {
   var o = e(t),
    r = {};
   r[i.valueField] = void 0 != o.attr("value") ? o.attr("value") : o.text(), r[i.textField] = o.text(), r.selected = o.is(":selected"), r.disabled = o.is(":disabled"), n && (i.groupField = i.groupField || "group", r[i.groupField] = n), a.push(r)
  }
  var a = [],
   i = e(t).combobox("options");
  return e(t).children().each(function() {
   if ("optgroup" == this.tagName.toLowerCase()) {
    var t = e(this).attr("label");
    e(this).children().each(function() {
     n(this, t)
    })
   } else n(this)
  }), a
 }, e.fn.combobox.defaults = e.extend({}, e.fn.combo.defaults, {
  valueField: "value",
  textField: "text",
  groupField: null,
  groupFormatter: function(e) {
   return e
  },
  mode: "local",
  method: "post",
  url: null,
  data: null,
  keyHandler: {
   up: function(e) {
    a(this, "prev"), e.preventDefault()
   },
   down: function(e) {
    a(this, "next"), e.preventDefault()
   },
   left: function(e) {},
   right: function(e) {},
   enter: function(e) {
    c(this)
   },
   query: function(e, t) {
    l(this, e)
   }
  },
  filter: function(t, n) {
   var a = e(this).combobox("options");
   return 0 == n[a.textField].toLowerCase().indexOf(t.toLowerCase())
  },
  formatter: function(t) {
   var n = e(this).combobox("options");
   return t[n.textField]
  },
  loader: function(t, n, a) {
   var i = e(this).combobox("options");
   return i.url ? void e.ajax({
    type: i.method,
    url: i.url,
    data: t,
    dataType: "json",
    success: function(e) {
     n(e)
    },
    error: function() {
     a.apply(this, arguments)
    }
   }) : !1
  },
  loadFilter: function(e) {
   return e
  },
  finder: {
   getEl: function(n, a) {
    var i = t(n, a),
     o = e.data(n, "combobox").itemIdPrefix + "_" + i;
    return e("#" + o)
   },
   getRow: function(n, a) {
    var i = e.data(n, "combobox"),
     o = a instanceof jQuery ? a.attr("id").substr(i.itemIdPrefix.length + 1) : t(n, a);
    return i.data[parseInt(o)]
   }
  },
  onBeforeLoad: function(e) {},
  onLoadSuccess: function() {},
  onLoadError: function() {},
  onSelect: function(e) {},
  onUnselect: function(e) {}
 })
}(jQuery),
function(e) {
 function t(t) {
  var a = e.data(t, "combotree"),
   i = a.options,
   o = a.tree;
  e(t).addClass("combotree-f"), e(t).combo(i);
  var r = e(t).combo("panel");
  o || (o = e("<ul></ul>").appendTo(r), e.data(t, "combotree").tree = o), o.tree(e.extend({}, i, {
   checkbox: i.multiple,
   onLoadSuccess: function(n, a) {
    var r = e(t).combotree("getValues");
    if (i.multiple)
     for (var d = o.tree("getChecked"), s = 0; s < d.length; s++) {
      var l = d[s].id;
      ! function() {
       for (var e = 0; e < r.length; e++)
        if (l == r[e]) return;
       r.push(l)
      }()
     }
    e(t).combotree("setValues", r), i.onLoadSuccess.call(this, n, a)
   },
   onClick: function(a) {
    i.multiple ? e(this).tree(a.checked ? "uncheck" : "check", a.target) : e(t).combo("hidePanel"), n(t), i.onClick.call(this, a)
   },
   onCheck: function(e, a) {
    n(t), i.onCheck.call(this, e, a)
   }
  }))
 }

 function n(t) {
  var n = e.data(t, "combotree"),
   a = n.options,
   i = n.tree,
   o = [],
   r = [];
  if (a.multiple)
   for (var d = i.tree("getChecked"), s = 0; s < d.length; s++) o.push(d[s].id), r.push(d[s].text);
  else {
   var l = i.tree("getSelected");
   l && (o.push(l.id), r.push(l.text))
  }
  e(t).combo("setValues", o).combo("setText", r.join(a.separator))
 }

 function a(t, a) {
  var i = e.data(t, "combotree"),
   o = i.options,
   r = i.tree,
   d = r.tree("options"),
   s = d.onCheck,
   l = d.onSelect;
  d.onCheck = d.onSelect = function() {}, r.find("span.tree-checkbox").addClass("tree-checkbox0").removeClass("tree-checkbox1 tree-checkbox2"), e.isArray(a) || (a = a.split(o.separator));
  for (var c = 0; c < a.length; c++) {
   var u = r.tree("find", a[c]);
   u && (r.tree("check", u.target), r.tree("select", u.target))
  }
  d.onCheck = s, d.onSelect = l, n(t)
 }
 e.fn.combotree = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.combotree.methods[n];
   return i ? i(this, a) : this.combo(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "combotree");
   a ? e.extend(a.options, n) : e.data(this, "combotree", {
    options: e.extend({}, e.fn.combotree.defaults, e.fn.combotree.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.combotree.methods = {
  options: function(t) {
   var n = t.combo("options");
   return e.extend(e.data(t[0], "combotree").options, {
    width: n.width,
    height: n.height,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  clone: function(t, n) {
   var a = t.combo("clone", n);
   return a.data("combotree", {
    options: e.extend(!0, {}, t.combotree("options")),
    tree: t.combotree("tree")
   }), a
  },
  tree: function(t) {
   return e.data(t[0], "combotree").tree
  },
  loadData: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "combotree").options;
    t.data = n;
    var a = e.data(this, "combotree").tree;
    a.tree("loadData", n)
   })
  },
  reload: function(t, n) {
   return t.each(function() {
    var t = e.data(this, "combotree").options,
     a = e.data(this, "combotree").tree;
    n && (t.url = n), a.tree({
     url: t.url
    })
   })
  },
  setValues: function(e, t) {
   return e.each(function() {
    a(this, t)
   })
  },
  setValue: function(e, t) {
   return e.each(function() {
    a(this, [t])
   })
  },
  clear: function(t) {
   return t.each(function() {
    var t = e.data(this, "combotree").tree;
    t.find("div.tree-node-selected").removeClass("tree-node-selected");
    for (var n = t.tree("getChecked"), a = 0; a < n.length; a++) t.tree("uncheck", n[a].target);
    e(this).combo("clear")
   })
  },
  reset: function(t) {
   return t.each(function() {
    var t = e(this).combotree("options");
    t.multiple ? e(this).combotree("setValues", t.originalValue) : e(this).combotree("setValue", t.originalValue)
   })
  }
 }, e.fn.combotree.parseOptions = function(t) {
  return e.extend({}, e.fn.combo.parseOptions(t), e.fn.tree.parseOptions(t))
 }, e.fn.combotree.defaults = e.extend({}, e.fn.combo.defaults, e.fn.tree.defaults, {
  editable: !1
 })
}(jQuery),
function(e) {
 function t(t) {
  function n(n, a) {
   o.remainText = !1, i(), r.multiple || e(t).combo("hidePanel"), r.onClickRow.call(this, n, a)
  }

  function i() {
   for (var n = d.datagrid("getSelections"), a = [], i = [], s = 0; s < n.length; s++) a.push(n[s][r.idField]), i.push(n[s][r.textField]);
   r.multiple ? e(t).combo("setValues", a) : e(t).combo("setValues", a.length ? a : [""]), o.remainText || e(t).combo("setText", i.join(r.separator))
  }
  var o = e.data(t, "combogrid"),
   r = o.options,
   d = o.grid;
  e(t).addClass("combogrid-f").combo(e.extend({}, r, {
   onShowPanel: function() {
    var t = e(this).combogrid("panel"),
     n = t.outerHeight() - t.height(),
     a = t._size("minHeight"),
     i = t._size("maxHeight");
    e(this).combogrid("grid").datagrid("resize", {
     width: "100%",
     height: isNaN(parseInt(r.panelHeight)) ? "auto" : "100%",
     minHeight: a ? a - n : "",
     maxHeight: i ? i - n : ""
    }), r.onShowPanel.call(this)
   }
  }));
  var s = e(t).combo("panel");
  d || (d = e("<table></table>").appendTo(s), o.grid = d), d.datagrid(e.extend({}, r, {
   border: !1,
   singleSelect: r.singleSelect,
   onLoadSuccess: function(n) {
    var i = e(t).combo("getValues"),
     d = r.onSelect;
    r.onSelect = function() {}, a(t, i, o.remainText), r.onSelect = d, r.onLoadSuccess.apply(t, arguments)
   },
   //onClickRow: n,
   onClickRow: function(e, t) {
    r.onClickRow.call(this, e, t)
   },
   onSelect: function(e, t) {
    i(), r.onSelect.call(this, e, t)
   },
   onUnselect: function(e, t) {
    i(), r.onUnselect.call(this, e, t)
   },
   onSelectAll: function(e) {
    i(), r.onSelectAll.call(this, e)
   },
   onUnselectAll: function(e) {
    r.multiple && i(), r.onUnselectAll.call(this, e)
   }
  }))
 }

 function n(t, n) {
  var a = e.data(t, "combogrid"),
   i = a.options,
   o = a.grid,
   r = o.datagrid("getRows").length;
  if (r) {
   var d = i.finder.getTr(o[0], null, "highlight");
   d.length || (d = i.finder.getTr(o[0], null, "selected"));
   var s;
   if (d.length) {
    var s = parseInt(d.attr("datagrid-row-index"));
    s += "next" == n ? 1 : -1, 0 > s && (s = r - 1), s >= r && (s = 0)
   } else s = "next" == n ? 0 : r - 1; 
   o.datagrid("clearSelections");
   o.datagrid("highlightRow", s), i.selectOnNavigation && (a.remainText = !1, o.datagrid("selectRow", s))
  }
 }

 function a(t, n, a) {
  var i = e.data(t, "combogrid"),
   o = i.options,
   r = i.grid,
   d = r.datagrid("getRows"),
   s = [],
   l = e(t).combo("getValues"),
   c = e(t).combo("options"),
   u = c.onChange;
  c.onChange = function() {}, r.datagrid("clearSelections"), e.isArray(n) || (n = n.split(o.separator));
  for (var h = 0; h < n.length; h++) {
   var f = r.datagrid("getRowIndex", n[h]);
   f >= 0 ? (r.datagrid("selectRow", f), s.push(d[f][o.textField])) : s.push(n[h])
  }
  if (e(t).combo("setValues", l), c.onChange = u, e(t).combo("setValues", n), !a) {
   var p = s.join(o.separator);
   e(t).combo("getText") != p && e(t).combo("setText", p)
  }
 }

 function i(t, n) {
  var i = e.data(t, "combogrid"),
   o = i.options,
   r = i.grid;
  if (i.remainText = !0, o.multiple && !n ? a(t, [], !0) : a(t, [n], !0), "remote" == o.mode) r.datagrid("clearSelections"), r.datagrid("load", e.extend({}, o.queryParams, {
   q: n
  }));
  else {
   if (!n) return;
   r.datagrid("clearSelections").datagrid("highlightRow", -1);
   var d = r.datagrid("getRows"),
    s = o.multiple ? n.split(o.separator) : [n];
   e.map(s, function(n) {
    n = e.trim(n), n && e.map(d, function(e, a) {
     n == e[o.textField] ? r.datagrid("selectRow", a) : o.filter.call(t, n, e) && r.datagrid("highlightRow", a)
    })
   })
  }
 }

 function o(t) {
  var n = e.data(t, "combogrid"),
   a = n.options,
   i = n.grid,
   o = a.finder.getTr(i[0], null, "highlight");
  if (n.remainText = !1, o.length) {
   var r = parseInt(o.attr("datagrid-row-index"));
   a.multiple && o.hasClass("datagrid-row-selected") ? i.datagrid("unselectRow", r) : i.datagrid("selectRow", r)
  }
  var d = [];
  e.map(i.datagrid("getSelections"), function(e) {
   d.push(e[a.idField])
  }), e(t).combogrid("setValues", d), a.multiple || e(t).combogrid("hidePanel")
 }
 e.fn.combogrid = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.combogrid.methods[n];
   return i ? i(this, a) : this.combo(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "combogrid");
   a ? e.extend(a.options, n) : a = e.data(this, "combogrid", {
    options: e.extend({}, e.fn.combogrid.defaults, e.fn.combogrid.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.combogrid.methods = {
  options: function(t) {
   var n = t.combo("options");
   return e.extend(e.data(t[0], "combogrid").options, {
    width: n.width,
    height: n.height,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  grid: function(t) {
   return e.data(t[0], "combogrid").grid
  },
  setValues: function(e, t) {
   return e.each(function() {
    a(this, t)
   })
  },
  setValue: function(e, t) {
   return e.each(function() {
    a(this, [t])
   })
  },
  clear: function(t) {
   return t.each(function() {
    e(this).combogrid("grid").datagrid("clearSelections"), e(this).combo("clear")
   })
  },
  reset: function(t) {
   return t.each(function() {
    var t = e(this).combogrid("options");
    t.multiple ? e(this).combogrid("setValues", t.originalValue) : e(this).combogrid("setValue", t.originalValue)
   })
  }
 }, e.fn.combogrid.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.fn.combo.parseOptions(t), e.fn.datagrid.parseOptions(t), e.parser.parseOptions(t, ["idField", "textField", "mode"]))
 }, e.fn.combogrid.defaults = e.extend({}, e.fn.combo.defaults, e.fn.datagrid.defaults, {
  height: 22,
  loadMsg: null,
  idField: null,
  textField: null,
  mode: "local",
  keyHandler: {
   up: function(e) {
    n(this, "prev"), e.preventDefault()
   },
   down: function(e) {
    n(this, "next"), e.preventDefault()
   },
   left: function(e) {},
   right: function(e) {},
   enter: function(e) {
    o(this)
   },
   query: function(e, t) {
    i(this, e)
   }
  },
  filter: function(t, n) {
   var a = e(this).combogrid("options");
   return 0 == n[a.textField].toLowerCase().indexOf(t.toLowerCase())
  }
 })
}(jQuery),
function(e) {
 function t(t) {
  function n(t) {
   var n = e(t).datebox("options"),
    a = e(t).combo("panel");
   a.unbind(".datebox").bind("click.datebox", function(a) {
    if (e(a.target).hasClass("datebox-button-a")) {
     var i = parseInt(e(a.target).attr("datebox-button-index"));
     n.buttons[i].handler.call(a.target, t)
    }
   })
  }

  function a(t) {
   var n = e(t).combo("panel");
   if (!n.children("div.datebox-button").length) {
    for (var a = e('<div class="datebox-button"><table cellspacing="0" cellpadding="0" style="width:100%"><tr></tr></table></div>').appendTo(n), i = a.find("tr"), o = 0; o < d.buttons.length; o++) {
     var r = e("<td></td>").appendTo(i),
      s = d.buttons[o],
      l = e('<a class="datebox-button-a" href="javascript:void(0)"></a>').html(e.isFunction(s.text) ? s.text(t) : s.text).appendTo(r);
     l.attr("datebox-button-index", o)
    }
    i.find("td").css("width", 100 / d.buttons.length + "%")
   }
  }

  function o(t) {
   var n = e(t).combo("panel"),
    a = n.children("div.datebox-calendar-inner");
   if (n.children()._outerWidth(n.width()), r.calendar.appendTo(a), r.calendar[0].target = t, "auto" != d.panelHeight) {
    var i = n.height();
    n.children().not(a).each(function() {
     i -= e(this).outerHeight()
    }), a._outerHeight(i)
   }
   r.calendar.calendar("resize")
  }
  var r = e.data(t, "datebox"),
   d = r.options;
  if (e(t).addClass("datebox-f").combo(e.extend({}, d, {
    onShowPanel: function() {
     n(this), a(this), o(this), i(this, e(this).datebox("getText"), !0), d.onShowPanel.call(this)
    }
   })), !r.calendar) {
   var s = e(t).combo("panel").css("overflow", "hidden");
   s.panel("options").onBeforeDestroy = function() {
    var t = e(this).find(".calendar-shared");
    t.length && t.insertBefore(t[0].pholder)
   };
   var l = e('<div class="datebox-calendar-inner"></div>').prependTo(s);
   if (d.sharedCalendar) {
    var c = e(d.sharedCalendar);
    c[0].pholder || (c[0].pholder = e('<div class="calendar-pholder" style="display:none"></div>').insertAfter(c)), c.addClass("calendar-shared").appendTo(l), c.hasClass("calendar") || c.calendar(), r.calendar = c
   } else r.calendar = e("<div></div>").appendTo(l).calendar();
   e.extend(r.calendar.calendar("options"), {
    fit: !0,
    border: !1,
    onSelect: function(t) {
     var n = this.target,
      a = e(n).datebox("options");
     i(n, a.formatter.call(n, t)), e(n).combo("hidePanel"), a.onSelect.call(n, t)
    }
   })
  }
  e(t).combo("textbox").parent().addClass("datebox"), e(t).datebox("initValue", d.value)
 }

 function n(e, t) {
  i(e, t, !0)
 }

 function a(t) {
  var n = e.data(t, "datebox"),
   a = n.options,
   o = n.calendar.calendar("options").current;
  o && (i(t, a.formatter.call(t, o)), e(t).combo("hidePanel"))
 }

 function i(t, n, a) {
  var i = e.data(t, "datebox"),
   o = i.options,
   r = i.calendar;
  e(t).combo("setValue", n), r.calendar("moveTo", o.parser.call(t, n)), a || (n ? (n = o.formatter.call(t, r.calendar("options").current), e(t).combo("setValue", n).combo("setText", n)) : e(t).combo("setText", n))
 }
 e.fn.datebox = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.datebox.methods[n];
   return i ? i(this, a) : this.combo(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "datebox");
   a ? e.extend(a.options, n) : e.data(this, "datebox", {
    options: e.extend({}, e.fn.datebox.defaults, e.fn.datebox.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.datebox.methods = {
  options: function(t) {
   var n = t.combo("options");
   return e.extend(e.data(t[0], "datebox").options, {
    width: n.width,
    height: n.height,
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  cloneFrom: function(t, n) {
   return t.each(function() {
    e(this).combo("cloneFrom", n), e.data(this, "datebox", {
     options: e.extend(!0, {}, e(n).datebox("options")),
     calendar: e(n).datebox("calendar")
    }), e(this).addClass("datebox-f")
   })
  },
  calendar: function(t) {
   return e.data(t[0], "datebox").calendar
  },
  initValue: function(t, n) {
   return t.each(function() {
    var t = e(this).datebox("options"),
     n = t.value;
    n && (n = t.formatter.call(this, t.parser.call(this, n))), e(this).combo("initValue", n).combo("setText", n)
   })
  },
  setValue: function(e, t) {
   return e.each(function() {
    i(this, t)
   })
  },
  reset: function(t) {
   return t.each(function() {
    var t = e(this).datebox("options");
    e(this).datebox("setValue", t.originalValue)
   })
  }
 }, e.fn.datebox.parseOptions = function(t) {
  return e.extend({}, e.fn.combo.parseOptions(t), e.parser.parseOptions(t, ["sharedCalendar"]))
 }, e.fn.datebox.defaults = e.extend({}, e.fn.combo.defaults, {
  panelWidth: 180,
  panelHeight: "auto",
  sharedCalendar: null,
  keyHandler: {
   up: function(e) {},
   down: function(e) {},
   left: function(e) {},
   right: function(e) {},
   enter: function(e) {
    a(this)
   },
   query: function(e, t) {
    n(this, e)
   }
  },
  currentText: "Today",
  closeText: "Close",
  okText: "Ok",
  buttons: [{
   text: function(t) {
    return e(t).datebox("options").currentText
   },
   handler: function(t) {
    e(t).datebox("calendar").calendar({
     year: (new Date).getFullYear(),
     month: (new Date).getMonth() + 1,
     current: new Date
    }), a(t)
   }
  }, {
   text: function(t) {
    return e(t).datebox("options").closeText
   },
   handler: function(t) {
    e(this).closest("div.combo-panel").panel("close")
   }
  }],
  formatter: function(e) {
   var t = e.getFullYear(),
    n = e.getMonth() + 1,
    a = e.getDate();
   return (10 > n ? "0" + n : n) + "/" + (10 > a ? "0" + a : a) + "/" + t
  },
  parser: function(e) {
   if (!e) return new Date;
   var t = e.split("/"),
    n = parseInt(t[0], 10),
    a = parseInt(t[1], 10),
    i = parseInt(t[2], 10);
   return isNaN(i) || isNaN(n) || isNaN(a) ? new Date : new Date(i, n - 1, a)
  },
  onSelect: function(e) {}
 })
}(jQuery),
function(e) {
 function t(t) {
  var n = e.data(t, "datetimebox"),
   a = n.options;
  if (e(t).datebox(e.extend({}, a, {
    onShowPanel: function() {
     var t = e(this).datetimebox("getValue");
     o(this, t, !0), a.onShowPanel.call(this)
    },
    formatter: e.fn.datebox.defaults.formatter,
    parser: e.fn.datebox.defaults.parser
   })), e(t).removeClass("datebox-f").addClass("datetimebox-f"), e(t).datebox("calendar").calendar({
    onSelect: function(e) {
     a.onSelect.call(this.target, e)
    }
   }), !n.spinner) {
   var i = e(t).datebox("panel"),
    r = e('<div style="padding:2px"><input></div>').insertAfter(i.children("div.datebox-calendar-inner"));
   n.spinner = r.children("input")
  }
  n.spinner.timespinner({
   width: a.spinnerWidth,
   showSeconds: a.showSeconds,
   separator: a.timeSeparator
  }), e(t).datetimebox("initValue", a.value)
 }

 function n(t) {
  var n = e(t).datetimebox("calendar"),
   a = e(t).datetimebox("spinner"),
   i = n.calendar("options").current;
  return new Date(i.getFullYear(), i.getMonth(), i.getDate(), a.timespinner("getHours"), a.timespinner("getMinutes"), a.timespinner("getSeconds"))
 }

 function a(e, t) {
  o(e, t, !0)
 }

 function i(t) {
  var a = e.data(t, "datetimebox").options,
   i = n(t);
  o(t, a.formatter.call(t, i)), e(t).combo("hidePanel")
 }

 function o(t, n, a) {
  function i(n) {
   function a(e) {
    return (10 > e ? "0" : "") + e
   }
   var i = [a(n.getHours()), a(n.getMinutes())];
   return o.showSeconds && i.push(a(n.getSeconds())), i.join(e(t).datetimebox("spinner").timespinner("options").separator)
  }
  var o = e.data(t, "datetimebox").options;
  if (e(t).combo("setValue", n), !a)
   if (n) {
    var r = o.parser.call(t, n);
    e(t).combo("setValue", o.formatter.call(t, r)), e(t).combo("setText", o.formatter.call(t, r))
   } else e(t).combo("setText", n);
  var r = o.parser.call(t, n);
  e(t).datetimebox("calendar").calendar("moveTo", r), e(t).datetimebox("spinner").timespinner("setValue", i(r))
 }
 e.fn.datetimebox = function(n, a) {
  if ("string" == typeof n) {
   var i = e.fn.datetimebox.methods[n];
   return i ? i(this, a) : this.datebox(n, a)
  }
  return n = n || {}, this.each(function() {
   var a = e.data(this, "datetimebox");
   a ? e.extend(a.options, n) : e.data(this, "datetimebox", {
    options: e.extend({}, e.fn.datetimebox.defaults, e.fn.datetimebox.parseOptions(this), n)
   }), t(this)
  })
 }, e.fn.datetimebox.methods = {
  options: function(t) {
   var n = t.datebox("options");
   return e.extend(e.data(t[0], "datetimebox").options, {
    originalValue: n.originalValue,
    disabled: n.disabled,
    readonly: n.readonly
   })
  },
  cloneFrom: function(t, n) {
   return t.each(function() {
    e(this).datebox("cloneFrom", n), e.data(this, "datetimebox", {
     options: e.extend(!0, {}, e(n).datetimebox("options")),
     spinner: e(n).datetimebox("spinner")
    }), e(this).removeClass("datebox-f").addClass("datetimebox-f")
   })
  },
  spinner: function(t) {
   return e.data(t[0], "datetimebox").spinner
  },
  initValue: function(t, n) {
   return t.each(function() {
    var t = e(this).datetimebox("options"),
     n = t.value;
    n && (n = t.formatter.call(this, t.parser.call(this, n))), e(this).combo("initValue", n).combo("setText", n)
   })
  },
  setValue: function(e, t) {
   return e.each(function() {
    o(this, t)
   })
  },
  reset: function(t) {
   return t.each(function() {
    var t = e(this).datetimebox("options");
    e(this).datetimebox("setValue", t.originalValue)
   })
  }
 }, e.fn.datetimebox.parseOptions = function(t) {
  e(t);
  return e.extend({}, e.fn.datebox.parseOptions(t), e.parser.parseOptions(t, ["timeSeparator", "spinnerWidth", {
   showSeconds: "boolean"
  }]))
 }, e.fn.datetimebox.defaults = e.extend({}, e.fn.datebox.defaults, {
  spinnerWidth: "100%",
  showSeconds: !0,
  timeSeparator: ":",
  keyHandler: {
   up: function(e) {},
   down: function(e) {},
   left: function(e) {},
   right: function(e) {},
   enter: function(e) {
    i(this)
   },
   query: function(e, t) {
    a(this, e)
   }
  },
  buttons: [{
   text: function(t) {
    return e(t).datetimebox("options").currentText
   },
   handler: function(t) {
    var n = e(t).datetimebox("options");
    o(t, n.formatter.call(t, new Date)), e(t).datetimebox("hidePanel")
   }
  }, {
   text: function(t) {
    return e(t).datetimebox("options").okText
   },
   handler: function(e) {
    i(e)
   }
  }, {
   text: function(t) {
    return e(t).datetimebox("options").closeText
   },
   handler: function(t) {
    e(t).datetimebox("hidePanel")
   }
  }],
  formatter: function(t) {
   function n(e) {
    return (10 > e ? "0" : "") + e
   }
   var a = t.getHours(),
    i = t.getMinutes(),
    o = t.getSeconds(),
    r = e(this).datetimebox("spinner").timespinner("options").separator,
    d = e.fn.datebox.defaults.formatter(t) + " " + n(a) + r + n(i);
   return e(this).datetimebox("options").showSeconds && (d += r + n(o)), d
  },
  parser: function(t) {
   if ("" == e.trim(t)) return new Date;
   var n = t.split(" "),
    a = e.fn.datebox.defaults.parser(n[0]);
   if (n.length < 2) return a;
   var i = e(this).datetimebox("spinner").timespinner("options").separator,
    o = n[1].split(i),
    r = parseInt(o[0], 10) || 0,
    d = parseInt(o[1], 10) || 0,
    s = parseInt(o[2], 10) || 0;
   return new Date(a.getFullYear(), a.getMonth(), a.getDate(), r, d, s)
  }
 })
}(jQuery),
function($) {
 function init(e) {
  var t = $('<div class="slider"><div class="slider-inner"><a href="javascript:void(0)" class="slider-handle"></a><span class="slider-tip"></span></div><div class="slider-rule"></div><div class="slider-rulelabel"></div><div style="clear:both"></div><input type="hidden" class="slider-value"></div>').insertAfter(e),
   n = $(e);
  n.addClass("slider-f").hide();
  var a = n.attr("name");
  return a && (t.find("input.slider-value").attr("name", a), n.removeAttr("name").attr("sliderName", a)), t.bind("_resize", function(t, n) {
   return ($(this).hasClass("easyui-fluid") || n) && _a03(e), !1
  }), t
 }

 function _a03(e, t) {
  var n = $.data(e, "slider"),
   a = n.options,
   i = n.slider;
  t && (t.width && (a.width = t.width), t.height && (a.height = t.height)), i._size(a), "h" == a.mode ? (i.css("height", ""), i.children("div").css("height", "")) : (i.css("width", ""), i.children("div").css("width", ""), i.children("div.slider-rule,div.slider-rulelabel,div.slider-inner")._outerHeight(i._outerHeight())), _a08(e)
 }

 function _a09(e) {
  function t(e) {
   var t = i.find("div.slider-rule"),
    n = i.find("div.slider-rulelabel");
   t.empty(), n.empty();
   for (var o = 0; o < e.length; o++) {
    var r = 100 * o / (e.length - 1) + "%",
     d = $("<span></span>").appendTo(t);
    d.css("h" == a.mode ? "left" : "top", r), "|" != e[o] && (d = $("<span></span>").appendTo(n), d.html(e[o]), "h" == a.mode ? d.css({
     left: r,
     marginLeft: -Math.round(d.outerWidth() / 2)
    }) : d.css({
     top: r,
     marginTop: -Math.round(d.outerHeight() / 2)
    }))
   }
  }
  var n = $.data(e, "slider"),
   a = n.options,
   i = n.slider,
   o = "h" == a.mode ? a.rule : a.rule.slice(0).reverse();
  a.reversed && (o = o.slice(0).reverse()), t(o)
 }

 function _a10(e) {
  function t(t) {
   var n = Math.abs(t % a.step);
   n < a.step / 2 ? t -= n : t = t - n + a.step, _a1a(e, t)
  }
  var n = $.data(e, "slider"),
   a = n.options,
   i = n.slider;
  i.removeClass("slider-h slider-v slider-disabled"), i.addClass("h" == a.mode ? "slider-h" : "slider-v"), i.addClass(a.disabled ? "slider-disabled" : ""), i.find("a.slider-handle").draggable({
   axis: a.mode,
   cursor: "pointer",
   disabled: a.disabled,
   onDrag: function(n) {
    var o = n.data.left,
     r = i.width();
    if ("h" != a.mode && (o = n.data.top, r = i.height()), 0 > o || o > r) return !1;
    var d = _a27(e, o);
    return t(d), !1
   },
   onBeforeDrag: function() {
    n.isDragging = !0
   },
   onStartDrag: function() {
    a.onSlideStart.call(e, a.value)
   },
   onStopDrag: function(i) {
    var o = _a27(e, "h" == a.mode ? i.data.left : i.data.top);
    t(o), a.onSlideEnd.call(e, a.value), a.onComplete.call(e, a.value), n.isDragging = !1
   }
  }), i.find("div.slider-inner").unbind(".slider").bind("mousedown.slider", function(i) {
   if (!n.isDragging && !a.disabled) {
    var o = $(this).offset(),
     r = _a27(e, "h" == a.mode ? i.pageX - o.left : i.pageY - o.top);
    t(r), a.onComplete.call(e, a.value)
   }
  })
 }

 function _a1a(e, t) {
  var n = $.data(e, "slider"),
   a = n.options,
   i = n.slider,
   o = a.value;
  t < a.min && (t = a.min), t > a.max && (t = a.max), a.value = t, $(e).val(t), i.find("input.slider-value").val(t);
  var r = _a20(e, t),
   d = i.find(".slider-tip");
  if (a.showTip ? (d.show(), d.html(a.tipFormatter.call(e, a.value))) : d.hide(), "h" == a.mode) {
   var s = "left:" + r + "px;";
   i.find(".slider-handle").attr("style", s), d.attr("style", s + "margin-left:" + -Math.round(d.outerWidth() / 2) + "px")
  } else {
   var s = "top:" + r + "px;";
   i.find(".slider-handle").attr("style", s), d.attr("style", s + "margin-left:" + -Math.round(d.outerWidth()) + "px")
  }
  o != t && a.onChange.call(e, t, o)
 }

 function _a08(e) {
  var t = $.data(e, "slider").options,
   n = t.onChange;
  t.onChange = function() {}, _a1a(e, t.value), t.onChange = n
 }

 function _a20(e, t) {
  var n = $.data(e, "slider"),
   a = n.options,
   i = n.slider,
   o = "h" == a.mode ? i.width() : i.height(),
   r = a.converter.toPosition.call(e, t, o);
  return "v" == a.mode && (r = i.height() - r), a.reversed && (r = o - r), r.toFixed(0)
 }

 function _a27(e, t) {
  var n = $.data(e, "slider"),
   a = n.options,
   i = n.slider,
   o = "h" == a.mode ? i.width() : i.height(),
   r = a.converter.toValue.call(e, "h" == a.mode ? a.reversed ? o - t : t : o - t, o);
  return r.toFixed(0)
 }
 $.fn.slider = function(e, t) {
  return "string" == typeof e ? $.fn.slider.methods[e](this, t) : (e = e || {}, this.each(function() {
   var t = $.data(this, "slider");
   t ? $.extend(t.options, e) : (t = $.data(this, "slider", {
    options: $.extend({}, $.fn.slider.defaults, $.fn.slider.parseOptions(this), e),
    slider: init(this)
   }), $(this).removeAttr("disabled"));
   var n = t.options;
   n.min = parseFloat(n.min), n.max = parseFloat(n.max), n.value = parseFloat(n.value), n.step = parseFloat(n.step), n.originalValue = n.value, _a10(this), _a09(this), _a03(this)
  }))
 }, $.fn.slider.methods = {
  options: function(e) {
   return $.data(e[0], "slider").options
  },
  destroy: function(e) {
   return e.each(function() {
    $.data(this, "slider").slider.remove(), $(this).remove()
   })
  },
  resize: function(e, t) {
   return e.each(function() {
    _a03(this, t)
   })
  },
  getValue: function(e) {
   return e.slider("options").value
  },
  setValue: function(e, t) {
   return e.each(function() {
    _a1a(this, t)
   })
  },
  clear: function(e) {
   return e.each(function() {
    var e = $(this).slider("options");
    _a1a(this, e.min)
   })
  },
  reset: function(e) {
   return e.each(function() {
    var e = $(this).slider("options");
    _a1a(this, e.originalValue)
   })
  },
  enable: function(e) {
   return e.each(function() {
    $.data(this, "slider").options.disabled = !1, _a10(this)
   })
  },
  disable: function(e) {
   return e.each(function() {
    $.data(this, "slider").options.disabled = !0, _a10(this)
   })
  }
 }, $.fn.slider.parseOptions = function(_a31) {
  var t = $(_a31);
  return $.extend({}, $.parser.parseOptions(_a31, ["width", "height", "mode", {
   reversed: "boolean",
   showTip: "boolean",
   min: "number",
   max: "number",
   step: "number"
  }]), {
   value: t.val() || void 0,
   disabled: t.attr("disabled") ? !0 : void 0,
   rule: t.attr("rule") ? eval(t.attr("rule")) : void 0
  })
 }, $.fn.slider.defaults = {
  width: "auto",
  height: "auto",
  mode: "h",
  reversed: !1,
  showTip: !1,
  disabled: !1,
  value: 0,
  min: 0,
  max: 100,
  step: 1,
  rule: [],
  tipFormatter: function(e) {
   return e
  },
  converter: {
   toPosition: function(e, t) {
    var n = $(this).slider("options");
    return (e - n.min) / (n.max - n.min) * t
   },
   toValue: function(e, t) {
    var n = $(this).slider("options");
    return n.min + (n.max - n.min) * (e / t)
   }
  },
  onChange: function(e, t) {},
  onSlideStart: function(e) {},
  onSlideEnd: function(e) {},
  onComplete: function(e) {}
 }
}(jQuery);
var horizonscrollview = $.extend({}, $.fn.datagrid.defaults.view, {
 onAfterRender: function(e) {
  $.fn.datagrid.defaults.view.onAfterRender.call(this, e);
  var t = $(e);
  0 == t.datagrid("getRows").length && setTimeout(function() {
   t.datagrid("appendRow", {}), t.datagrid("options").finder.getTr(e, 0).css("height", 0).find("*").css("height", 0);
   var n = t.datagrid("getPanel").find("div.datagrid-header").height() + 8;
   t.datagrid("getPanel").find(".datagrid-empty").css({
    top: n + "px"
   })
  }, 0)
 }
});
! function(e) {
 function t(t) {
  return e(t).data("treegrid") ? "treegrid" : "datagrid"
 }

 function n(t, n, a) {
  var i = e(t),
   o = i.datagrid("getPanel").find("div.datagrid-header"),
   r = n ? o.find('.datagrid-filter[name="' + n + '"]') : o.find(".datagrid-filter");
  r.each(function() {
   var t = e(this).attr("name"),
    n = (i.datagrid("getColumnOption", t), e(this).closest("div.datagrid-filter-c")),
    o = n.find("a.datagrid-filter-btn");
   if (void 0 != a) try {
    this.filter.resize(this, a)
   } catch (t) {} else try {
    this.filter.resize(this, 10), this.filter.resize(this, n.width() - o._outerWidth())
   } catch (t) {}
  })
 }

 function a(t, n) {
  var a = e(t).datagrid("getPanel").find("div.datagrid-header");
  return a.find('tr.datagrid-filter-row td[field="' + n + '"] .datagrid-filter')
 }

 function i(n, a) {
  for (var i = t(n), o = e(n)[i]("options").filterRules, r = 0; r < o.length; r++)
   if (o[r].field == a) return r;
  return -1
 }

 function o(n, a) {
  var o = t(n),
   r = e(n)[o]("options").filterRules,
   d = i(n, a);
  return d >= 0 ? r[d] : null
 }

 function r(n, o) {
  var r = t(n),
   s = e(n)[r]("options"),
   l = s.filterRules;
  if ("nofilter" == o.op) d(n, o.field);
  else {
   var c = i(n, o.field);
   c >= 0 ? e.extend(l[c], o) : l.push(o)
  }
  var u = a(n, o.field);
  if (u.length) {
   "nofilter" != o.op && u[0].filter.setValue(u, o.value);
   var h = u[0].menu;
   if (h) {
    h.find("." + s.filterMenuIconCls).removeClass(s.filterMenuIconCls);
    var f = h.menu("findItem", s.operators[o.op].text);
    h.menu("setIcon", {
     target: f.target,
     iconCls: s.filterMenuIconCls
    })
   }
  }
 }

 function d(n, o) {
  function r(e) {
   for (var t = 0; t < e.length; t++) {
    var i = a(n, e[t]);
    if (i.length) {
     i[0].filter.setValue(i, "");
     var o = i[0].menu;
     o && o.find("." + l.filterMenuIconCls).removeClass(l.filterMenuIconCls)
    }
   }
  }
  var d = t(n),
   s = e(n),
   l = s[d]("options");
  if (o) {
   var c = i(n, o);
   c >= 0 && l.filterRules.splice(c, 1), r([o])
  } else {
   l.filterRules = [];
   var u = s.datagrid("getColumnFields", !0).concat(s.datagrid("getColumnFields"));
   r(u)
  }
 }

 function s(n) {
  var a = t(n),
   i = e.data(n, a),
   o = i.options;
  o.remoteFilter ? e(n)[a]("load") : (e(n)[a]("getPager").pagination("refresh", {
   pageNumber: 1
  }), e(n)[a]("options").pageNumber = 1, e(n)[a]("loadData", i.filterSource || i.data))
 }

 function l(n, a) {
  function i(t, n) {
   if (!t || !t.length) return [];
   var a = [];
   return e.map(t, function(e) {
    e._parentId = n, a.push(e), a = a.concat(i(e.children, e[d.idField]))
   }), a
  }
  var o = t(this),
   r = e.data(this, o),
   d = r.options;
  if ("datagrid" == o && e.isArray(n)) n = {
   total: n.length,
   rows: n
  };
  else if ("treegrid" == o && e.isArray(n)) {
   var s = i(n, a);
   e.map(s, function(e) {
    e.children = void 0
   }), n = {
    total: s.length,
    rows: s
   }
  }
  if (!d.remoteFilter) {
   if (r.filterSource) {
    if ("datagrid" != o || d.isSorting) {
     if ("treegrid" == o && !d.isSorting) {
      var l = e.extend(!0, [], n.rows);
      r.filterSource.total += l.length, r.filterSource.rows = r.filterSource.rows.concat(l)
     }
    } else r.filterSource = n;
    d.isSorting = void 0
   } else r.filterSource = n;
   if (n = d.filterMatcher.call(this, {
     total: r.filterSource.total,
     rows: e.extend(!0, [], r.filterSource.rows)
    }), d.pagination) {
    var c = e(this),
     u = c[o]("getPager");
    if (u.pagination({
      onSelectPage: function(e, t) {
       d.pageNumber = e, d.pageSize = t, u.pagination("refresh", {
        pageNumber: e,
        pageSize: t
       }), c[o]("loadData", r.filterSource)
      },
      onBeforeRefresh: function() {
       return c[o]("reload"), !1
      }
     }), "datagrid" == o) {
     var h = (d.pageNumber - 1) * parseInt(d.pageSize),
      f = h + parseInt(d.pageSize);
     n.rows = n.rows.slice(h, f)
    } else {
     var p = [],
      g = [];
     e.map(n.rows, function(e) {
      e._parentId ? g.push(e) : p.push(e)
     }), n.total = p.length;
     var h = (d.pageNumber - 1) * parseInt(d.pageSize),
      f = h + parseInt(d.pageSize);
     n.rows = e.extend(!0, [], p.slice(h, f).concat(g))
    }
   }
  }
  return n
 }

 function c(a, i) {
  function o() {
   e("#datagrid-filter-style").length || e("head").append('<style id="datagrid-filter-style">a.datagrid-filter-btn{display:inline-block;width:22px;height:22px;margin:0;vertical-align:top;cursor:pointer;opacity:0.6;filter:alpha(opacity=60);}a:hover.datagrid-filter-btn{opacity:1;filter:alpha(opacity=100);}.datagrid-filter-row .textbox,.datagrid-filter-row .textbox .textbox-text{-moz-border-radius:0;-webkit-border-radius:0;border-radius:0;}.datagrid-filter-row input{margin:0;-moz-border-radius:0;-webkit-border-radius:0;border-radius:0;}</style>')
  }

  function d(t) {
   var i = f.dc,
    o = e(a).datagrid("getColumnFields", t);
   t && p.rownumbers && o.unshift("_");
   var r = (t ? i.header1 : i.header2).find("table.datagrid-htable");
   r.find(".datagrid-filter").each(function() {
    this.filter.destroy && this.filter.destroy(this), this.menu && e(this.menu).menu("destroy")
   }), r.find("tr.datagrid-filter-row").remove();
   
   
   var d = e('<tr class="datagrid-header-row datagrid-filter-row"></tr>');
   "bottom" == p.filterPosition ? d.appendTo(r.find("tbody")) : d.prependTo(r.find("tbody"));
   for (var s = 0; s < o.length; s++) {
    var l = o[s],
     h = e(a).datagrid("getColumnOption", l);
    h && (h.checkbox || h.expander) && (l = "_");
    var g = e("<td></td>").attr("field", l).appendTo(d);
    if (h && h.hidden && g.hide(), "_" != l) {
     var v = e('<div class="datagrid-filter-c"></div>').appendTo(g),
      b = u(l);
     b || (b = e.extend({}, {
      field: l,
      type: p.defaultFilterType,
      options: p.defaultFilterOptions
     }));
     var m = p.filters[b.type],
      x = m.init(v, b.options || {});
     x.addClass("datagrid-filter").attr("name", l), x[0].filter = m, x[0].menu = c(v, b.op), b.options && b.options.onInit && b.options.onInit.call(x[0], a), n(a, l)
    }
   }
  }

  function c(t, n) {
   if (!n) return null;
   var i = e('<a class="datagrid-filter-btn">&nbsp;</a>').addClass(p.filterBtnIconCls);
   "right" == p.filterBtnPosition ? i.appendTo(t) : i.prependTo(t);
   var o = e("<div></div>").appendTo("body");
   return o.menu({
    alignTo: i,
    onClick: function(t) {
     var n = e(this).menu("options").alignTo,
      i = n.closest("td[field]"),
      o = i.attr("field"),
      d = i.find(".datagrid-filter"),
      l = d[0].filter.getValue(d);
     r(a, {
      field: o,
      op: t.name,
      value: l
     }), p.onClickMenu.call(a, t, n), s(a)
    }
   }), e.each(["nofilter"].concat(n), function(e, t) {
    var n = p.operators[t];
    n && o.menu("appendItem", {
     text: n.text,
     name: t
    })
   }), i[0].menu = o, i.bind("click", {
    menu: o
   }, function(t) {
    return e(this.menu).menu("show"), !1
   }), o
  }

  function u(e) {
   for (var t = 0; t < i.length; t++) {
    var n = i[t];
    if (n.field == e) return n
   }
   return null
  }
  i = i || [];
  var h = t(a),
   f = e.data(a, h),
   p = f.options;
  p.filterRules.length || (p.filterRules = []);
  var g = p.onResizeColumn;
  p.onResizeColumn = function(t, i) {
   p.fitColumns ? (n(a, null, 10), e(a).datagrid("fitColumns"), n(a)) : n(a, t), g.call(a, t, i)
  };
  var v = p.onResize;
  p.onResize = function(t, i) {
   n(a, null, 10), e(a).datagrid("fitColumns"), n(a), v.call(this, t, i)
  };
  var b = p.onBeforeLoad;
  p.onBeforeLoad = function(e, t) {
   e && (e.filterRules = p.filterStringify(p.filterRules)), t && (t.filterRules = p.filterStringify(p.filterRules));
   var n = b.call(this, e, t);
   return 0 != n && p.url && (f.filterSource = null), n
  };
  var m = e.data(a, "datagrid").options,
   x = m.onBeforeSortColumn;
  m.onBeforeSortColumn = function(e, t) {
   var n = x.call(this, e, t);
   return 0 != n && (p.isSorting = !0), n
  };
  var w = p.onBeforeEdit;
  p.onBeforeEdit = function(t, n) {
   var a = w.call(this, t, n);
   return f.originalEditingRow = e.extend(!0, {}, "treegrid" == h ? t : n), a
  };
  var _ = p.onAfterEdit;
  p.onAfterEdit = function(t, n, a) {
   if (p.idField && f.filterSource)
    for (var i = 0; i < f.filterSource.rows.length; i++) {
     var o = f.filterSource.rows[i];
     if (o[p.idField] == f.originalEditingRow[p.idField]) {
      e.extend(o, "treegrid" == h ? t : n);
      break
     }
    }
   _.call(this, t, n, a)
  }, p.loadFilter = function(e, t) {
   var n = p.oldLoadFilter.call(this, e, t);
   return l.call(this, n, t)
  }, o(), d(!0), d(), p.fitColumns && setTimeout(function() {
   n(a)
  }, 0), e.map(p.filterRules, function(e) {
   r(a, e)
  })
 }
 var u = e.fn.datagrid.methods.autoSizeColumn;
 e.fn.datagrid.methods.autoSizeColumn = function(t, a) {
  return t.each(function() {
   n(this, a, 10), u.call(e.fn.datagrid.methods, e(this), a), n(this, a)
  })
 };
 var h = e.fn.datagrid.methods.loadData;
 e.fn.datagrid.methods.loadData = function(t, n) {
  return t.each(function() {
   e.data(this, "datagrid").filterSource = null
  }), h.call(e.fn.datagrid.methods, t, n)
 };
 var f = e.fn.treegrid.methods.loadData;
 e.fn.treegrid.methods.loadData = function(t, n) {
  return t.each(function() {
   e.data(this, "treegrid").filterSource = null
  }), f.call(e.fn.treegrid.methods, t, n)
 };
 var p = e.fn.datagrid.methods.appendRow;
 e.fn.datagrid.methods.appendRow = function(t, n) {
  var a = p.call(e.fn.datagrid.methods, t, n);
  return t.each(function() {
   var t = e(this).data("datagrid");
   t.filterSource && (t.filterSource.total++, t.filterSource.rows.push(n))
  }), a
 };
 var g = e.fn.treegrid.methods.append;
 e.fn.treegrid.methods.append = function(t, n) {
  var a = g.call(e.fn.treegrid.methods, t, n);
  return t.each(function() {}), a
 };
 var v = e.fn.datagrid.methods.deleteRow;
 e.fn.datagrid.methods.deleteRow = function(t, n) {
  return t.each(function() {
   var t = e(this).data("datagrid"),
    a = t.options;
   if (t.filterSource && a.idField)
    for (var i = 0; i < t.filterSource.rows.length; i++) {
     var o = t.filterSource.rows[i];
     if (o[a.idField] == t.data.rows[n][a.idField]) {
      t.filterSource.rows.splice(i, 1), t.filterSource.total--;
      break
     }
    }
  }), v.call(e.fn.datagrid.methods, t, n)
 };
 var b = {
  filterMenuIconCls: "icon-ok",
  filterBtnIconCls: "icon-filter",
  filterBtnPosition: "right",
  filterPosition: "bottom",
  remoteFilter: !1,
  filterDelay: 400,
  filterOnlyEnterKey: false,
  filterRules: [],
  filterMatcher: function(n) {
   function a(e) {
    for (var t = d.filterRules, n = 0; n < t.length; n++) {
     var a = t[n],
      i = e[a.field];
     void 0 == i && (i = "");
     var o = d.operators[a.op];
     if (!o.isMatch(i, a.value)) return !1
    }
    return !0
   }

   function i(e, t) {
    for (var n = 0; n < e.length; n++) {
     var a = e[n];
     if (a[d.idField] == t) return a
    }
    return null
   }
   var o = t(this),
    r = e.data(this, o),
    d = r.options;
   if (d.filterRules.length) {
    var s = [];
    if ("treegrid" == o) {
     var l = {};
     e.map(n.rows, function(e) {
      if (a(e))
       for (l[e[d.idField]] = e, e = i(n.rows, e._parentId); e;) l[e[d.idField]] = e, e = i(n.rows, e._parentId)
     });
     for (var c in l) s.push(l[c])
    } else
     for (var u = 0; u < n.rows.length; u++) {
      var h = n.rows[u];
      a(h) && s.push(h)
     }
    n = {
     total: n.total - (n.rows.length - s.length),
     rows: s
    }
   }
   return n
  },
  defaultFilterType: "text",
  defaultFilterOperator: "contains",
  defaultFilterOptions: {
   onInit: function(n) {
    function a(r) {
        var o = e(n)[i]("options");
        if (o.filterOnlyEnterKey) {
            
            var d = e(n)[i]('getPanel').find('div.datagrid-header');
            var r = d.find('.datagrid-filter');
            var dFo = o.defaultFilterOperator;
            
            r.each(function(){
                var $this = $(this), v = $this.val();
                if (v != '') {
                    e(n)[i]('addFilterRule', { field: $this.attr('name'), op: dFo, value: v });
                } else {
                    e(n)[i]('removeFilterRule', $this.attr('name'));
                }
            });
            e(n)[i]('doFilter');
            
        } else {
            var t = r.attr("name"),
            a = e(n)[i]("getFilterRule", t),
            d = r.val();
           "" != d ? (a && a.value != d || !a) && (e(n)[i]("addFilterRule", {
            field: t,
            op: o.defaultFilterOperator,
            value: d
           }), e(n)[i]("doFilter")) : a && (e(n)[i]("removeFilterRule", t), e(n)[i]("doFilter"))
        }
    }
    var i = t(n),
     o = e(n)[i]("options"),
     r = e(this);
    r.unbind(".filter").bind("keydown.filter", function(t) {
        if (o.filterOnlyEnterKey) {
            e(this), this.timer && clearTimeout(this.timer), 13 == t.keyCode && a(e(this))
        } else {
            e(this), this.timer && clearTimeout(this.timer), 13 == t.keyCode ? a(e(this)) : this.timer = setTimeout(function() {
            a(e(this))
           }, o.filterDelay)
        }
    })
   }
  },
  filterStringify: function(e) {
   return JSON.stringify(e)
  },
  onClickMenu: function(e, t) {}
 };
 e.extend(e.fn.datagrid.defaults, b), e.extend(e.fn.treegrid.defaults, b), e.fn.datagrid.defaults.filters = e.extend({}, e.fn.datagrid.defaults.editors, {
  label: {
   init: function(t, n) {
    return e("<span></span>").appendTo(t)
   },
   getValue: function(t) {
    return e(t).html()
   },
   setValue: function(t, n) {
    e(t).html(n)
   },
   resize: function(t, n) {
    e(t)._outerWidth(n)._outerHeight(22)
   }
  }
 }), e.fn.treegrid.defaults.filters = e.fn.datagrid.defaults.filters, e.fn.datagrid.defaults.operators = {
  nofilter: {
   text: "No Filter"
  },
  contains: {
   text: "Contains",
   isMatch: function(e, t) {
    return e = String(e), t = String(t), e.toLowerCase().indexOf(t.toLowerCase()) >= 0
   }
  },
  equal: {
   text: "Equal",
   isMatch: function(e, t) {
    return e == t
   }
  },
  notequal: {
   text: "Not Equal",
   isMatch: function(e, t) {
    return e != t
   }
  },
  beginwith: {
   text: "Begin With",
   isMatch: function(e, t) {
    return e = String(e), t = String(t), 0 == e.toLowerCase().indexOf(t.toLowerCase())
   }
  },
  endwith: {
   text: "End With",
   isMatch: function(e, t) {
    return e = String(e), t = String(t), -1 !== e.toLowerCase().indexOf(t.toLowerCase(), e.length - t.length)
   }
  },
  less: {
   text: "Less",
   isMatch: function(e, t) {
    return t > e
   }
  },
  lessorequal: {
   text: "Less Or Equal",
   isMatch: function(e, t) {
    return t >= e
   }
  },
  greater: {
   text: "Greater",
   isMatch: function(e, t) {
    return e > t
   }
  },
  greaterorequal: {
   text: "Greater Or Equal",
   isMatch: function(e, t) {
    return e >= t
   }
  }
 }, e.fn.treegrid.defaults.operators = e.fn.datagrid.defaults.operators, e.extend(e.fn.datagrid.methods, {
  enableFilter: function(n, a) {
   return n.each(function() {
    var n = t(this),
     i = e.data(this, n).options;
    i.oldLoadFilter = i.loadFilter, c(this, a), e(this)[n]("resize"), i.filterRules.length && s(this)
   })
  },
  disableFilter: function(n) {
   return n.each(function() {
    var n = t(this),
     a = e.data(this, n).options,
     i = e(this).data("datagrid").dc,
     o = i.header1.add(i.header2).find(".datagrid-filter-row");
    o.find(".datagrid-filter-btn").each(function() {
     e(this.menu).menu("destroy")
    }), o.find(".combo-f").each(function() {
     e(this).combo("destroy")
    }), e(this)[n]({
     loadFilter: a.oldLoadFilter || void 0,
     oldLoadFilter: null
    })
   })
  },
  destroyFilter: function(jq, field){
        return jq.each(function(){
            var name = getPluginName(this);
            var state = $.data(this, name);
            var opts = state.options;
            if (field){
                _destroy(field);
            } else {
                for(var f in opts.filterCache){
                    _destroy(f);
                }
                $(this).datagrid('getPanel').find('.datagrid-header .datagrid-filter-row').remove();
                $(this).data('datagrid').dc.view.children('.datagrid-filter-cache').remove();
                opts.filterCache = {};
                $(this)[name]('resize');
                $(this)[name]('disableFilter');
            }

            function _destroy(field){
                var c = $(opts.filterCache[field]);
                var input = c.find('.datagrid-filter');
                if (input.length){
                    var filter = input[0].filter;
                    if (filter.destroy){
                        filter.destroy(input[0]);
                    }
                }
                c.find('.datagrid-filter-btn').each(function(){
                    $(this.menu).menu('destroy');
                });
                c.remove();
                opts.filterCache[field] = undefined;
            }
        });
    },
  getFilterRule: function(e, t) {
   return o(e[0], t)
  },
  addFilterRule: function(e, t) {
   return e.each(function() {
    r(this, t)
   })
  },
  removeFilterRule: function(e, t) {
   return e.each(function() {
    d(this, t)
   })
  },
  doFilter: function(e) {
   return e.each(function() {
    s(this)
   })
  },
  getFilterComponent: function(e, t) {
   return a(e[0], t)
  }
 })
}(jQuery), $.extend($.fn.datagrid.methods, {
    autoMergeCells: function (jq, fields) {
        
        var isTree = false;
        
        if (fields.hasOwnProperty('isTree') && fields.isTree) {
            var treeRows = fields.rows; isTree = true;
            delete fields.rows; delete fields.isTree;
        }
            
        if ('keyfield' in Object(fields)) {
            var keyfield = fields.keyfield;
            delete fields.keyfield;

            return jq.each(function () {
                var target = $(this), isKeyField = false;
                if (!fields) {                
                    fields = target.datagrid('getColumnFields');
                } 
                
                for (var f in fields) {
                    if (fields[f] == keyfield) {
                        isKeyField = true;
                    }
                }
                
                if (!isKeyField) {
                    fields.push(keyfield);
                }
                
                if (isTree) {
                    var rows = treeRows; //target.treegrid('getData');
                    var firstRowId = rows[0].id;
                    var $body = target.datagrid('getPanel').find('div.datagrid-body').find('tr[node-id="'+firstRowId+'"]').closest('tbody');
                } else {
                    var rows = target.datagrid('getRows');
                }
                
                var i = 0, j = 0, temp = {}, rowsLength = rows.length, fieldsLength = fields.length, tempSkip = {};
                
                for (i; i < rowsLength; i++) {
                    var row = rows[i]; j = 0;

                    for (j; j < fieldsLength; j++) {
                        var field = fields[j];
                        var tf = temp[field];
                        if (!tf) {
                            tf = temp[field] = {};
                            tf[row[field]] = [i];
                            if (field == keyfield) {
                                tempSkip[i] = {'check': true, 'value': row[field]};
                            }
                        } else {
                            var tfv = tf[row[field]];
                            if (tfv) {
                                tfv.push(i);        
                                if (field == keyfield) {                    
                                    tempSkip[i - 1] = {'check': false, 'value': row[field]};
                                    tempSkip[i] = {'check': false, 'value': row[field]};
                                }
                            } else {
                                tfv = tf[row[field]] = [i];
                                if (field == keyfield) {
                                    tempSkip[i] = {'check': true, 'value': row[field]};
                                }
                            }
                        }
                    }
                }

                $.each(temp, function (field, column) {
                    $.each(column, function () {
                        var group = this;
                        var groupLength = group.length;

                        if (groupLength > 1) {
                            var before, after, mergeIndex = group[0];

                            for (var i = 0; i < groupLength; i++) {
                                if (typeof tempSkip[group[i]] !== 'undefined' && tempSkip[group[i]]['check'] && field != keyfield) {
                                    mergeIndex = group[i + 1];
                                    continue;
                                }													

                                before = group[i];
                                after = group[i + 1];

                                if (after && (after - before) == 1 && !tempSkip[after]['check'] && tempSkip[after]['value'] == tempSkip[before]['value']) {
                                    continue;
                                }
                                var rowspan = before - mergeIndex + 1;

                                if (rowspan > 1) {

                                    var mergeProps = {
                                        index: mergeIndex,
                                        field: field,
                                        rowspan: rowspan
                                    };

                                    if (isTree) {
                                        mergeProps.rowId = $body.find('tr:eq('+mergeIndex+')').attr('node-id');
                                    }

                                    target.datagrid('mergeCells', mergeProps);
                                }

                                if (after && ((after - before) != 1 || !tempSkip[group[i]]['check'] && field != keyfield && tempSkip[after]['value'] != tempSkip[before]['value'])) {
                                    mergeIndex = after;
                                }
                            }
                        }
                    });
                });
            });

        } else {
            
            return jq.each(function () {
                var target = $(this);
                if (!fields) {
                    fields = target.datagrid('getColumnFields');
                }

                if (isTree) {
                    var rows = treeRows;
                    var firstRowId = rows[0].id;
                    var $body = target.datagrid('getPanel').find('div.datagrid-body').find('tr[node-id="'+firstRowId+'"]').closest('tbody');
                } else {
                    var rows = target.datagrid('getRows');
                }

                var i = 0, j = 0, temp = {}, rowsLength = rows.length, fieldsLength = fields.length;

                for (i; i < rowsLength; i++) {
                    var row = rows[i]; j = 0;

                    for (j; j < fieldsLength; j++) {
                        var field = fields[j];
                        var tf = temp[field];
                        if (!tf) {
                            tf = temp[field] = {};
                            tf[row[field]] = [i];
                        } else {
                            var tfv = tf[row[field]];
                            if (tfv) {
                                tfv.push(i);
                            } else {
                                tfv = tf[row[field]] = [i];
                            }
                        }
                    }
                }

                $.each(temp, function (field, column) {
                    $.each(column, function () {
                        var group = this;
                        var groupLength = group.length;

                        if (groupLength > 1) {
                            var before, after, mergeIndex = group[0];

                            for (var i = 0; i < groupLength; i++) {

                                before = group[i];
                                after = group[i + 1];
                                if (after && (after - before) == 1) {
                                    continue;
                                }
                                var rowspan = before - mergeIndex + 1;

                                if (rowspan > 1) {

                                    var mergeProps = {
                                        index: mergeIndex,
                                        field: field,
                                        rowspan: rowspan
                                    };

                                    if (isTree) {
                                        mergeProps.rowId = $body.find('tr:eq('+mergeIndex+')').attr('node-id');
                                    }

                                    target.datagrid('mergeCells', mergeProps);
                                }

                                if (after && (after - before) != 1) {
                                    mergeIndex = after;
                                }
                            }
                        }
                    });
                });
            });
        }
    }
});
var detailview = $.extend({}, $.fn.datagrid.defaults.view, {
 render: function(e, t, n) {
  var a = $.data(e, "datagrid"),
   i = a.options;
  if (!n || i.rownumbers || i.frozenColumns && i.frozenColumns.length) {
   var o = a.data.rows,
    r = $(e).datagrid("getColumnFields", n),
    d = [];
   d.push('<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>');
   for (var s = 0; s < o.length; s++) {
    var l = i.rowStyler ? i.rowStyler.call(e, s, o[s]) : "",
     c = "",
     u = "";
    "string" == typeof l ? u = l : l && (c = l["class"] || "", u = l.style || "");
    var h = 'class="datagrid-row ' + (s % 2 && i.striped ? "datagrid-row-alt " : " ") + c + '"',
     f = u ? 'style="' + u + '"' : "",
     p = a.rowIdPrefix + "-" + (n ? 1 : 2) + "-" + s;
    d.push('<tr id="' + p + '" datagrid-row-index="' + s + '" ' + h + " " + f + ">"), d.push(this.renderRow.call(this, e, r, n, s, o[s])), d.push("</tr>"), d.push('<tr style="display:none;">'), n ? d.push("<td colspan=" + (r.length + 2) + ' style="border-right:0">') : d.push("<td colspan=" + r.length + ">"), d.push('<div class="datagrid-row-detail">'), n ? d.push("&nbsp;") : d.push(i.detailFormatter.call(e, s, o[s])), d.push("</div>"), d.push("</td>"), d.push("</tr>")
   }
   d.push("</tbody></table>"), $(t)[0].innerHTML = d.join("") 
  }
 },
 renderRow: function(e, t, n, a, i) {
  var o = $.data(e, "datagrid").options,
   r = [];
  if (n && o.rownumbers) {
   var d = a + 1;
   o.pagination && (d += (o.pageNumber - 1) * o.pageSize), r.push('<td class="datagrid-td-rownumber"><div class="datagrid-cell-rownumber">' + d + ".</div></td>")
  }
  for (var s = 0; s < t.length; s++) {
   var l = t[s],
    c = $(e).datagrid("getColumnOption", l);
   if (c) {
    var u = i[l],
     h = c.styler ? c.styler(u, i, a) || "" : "",
     f = "",
     p = "";
    "string" == typeof h ? p = h : r && (f = h["class"] || "", p = h.style || "");
    var g = f ? 'class="' + f + '"' : "",
     v = c.hidden ? 'style="display:none;' + p + '"' : p ? 'style="' + p + '"' : "";
    r.push('<td field="' + l + '" ' + g + " " + v + ">"), c.checkbox ? v = "" : c.expander ? v = "text-align:center;height:16px;" : (v = p, c.align && (v += ";text-align:" + c.align + ";"), o.nowrap ? o.autoRowHeight && (v += ";height:auto;") : v += ";white-space:normal;height:auto;"), r.push('<div style="' + v + '" '), c.checkbox ? r.push('class="datagrid-cell-check ') : r.push('class="datagrid-cell ' + c.cellClass), r.push('">'), c.checkbox ? r.push('<input type="checkbox" name="' + l + '" value="' + (void 0 != u ? u : "") + '">') : c.expander ? r.push('<span class="datagrid-row-expander datagrid-row-expand" style="display:inline-block;width:16px;height:16px;cursor:pointer;" />') : c.formatter ? r.push(c.formatter(u, i, a)) : r.push(u), r.push("</div>"), r.push("</td>")
   }
  }
  return r.join("")
 },
 insertRow: function(e, t, n) {
  function a(a) {
   var o = a ? r : d,
    l = o.find("tr[datagrid-row-index=" + t + "]");
   if (s) {
    var c = l.next().clone();
    l.insertAfter(l.next())
   } else var c = l.next().next().clone();
   c.insertAfter(l), c.hide(), a || c.find("div.datagrid-row-detail").html(i.detailFormatter.call(e, t, n))
  }
  var i = $.data(e, "datagrid").options,
   o = $.data(e, "datagrid").dc,
   r = ($(e).datagrid("getPanel"), o.view1),
   d = o.view2,
   s = !1,
   l = $(e).datagrid("getRows").length;
  return 0 == l ? void $(e).datagrid("loadData", {
   total: 1,
   rows: [n]
  }) : ((void 0 == t || null == t || t >= l) && (t = l, s = !0, this.canUpdateDetail = !1), $.fn.datagrid.defaults.view.insertRow.call(this, e, t, n), a(!0), a(!1), void(this.canUpdateDetail = !0))
 },
 deleteRow: function(e, t) {
  var n = $.data(e, "datagrid").options,
   a = $.data(e, "datagrid").dc,
   i = n.finder.getTr(e, t);
  i.next().remove(), $.fn.datagrid.defaults.view.deleteRow.call(this, e, t), a.body2.triggerHandler("scroll")
 },
 updateRow: function(e, t, n) {
  var a = ($.data(e, "datagrid").dc, $.data(e, "datagrid").options),
   i = $(e).datagrid("getExpander", t).attr("class");
  if ($.fn.datagrid.defaults.view.updateRow.call(this, e, t, n), $(e).datagrid("getExpander", t).attr("class", i), this.canUpdateDetail) {
   var n = $(e).datagrid("getRows")[t],
    o = $(e).datagrid("getRowDetail", t);
   o.html(a.detailFormatter.call(e, t, n))
  }
 },
 bindEvents: function(e) {
  var t = $.data(e, "datagrid");
  if (!t.ss.bindDetailEvents) {
   t.ss.bindDetailEvents = !0;
   var n = t.dc,
    a = (t.options, n.body1.add(n.body2)),
    i = ($.data(a[0], "events") || $._data(a[0], "events")).click[0].handler;
   a.unbind("click").bind("click", function(t) {
    var n = $(t.target),
     a = n.closest("tr.datagrid-row");
    if (a.length) {
     if (n.hasClass("datagrid-row-expander")) {
      var o = parseInt(a.attr("datagrid-row-index"));
      n.hasClass("datagrid-row-expand") ? $(e).datagrid("expandRow", o) : $(e).datagrid("collapseRow", o), $(e).datagrid("fixRowHeight")
     } else i(t);
     t.stopPropagation()
    }
   })
  }
 },
 onBeforeRender: function(e) {
  for (var t = $.data(e, "datagrid"), n = t.options, a = t.dc, i = $(e), o = !1, r = i.datagrid("getColumnFields", !0).concat(i.datagrid("getColumnFields")), d = 0; d < r.length; d++) {
   var s = i.datagrid("getColumnOption", r[d]);
   if (s.expander) {
    o = !0;
    break
   }
  }
  if (!o) {
   n.frozenColumns && n.frozenColumns.length ? n.frozenColumns[0].splice(0, 0, {
    field: "_expander",
    expander: !0,
    width: 24,
    resizable: !1,
    fixed: !0
   }) : n.frozenColumns = [
    [{
     field: "_expander",
     expander: !0,
     width: 24,
     resizable: !1,
     fixed: !0
    }]
   ];
    var addinRowspan = 0;
    a.header2.children().find('tbody>tr').each(function (index, val) {
        if ($(val).hasClass('datagrid-filter-row')) {
            addinRowspan = 1;
        }
    });
    
   var i = a.view1.children("div.datagrid-header").find("table"),
    l = $('<td rowspan="' + (n.frozenColumns.length+addinRowspan) + '"><div class="datagrid-header-expander" style="width:24px;"></div></td>');
   0 == $("tr", i).length ? l.wrap("<tr></tr>").parent().appendTo($("tbody", i)) : n.rownumbers ? l.insertAfter(i.find("td:has(div.datagrid-header-rownumber)")) : l.prependTo(i.find("tr:first"))
  }
 },
 onAfterRender: function(e) {
  function t() {
   var e = a.header2.find("table"),
    t = e.find("tr.datagrid-filter-row").hide(),
    n = e.width() - 1,
    i = a.body2.find(">table.datagrid-btable>tbody>tr>td>div.datagrid-row-detail:visible")._outerWidth(n);
   i.find(".easyui-fluid").trigger("_resize"), t.show()
  }
  var n = $.data(e, "datagrid"),
   a = n.dc,
   i = n.options,
   o = $(e).datagrid("getPanel");
  $.fn.datagrid.defaults.view.onAfterRender.call(this, e), n.onResizeColumn || (n.onResizeColumn = i.onResizeColumn), n.onResize || (n.onResize = i.onResize), i.onResizeColumn = function(a, o) {
   i.fitColumns || t();
   for (var r = $(e).datagrid("getRows").length, d = 0; r > d; d++) $(e).datagrid("fixDetailRowHeight", d);
   n.onResizeColumn.call(e, a, o)
  }, i.onResize = function(e, a) {
   i.fitColumns && t(), n.onResize.call(o, e, a)
  }, this.canUpdateDetail = !0;
  var r = a.footer1.add(a.footer2);
  r.find("span.datagrid-row-expander").css("visibility", "hidden"), $(e).datagrid("resize"), this.bindEvents(e);
  var d = a.body1.add(a.body2).find("div.datagrid-row-detail");
  d.unbind().bind("mouseover mouseout click dblclick contextmenu scroll", function(e) {
   e.stopPropagation()
  })
 }
});
$.extend($.fn.datagrid.methods, {
 fixDetailRowHeight: function(e, t) {
  return e.each(function() {
   var e = $.data(this, "datagrid").options;
   if (e.rownumbers || e.frozenColumns && e.frozenColumns.length) {
    var n = $.data(this, "datagrid").dc,
     a = e.finder.getTr(this, t, "body", 1).next(),
     i = e.finder.getTr(this, t, "body", 2).next();
    if (i.is(":visible")) {
     a.css("height", ""), i.css("height", "");
     var o = Math.max(a.height(), i.height());
     a.css("height", o), i.css("height", o)
    }
    n.body2.triggerHandler("scroll")
   }
  })
 },
 getExpander: function(e, t) {
  var n = $.data(e[0], "datagrid").options;
  return n.finder.getTr(e[0], t).find("span.datagrid-row-expander")
 },
 getRowDetail: function(e, t) {
  var n = $.data(e[0], "datagrid").options,
   a = n.finder.getTr(e[0], t, "body", 2);
  return a.next().find(">td>div.datagrid-row-detail")
 },
 expandRow: function(e, t) {
  return e.each(function() {
   var e = $(this).datagrid("options"),
    n = ($.data(this, "datagrid").dc, $(this).datagrid("getExpander", t));
   if (n.hasClass("datagrid-row-expand")) {
    n.removeClass("datagrid-row-expand").addClass("datagrid-row-collapse");
    var a = e.finder.getTr(this, t, "body", 1).next(),
     i = e.finder.getTr(this, t, "body", 2).next();
    if (a.show(), i.show(), $(this).datagrid("fixDetailRowHeight", t), e.onExpandRow) {
     var o = $(this).datagrid("getRows")[t];
     e.onExpandRow.call(this, t, o)
    }
   }
  })
 },
 collapseRow: function(e, t) {
  return e.each(function() {
   var e = $(this).datagrid("options"),
    n = $.data(this, "datagrid").dc,
    a = $(this).datagrid("getExpander", t);
   if (a.hasClass("datagrid-row-collapse")) {
    a.removeClass("datagrid-row-collapse").addClass("datagrid-row-expand");
    var i = e.finder.getTr(this, t, "body", 1).next(),
     o = e.finder.getTr(this, t, "body", 2).next();
    if (i.hide(), o.hide(), n.body2.triggerHandler("scroll"), e.onCollapseRow) {
     var r = $(this).datagrid("getRows")[t];
     e.onCollapseRow.call(this, t, r)
    }
   }
  })
 }
}), $.extend($.fn.datagrid.methods, {
 subgrid: function(e, t) {
  return e.each(function() {
   function e(t, o, r) {
    var d = $.extend({}, o.options.queryParams || {});
    d[o.options.foreignField] = r ? r[o.options.foreignField] : void 0, $(t).datagrid($.extend({}, o.options, {
     subgrid: o.subgrid,
     view: o.subgrid ? detailview : void 0,
     queryParams: d,
     detailFormatter: function(e, t) {
      return '<div><table class="datagrid-subgrid"></table></div>'
     },
     onExpandRow: function(t, a) {
      var r = $(this).datagrid("options"),
       d = $(this).datagrid("getRowDetail", t),
       s = n(d);
      s.data("datagrid") || e(s[0], r.subgrid, a), d.find(".easyui-fluid").trigger("_resize"), i(this, t), o.options.onExpandRow && o.options.onExpandRow.call(this, t, a)
     },
     onCollapseRow: function(e, t) {
      i(this, e), o.options.onCollapseRow && o.options.onCollapseRow.call(this, e, t)
     },
     onResize: function() {
      $(this).children("div.datagrid-view").children("table"), a(this)
     },
     onResizeColumn: function(e, t) {
      a(this), o.options.onResizeColumn && o.options.onResizeColumn.call(this, e, t)
     },
     onLoadSuccess: function(e) {
      a(this), o.options.onLoadSuccess && o.options.onLoadSuccess.call(this, e)
     }
    }))
   }

   function n(e) {
    var t = $(e).children("div");
    return t.children("div.datagrid").length ? t.find(">div.datagrid>div.panel-body>div.datagrid-view>table.datagrid-subgrid") : t.find(">table.datagrid-subgrid")
   }

   function a(e) {
    var t = $(e).closest("div.datagrid-row-detail").closest("tr").prev();
    if (t.length) {
     var n = parseInt(t.attr("datagrid-row-index")),
      a = t.closest("div.datagrid-view").children("table");
     i(a[0], n)
    }
   }

   function i(e, t) {
    $(e).datagrid("fixDetailRowHeight", t), $(e).datagrid("fixRowHeight", t);
    var n = $(e).closest("div.datagrid-row-detail").closest("tr").prev();
    if (n.length) {
     var t = parseInt(n.attr("datagrid-row-index")),
      a = n.closest("div.datagrid-view").children("table");
     i(a[0], t)
    }
   }
   e(this, t)
  })
 }
});

/**
 * pivotgrid - jQuery EasyUI
 * 
 * Dependencies:
 *   treegrid
 *   menu
 *   dialog
 *   layout
 */
(function($){
    function create(target){
        var opts = $.data(target, 'pivotgrid').options;
        opts.pivot.filters = opts.pivot.filters || [];
        opts.pivot.filterRules = opts.pivot.filterRules || {};
        var filterRules = opts.pivot.filterRules || {};
        
        $.map(opts.pivot.filters, function(field){
            filterRules[field] = opts.pivot.filterRules[field] || [];
        });
        opts.pivot.filterRules = filterRules;

        clearFilterBar(target);

        $(target).treegrid($.extend({}, opts, {
            onBeforeSortColumn:function(field){
                var f = function(data){return data};
                $(this).treegrid('options').loadFilter = f;
                $(this).datagrid('options').loadFilter = f;
            },
            onSortColumn: function(){
                $(this).treegrid('options').loadFilter = opts.loadFilter;
                $(this).datagrid('options').loadFilter = opts.loadFilter;
            },
            loadFilter: function(data, parentId){
                var state = $(this).data('pivotgrid');
                state.data = data;
                var opts = state.options;
                var originalData = opts.data;
                var originalUrl = opts.url;
                var filteredData = getFilteredData(target, data);
                opts.pivot.fields = getFields(data[0]);
                $(this).treegrid({
                    data: null,
                    url: null,
                    frozenColumns: [[
                        $.extend({}, opts.frozenColumns[0][0], {
                            title: opts.frozenColumnTitle
                        })
                    ]],
                    columns: getColumns(this, filteredData)
                });
                buildFilterBar(this, data);
                setTimeout(function(){
                    opts.data = originalData;
                    opts.url = originalUrl;
                },0);

                var rows = getRows(this, filteredData);
                return {
                    total: rows.length,
                    rows: rows
                };

                function getFields(row){
                    var fields = [];
                    for (var field in row) {
                        fields.push(field);
                    }
                    subtract(opts.pivot.filters);
                    subtract(opts.pivot.rows);
                    subtract(opts.pivot.columns);
                    subtract(opts.pivot.values);
                    return fields;

                    function subtract(aa){
                        $.map(aa||[], function(a){
                            var index = $.inArray(typeof a == 'string' ? a : a.field, fields);
                            if (index >= 0) {
                                fields.splice(index, 1);
                            }
                        });
                    }
                }
            }
        }));
    }

    function getFilteredData(target, data){
        var state = $.data(target, 'pivotgrid');
        var opts = state.options;
        var rows = [];
        $.map(data||[], function(row){
            if (isMatch(row)) {
                rows.push(row);
            }
        });
        return rows;

        function isMatch(row){
            for(var field in opts.pivot.filterRules){
                var values = opts.pivot.filterRules[field] || [];
                if ($.isFunction(values)) {
                    if (!values.call(target, row[field])) {
                        return false;
                    }
                } else if (values.length) {
                    if ($.inArray(String(row[field]), values) == -1) {
                        return false;
                    }
                }
            }
            return true;
        }
    }

    function clearFilterBar(target){
        if ($(target).data('datagrid')) {
            var panel = $(target).datagrid('getPanel');
            var fbar = panel.children('div.datagrid-toolbar');
            fbar.find('.combo-f').combo('destroy');
            fbar.find('.pg-fbar').remove();
        }
    }
    
    function buildFilterBar(target, rows){
        var opts = $.data(target, 'pivotgrid').options;
        if (!opts.pivot.filters.length){return}
        var panel = $(target).datagrid('getPanel');
        var tb = panel.children('div.datagrid-toolbar');
        if (tb.length) {
            var bar = $('<div class="pg-fbar"></div>').appendTo(tb);
            bar.css('margin-top', '5px');
        } else {
            tb = $('<div class="datagrid-toolbar"></div>').prependTo(panel);
            var bar = $('<div class="pg-fbar"></div>').appendTo(tb);
        }

        $.map(opts.pivot.filters, function(field){
            $('<span class="pg-flabel"></span>').html(field).appendTo(bar);
            var f = $('<input>').attr('name',field).appendTo(bar);
            f.combobox({
                multiple: true,
                prompt: 'Selecting',
                data: getValues(field), 
                icons:[{
                    iconCls:'icon-ok',
                    handler:function(e){
                        var t = $(e.data.target);
                        var field = t.attr('comboName');
                        opts.pivot.filterRules[field] = t.combobox('getValues');
                        t.combobox('hidePanel');
                        $(target).pivotgrid();
                    }
                }],
                onSelect: handler1,
                onUnselect: handler1,
                onShowPanel: handler1,
                onLoadSuccess: handler2,
                onHidePanel: handler2
            });
            function handler1(){
                $(this).combobox('setText', '');
            };
            function handler2(){
                var field = $(this).attr('comboName');
                var values = opts.pivot.filterRules[field] || [];
                if ($.isFunction(values)) {
                    vv = [];
                    $.map($(this).combobox('getData'), function(r){
                        if (values.call(target, r.value)) {
                            vv.push(r.value);
                        }
                    });
                    values = vv;
                }
                $(this).combobox('setValues', values);
                $(this).combobox('setText', values.length ? (values.length == 1 ? values[0] : 'multiple items') : '');
            }
        });

        function getValues(field){
            var result = {};
            $.map(rows, function(row){
                result[row[field]] = 1;
            });
            var values = [];
            for (var v in result) {
                values.push({value:v,text:v});
            }
            return values;
        }
    }

    function getRows(target, data){
        var opts = $.data(target, 'pivotgrid').options;
        var columns = $(target).datagrid('getColumnFields');

        var _idIndex = 1;
        var allRows = [];
        var topRows = [];
        
        $.map(opts.pivot.rows, function(field, index){
            var pfield = opts.pivot.rows[index-1];
            if (pfield) {
                var tmpRows = [];
                while (topRows.length) {
                    var r1 = topRows.shift();
                    var groups = getR1(field, r1._rows);
                    $.map(groups, function(rows){
                        var r = sumR1(rows);
                        r._rows = rows;
                        r[opts.treeField] = rows[0][field];
                        r._parentId = r1[opts.idField];
                        r[opts.idField] = _idIndex++;
                        allRows.push(r);
                        tmpRows.push(r);
                    });
                }
                topRows = tmpRows;
            } else {
                var groups = getR1(field, data);
                $.map(groups, function(rows){
                    var r = sumR1(rows);
                    r._rows = rows;
                    r[opts.treeField] = rows[0][field];
                    r[opts.idField] = _idIndex++;
                    topRows.push(r);
                    allRows.push(r);
                });
            }
        });
        return allRows;

        function sumR1(rows){
            var r = {};
            var fields = $(target).datagrid('getColumnFields');
            $.map(fields, function(field){
                r[field] = _sum(field);
            });
            return r;

            function _sum(field){
                var col = $(target).datagrid('getColumnOption', field);
                var rr = $.map(rows, function(row){
                    for (var i=0; i<opts.pivot.columns.length; i++) {
                        if (row[opts.pivot.columns[i]] != col.tt[i]) {
                            return undefined;
                        }
                    }
                    return row;
                });
                
                /*for (var i=0; i < opts.pivot.values.length; i++) {
                    if ((field.indexOf(opts.pivot.values[i].field) !== -1) && (rr.length > 0 && ['bigdecimal', 'integer', 'decimal', 'long'].indexOf(opts.pivot.values[i].datatype) < 0)) {
                        return rr[0][col.tt[1]];
                    }
                }*/
                
                if (col.datatype == 'string') {
                    return opts.operators['str'].call(target, rr, col.tt[col.tt.length-1]);
                } else {
                    return opts.operators[col.op||'sum'].call(target, rr, col.tt[col.tt.length-1]);
                }
            }
        }

        function getR1(field, rows){
            var result = {};
            $.map(rows, function(row){
                var val = row[field];
                var rr = result[val];
                if (!rr) {
                    rr = [row];
                } else {
                    rr.push(row);
                }
                result[val] = rr;
            });
            var groups = [];
            for (var val in result) {
                groups.push(result[val]);
            }
            return groups;
        }
    }

    function getColumns(target, data){
        if (!data){return null;}
        var opts = $.data(target, 'pivotgrid').options;
        var columns = [];
        $.map(opts.pivot.columns, function(field, index){
            var pcolumns = columns[index-1];
            if (pcolumns) {
                var cc = [];
                $.map(pcolumns, function(pcol){
                    var subcol = getV1(field, pcol._field, pcol.title);
                    $.map(subcol, function(v){
                        cc.push({
                            _field: field,
                            title: v,
                            tt: pcol.tt.concat(v),
                            colspan: opts.pivot.values.length
                        });
                    });
                    pcol.colspan += (subcol.length-1)*opts.pivot.values.length;
                });
                columns.push(cc);
            } else {
                var cc = [];
                $.map(getV1(field), function(v){
                    cc.push({
                        _field: field,
                        title: v,
                        tt: [v],
                        colspan: opts.pivot.values.length
                    });
                });
                columns.push(cc);
            }
        });

        var cc = [];
        $.map(columns[columns.length-1], function(col, index){
            $.map(opts.pivot.values, function(v){
                cc.push($.extend({}, v, {
                    field: col.tt.join('_')+'_'+v.field,
                    title: (v.title || v.field),
                    tt: col.tt.concat(v.field),
                    width: (v.width || opts.valueFieldWidth),
                    align: (v.align || 'right'),
                    styler: (v.styler || opts.valueStyler),
                    formatter: (v.formatter || opts.valueFormatter),
                    sortable: true,
                    sorter: function(a,b){
                        var v1 = parseFloat(a);
                        var v2 = parseFloat(b);
                        return v1==v2 ? 0 : (v1>v2 ? 1 : -1);
                    }
                }))
            });
        });
        columns.push(cc);

        return columns;

        function getV1(field, pfield, pvalue){
            var vv = [];
            $.map(data, function(row){
                var val = String(row[field]);
                if (pfield == undefined || row[pfield] == pvalue) {
                    if ($.inArray(val, vv) == -1) {
                        vv.push(val);
                    }
                }
            });
            return vv;
        }
    }

    function initCss(){
        if (!$('#pivotgrid-style').length){
            $('head').append(
                    '<style id="pivotgrid-style">' +
                    'a.pivotgrid-item,a.pivotgrid-item:hover{text-align:left;-moz-border-radius:0;-webkit-border-radius:0;border-radius:0;}' +
                    'a.pivotgrid-item-ins{border-top:1px solid red;}' +
                    '.pg-fbar{padding:0;}' +
                    '.pg-flabel{display:inline-block;height:22px;line-height:22px;vertical-align:middle;margin:0 5px;}' +
                    '</style>'
            );
        }
    }

    $.fn.pivotgrid = function(options, param){
        if (typeof options == 'string'){
            var method = $.fn.pivotgrid.methods[options];
            if (method){
                return method(this, param);
            } else {
                return this.treegrid(options, param);
            }
        }

        options = options || {};
        return this.each(function(){
            var state = $.data(this, 'pivotgrid');
            if (state){
                $.extend(state.options, options);
            } else {
                $.data(this, 'pivotgrid', {
                    options: $.extend({}, $.fn.pivotgrid.defaults, $.fn.pivotgrid.parseOptions(this), options)
                });
            }
            initCss();
            create(this);
        });
    };

    $.fn.pivotgrid.methods = {
        options: function(jq){
            return $.data(jq[0], 'pivotgrid').options;
        },
        getData: function(jq){
            return $.data(jq[0], 'pivotgrid').data;
        }
    }

    $.fn.pivotgrid.parseOptions = function(target){
        return $.extend({}, $.fn.treegrid.parseOptions(target), $.parser.parseOptions(target, []));
    };

    $.fn.pivotgrid.defaults = $.extend({}, $.fn.treegrid.defaults, {
        idField: '_id_field',
        treeField: '_tree_field',
        frozenColumns: [[
            {field: '_tree_field', width:300, title:'', sortable:true}
        ]],
        autoRowHeight: false,
        remoteSort: false,
        frozenColumnTitle: '',
        valueFieldWidth: 80,
        valuePrecision: 0,
        valueStyler: function(){},
        valueFormatter: function(value){return value},
        i18n:{
            fields: 'Fields',
            filters: 'Filters',
            rows: 'Rows',
            columns: 'Columns',
            values: 'Values',
            ok: 'Ok',
            cancel: 'Cancel'
        },
        operators:{
            sum: function(rows, field){
                var v = 0;
                $.map(rows,function(row){
                    var rv = row[field];
                    if (rv != null && rv.charAt(0) == '.') {
                        v += parseFloat('0'+rv);
                    } else {
                        v += parseFloat(rv)||0;
                    }
                });
                
                if (v == 0) {
                    return '';
                }
                return accounting.formatMoney(v, '');
            },
            str: function(rows, field){
                var v = '';
                
                $.map(rows,function(row){
                    v = row[field];
                });

                return v;
            },
            count: function(rows, field){
                return rows.length;
            },
            max: function(rows, field){
                var max = 0;
                $.map(rows, function(row){
                    var rv = row[field];
                    
                    if (rv != null && rv.charAt(0) == '.') {
                        v = parseFloat('0'+rv);
                    } else {
                        v = parseFloat(rv)||0;
                    }

                    if (max < v){max = v;}
                });
                
                if (max == 0) {
                    return '';
                }
                return accounting.formatMoney(max, '');
            },
            min: function(rows, field){
                var min = rows[0][field];
                if (min != null && min.charAt(0) == '.') {
                    min = parseFloat('0'+min);
                } else {
                    min = parseFloat(min);
                }
                    
                $.map(rows, function(row){
                    var rv = row[field];
                    
                    if (rv != null && rv.charAt(0) == '.') {
                        v = parseFloat('0'+rv);
                    } else {
                        v = parseFloat(rv)||0;
                    }
                    
                    if (min > v){min = v;}
                });
                
                if (min == 0) {
                    return '';
                }
                return accounting.formatMoney(min, '');
            }, 
            avg: function(rows, field){
                var rowsLength = rows.length;
                var v = 0;
                
                $.map(rows,function(row){
                    var rv = row[field];
                    if (rv != null && rv.charAt(0) == '.') {
                        v += parseFloat('0'+rv);
                    } else {
                        v += parseFloat(rv)||0;
                    }
                });
                
                if (v == 0) {
                    return '';
                }
                return accounting.formatMoney((v/rowsLength), '');
            }
        }
    });

    $.parser.plugins.push('pivotgrid');
})(jQuery);

/**
 * groupView - jQuery EasyUI
 */
$.extend($.fn.datagrid.defaults, {
    groupHeight: 28,
    expanderWidth: 30,
    groupStyler: function (value, rows) {
        return ''
    }
});

var groupview = $.extend({}, $.fn.datagrid.defaults.view, {
    render: function (target, container, frozen) {
        var table = [];
        var groups = this.groups;
        for (var i = 0; i < groups.length; i++) {
            table.push(this.renderGroup.call(this, target, i, groups[i], frozen));
        }
        $(container).html(table.join(''));
    },
    renderGroup: function (target, groupIndex, group, frozen) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var fields = $(target).datagrid('getColumnFields', frozen);
        var hasFrozen = opts.frozenColumns && opts.frozenColumns.length;

        if (frozen) {
            if (!(opts.rownumbers || hasFrozen)) {
                return '';
            }
        }

        var table = [];

        var css = opts.groupStyler.call(target, group.value, group.rows);
        var cs = parseCss(css, 'datagrid-group');
        table.push('<div group-index=' + groupIndex + ' ' + cs + '>');
        if ((frozen && (opts.rownumbers || opts.frozenColumns.length)) ||
                (!frozen && !(opts.rownumbers || opts.frozenColumns.length))) {
            table.push('<span class="datagrid-group-expander">');
            table.push('<span class="datagrid-row-expander datagrid-row-collapse">&nbsp;</span>');
            table.push('</span>');
        }
        // if ((frozen && hasFrozen) || (!frozen)) {
        //     /*table.push('<span class="datagrid-group-title" style="position: absolute;">');*/
        //     table.push('<span class="datagrid-group-title">');
        //     table.push(opts.groupFormatter.call(target, group.value, group.rows));
        //     table.push('</span>');
        // }

        if (!frozen) {
            table.push('<span class="datagrid-group-title group-title-easyui-custom'+((typeof group.value == 'undefined') ? ' d-none' : '')+'" title="'+group.value+'">');
            table.push(opts.groupFormatter.call(target, group.value, group.rows));
            table.push('</span>');
        }
        if (frozen && hasFrozen) {
            table.push('<span class="datagrid-group-title group-span-easyui-custom'+((typeof group.value == 'undefined') ? ' d-none' : '')+'">');
            if (group.value === null) {
                group.value = 'null';
            } 
            group.tempvalue = (group.value).substring(0, 10);
            table.push(opts.groupFormatter.call(target, group.value, group.rows));
            table.push('</span>');
        }
        
        if (opts.hasOwnProperty('vrGroupSum') && opts.vrGroupSum && !frozen) {
            var footerRows = $(target).datagrid('getFooterRows'), footerRow = {};
            if (footerRows) {
                footerRow = footerRows[0];
            }
            var groupRow, resetGroupSum = true, rowData = {}, marginLeft = 0;

            if (hasFrozen) {
              for (var fi = 0; fi < opts.frozenColumns[0].length; fi++) {
                if (opts.frozenColumns[0][fi].width) {
                  marginLeft += parseInt(opts.frozenColumns[0][fi].width, 10);
                }
              }
            }
            
            for (var j = 0; j < group.rows.length; j++) {
                groupRow = group.rows[j];
                var isSumRules = false;
                
                if (groupRow.hasOwnProperty('pfsumrules')) {
                    isSumRules = true;
                }
                
                for (var jj in groupRow) {
                    
                    if (resetGroupSum) {
                        rowData[jj] = 0;
                    }
                    
                    //if (!isNaN(groupRow[jj]) && footerRow.hasOwnProperty(jj)) {
                    if (!isNaN(groupRow[jj])) {
                        
                        if (isSumRules) {
                            
                            if (groupRow['pfsumrules']) {
                                
                                if (groupRow['pfsumrules'] == 'addition') {
                                    rowData[jj] += Number(groupRow[jj]);
                                } else if (groupRow['pfsumrules'] == 'subtract') {
                                    rowData[jj] -= Number(groupRow[jj]);
                                }
                                
                            } else {
                                rowData[jj] += 0;
                            }
                            
                        } else {
                            rowData[jj] += Number(groupRow[jj]);
                        }
                        
                    } else {
                        rowData[jj] = '';
                    }
                }
                resetGroupSum = false;
            }
            
            var dc = state.dc;            
            var width = dc.view1.width();
            table.push('<table style="width:100%;display:inline-block;position:absolute;margin-left:-'+marginLeft+'px" class="datagrid-group-vr-group-sum-class" cellspacing="0" cellpadding="0" border="0"><tbody>');
            var index = group.startIndex;
            var css = opts.rowStyler ? opts.rowStyler.call(target, index, rowData) : '';
            var classValue = '';
            var styleValue = '';
            if (typeof css == 'string') {
                styleValue = css;
            } else if (css) {
                classValue = css['class'] || '';
                styleValue = css['style'] || '';
            }

            var cls = 'class="datagrid-row ' + (index % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + classValue + '"';
            var style = styleValue ? 'style="' + styleValue + '"' : '';
            var rowId = state.rowIdPrefix + '-' + (frozen ? 1 : 2) + '-' + index;
            table.push('<tr>');
            table.push(this.vrRenderRow.call(this, target, fields, frozen, index, rowData));
            table.push('</tr>');
            index++;
            table.push('</tbody></table>');        
        }
        
        table.push('</div>');

        table.push('<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>');
        var index = group.startIndex;
        for (var j = 0; j < group.rows.length; j++) {
            var css = opts.rowStyler ? opts.rowStyler.call(target, index, group.rows[j]) : '';
            var classValue = '';
            var styleValue = '';
            if (typeof css == 'string') {
                styleValue = css;
            } else if (css) {
                classValue = css['class'] || '';
                styleValue = css['style'] || '';
            }

            var cls = 'class="datagrid-row ' + (index % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + classValue + '"';
            var style = styleValue ? 'style="' + styleValue + '"' : '';
            var rowId = state.rowIdPrefix + '-' + (frozen ? 1 : 2) + '-' + index;
            table.push('<tr id="' + rowId + '" datagrid-row-index="' + index + '" ' + cls + ' ' + style + '>');
            table.push(this.renderRow.call(this, target, fields, frozen, index, group.rows[j]));
            table.push('</tr>');
            index++;
        }
        table.push('</tbody></table>');
        return table.join('');

        function parseCss(css, cls) {
            var classValue = '';
            var styleValue = '';
            if (typeof css == 'string') {
                styleValue = css;
            } else if (css) {
                classValue = css['class'] || '';
                styleValue = css['style'] || '';
            }
            return 'class="' + cls + (classValue ? ' ' + classValue : '') + '" ' +
                    'style="' + styleValue + '"';
        }
    },

    bindEvents: function (target) {
        var state = $.data(target, 'datagrid');
        var dc = state.dc;
        var body = dc.body1.add(dc.body2);
        var clickHandler = ($.data(body[0], 'events') || $._data(body[0], 'events')).click[0].handler;
        body.unbind('click').bind('click', function (e) {
            var tt = $(e.target);
            var expander = tt.closest('span.datagrid-row-expander');
            if (expander.length) {
                var gindex = expander.closest('div.datagrid-group').attr('group-index');
                if (expander.hasClass('datagrid-row-collapse')) {
                    $(target).datagrid('collapseGroup', gindex);
                } else {
                    $(target).datagrid('expandGroup', gindex);
                }
            } else {
                clickHandler(e);
            }
            e.stopPropagation();
        });
    },

    onBeforeRender: function (target, rows) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var rowsLength = rows.length;
        
        initCss();

        var groups = [];
        for (var i = 0; i < rowsLength; i++) {
            var row = rows[i];
            var group = getGroup(row[opts.groupField]);
            if (!group) {
                group = {
                    value: row[opts.groupField],
                    rows: [row]
                };
                groups.push(group);
            } else {
                group.rows.push(row);
            }
        }
        
        var groupsLength = groups.length;
        var index = 0;
        var newRows = [];
        for (var i = 0; i < groupsLength; i++) {
            var group = groups[i];
            group.startIndex = index;
            index += group.rows.length;
            newRows = newRows.concat(group.rows);
        }

        state.data.rows = newRows;
        this.groups = groups;

        var that = this;
        setTimeout(function () {
            that.bindEvents(target);
        }, 0);
        
        if (opts.hasOwnProperty('vrGroupSum') && opts.vrGroupSum) {
            var p = $(target).datagrid('getPanel');
            p.find('.datagrid-footer').addClass('datagrid-footer-sum-blue');
        }

        function getGroup(value) {
            for (var i = 0; i < groups.length; i++) {
                var group = groups[i];
                if (group.value == value) {
                    return group;
                }
            }
            return null;
        }
        function initCss() {
            if (!$('#datagrid-group-style').length) {
                $('head').append(
                        '<style id="datagrid-group-style">' +
                        '.datagrid-group{height:' + opts.groupHeight + 'px;overflow:hidden;font-weight:bold;border-bottom:1px solid #ccc;white-space:nowrap;word-break:normal;position: relative;}' +
                        '.datagrid-group-title,.datagrid-group-expander{display:inline-block;vertical-align:bottom;height:100%;line-height:' + opts.groupHeight + 'px;padding:0 4px;}' +
                        '.datagrid-group-title{position:relative;}' +
                        '.datagrid-group-vr-group-sum-class td{border-bottom: transparent;padding:4px;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;color: #3333ff;}' +
                        '.datagrid-footer-sum-blue td{color: #3333ff;}' +
                        '.datagrid-group-expander{width:' + opts.expanderWidth + 'px;text-align:center;padding:0}' +
                        '.datagrid-row-expander{margin:' + Math.floor((opts.groupHeight - 16) / 2) + 'px 0;display:inline-block;width:16px;height:16px;cursor:pointer}' +
                        '</style>'
                        );
            }
        }
    },
    onAfterRender: function (target) {
        $.fn.datagrid.defaults.view.onAfterRender.call(this, target);

        var view = this;
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var t = $(target);


        /**
         * Append custom code
         */
         setTimeout(function() {
          var groupTitleWidth = parseInt(t.parent().find('.datagrid-view2 .datagrid-body').find('.datagrid-group-title:eq(0)').css('left'), 10);        
          var $datagridBody1 = t.parent().find('.datagrid-view1 .datagrid-body');
          var $datagridBody = t.parent().find('.datagrid-view2 .datagrid-body');
          var datagridHeadHeight = t.parent().find('.datagrid-view2 .datagrid-header').height();
          var bodyOffsetTop = $datagridBody.offset().top;

          t.parent().find('.datagrid-view2 .datagrid-body').scroll('scroll', function() {
            var $thisscroll = $(this);
            var documentScrollLeft = $thisscroll.scrollLeft();

            if (!$datagridBody.find('.datagrid-group-freeze').length) {
              $thisscroll.find('.datagrid-group-title').each(function(){
                  $(this).css('left', documentScrollLeft + groupTitleWidth);
              })
            }

            if (opts.hasOwnProperty('vrGroupFreeze') && opts.vrGroupFreeze) {
              if (!$thisscroll.scrollTop()) {
                $datagridBody1.find('.datagrid-group-freeze').remove();
                $datagridBody.find('.datagrid-group-freeze').remove();   
              }

              $datagridBody.find('.datagrid-group').each(function(index, elem){
              
                if ($datagridBody.find('div[group-index="'+index+'"]').length && $datagridBody.find('div[group-index="'+index+'"]').offset().top - bodyOffsetTop < 0) {

                  $datagridBody1.find('.datagrid-group-freeze').remove();
                  $datagridBody.find('.datagrid-group-freeze').remove();                  
                  
                  if (!$datagridBody.find('.datagrid-group-freeze').length) {
                    $datagridBody1.find('.datagrid-body-inner').prepend($datagridBody1.find('div[group-index="'+index+'"]').clone().addClass('datagrid-group-freeze').css({'position':'absolute', 'top':datagridHeadHeight+'px', 'background-color':'#fff', 'z-index':'100', 'width':'100%'}));
                    $datagridBody.prepend($datagridBody.find('div[group-index="'+index+'"]').clone().addClass('datagrid-group-freeze').css({'position':'absolute', 'top':datagridHeadHeight+'px', 'background-color':'#fff', 'z-index':'100'}));
                  }
                }

              });   
            }

          });   
        }, 300);
        /**
         * End custom code
         */


        if (!state.onResizeColumn) {
            state.onResizeColumn = opts.onResizeColumn;
        }
        if (!state.onResize) {
            state.onResize = opts.onResize;
        }
        opts.onResizeColumn = function (field, width) {
            view.resizeGroup(target);
            state.onResizeColumn.call(target, field, width);
        };
        opts.onResize = function (width, height) {
            view.resizeGroup(target);
            state.onResize.call(t.datagrid('getPanel')[0], width, height);
        };
        view.resizeGroup(target);
        
        if (t.datagrid('getRows').length == 0) {
            setTimeout(function() {
                t.datagrid("appendRow", {}), t.datagrid("options").finder.getTr(target, 0).css("height", 0).find("*").css("height", 0);
                var n = t.datagrid("getPanel").find("div.datagrid-header").height() + 8;
                t.datagrid("getPanel").find(".datagrid-empty").css({
                    top: n + "px"
                });
            }, 0);
        } else if (opts.hasOwnProperty('groupExpand') && opts.groupExpand == false) {
            var gcount = opts.view.groups.length;
            for (var i = 0; i < gcount; i++) {
                t.datagrid('collapseGroup', i);
            }
        }
    }
});

$.extend($.fn.datagrid.methods, {
    groups: function (jq) {
        return jq.datagrid('options').view.groups;
    },
    expandGroup: function (jq, groupIndex) {
        return jq.each(function () {
            var opts = $(this).datagrid('options');
            var view = $.data(this, 'datagrid').dc.view;
            var group = view.find(groupIndex != undefined ? 'div.datagrid-group[group-index="' + groupIndex + '"]' : 'div.datagrid-group');
            var expander = group.find('span.datagrid-row-expander');
            if (expander.hasClass('datagrid-row-expand')) {
                expander.removeClass('datagrid-row-expand').addClass('datagrid-row-collapse');
                group.next('table').show();
            }
            $(this).datagrid('fixRowHeight');
            if (opts.onExpandGroup) {
                opts.onExpandGroup.call(this, groupIndex);
            }
        });
    },
    collapseGroup: function (jq, groupIndex) {
        return jq.each(function () {
            var opts = $(this).datagrid('options');
            var view = $.data(this, 'datagrid').dc.view;
            var group = view.find(groupIndex != undefined ? 'div.datagrid-group[group-index="' + groupIndex + '"]' : 'div.datagrid-group');
            var expander = group.find('span.datagrid-row-expander');
            if (expander.hasClass('datagrid-row-collapse')) {
                expander.removeClass('datagrid-row-collapse').addClass('datagrid-row-expand');
                group.next('table').hide();
            }
            $(this).datagrid('fixRowHeight');
            if (opts.onCollapseGroup) {
                opts.onCollapseGroup.call(this, groupIndex);
            }
            view.find('.datagrid-group-freeze').remove();              
        });
    },
    scrollToGroup: function (jq, groupIndex) {
        return jq.each(function () {
            var state = $.data(this, 'datagrid');
            var dc = state.dc;
            var grow = dc.body2.children('div.datagrid-group[group-index="' + groupIndex + '"]');
            if (grow.length) {
                var groupHeight = grow.outerHeight();
                var headerHeight = dc.view2.children('div.datagrid-header')._outerHeight();
                var frozenHeight = dc.body2.outerHeight(true) - dc.body2.outerHeight();
                var top = grow.position().top - headerHeight - frozenHeight;
                if (top < 0) {
                    dc.body2.scrollTop(dc.body2.scrollTop() + top);
                } else if (top + groupHeight > dc.body2.height() - 18) {
                    dc.body2.scrollTop(dc.body2.scrollTop() + top + groupHeight - dc.body2.height() + 18);
                }
            }
        });
    }
});

$.extend(groupview, {
    refreshGroupTitle: function (target, groupIndex) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var dc = state.dc;
        var group = this.groups[groupIndex];
        var span = dc.body1.add(dc.body2).children('div.datagrid-group[group-index=' + groupIndex + ']').find('span.datagrid-group-title');
        span.html(opts.groupFormatter.call(target, group.value, group.rows));
    },
    resizeGroup: function (target, groupIndex) {
        var state = $.data(target, 'datagrid');
        var dc = state.dc;
        var ht = dc.header2.find('table');
        var fr = ht.find('tr.datagrid-filter-row').hide();
        // var ww = ht.width();
        var ww = dc.body2.children('table.datagrid-btable:first').width();
        if (groupIndex == undefined) {
            var groupHeader = dc.body2.children('div.datagrid-group');
        } else {
            var groupHeader = dc.body2.children('div.datagrid-group[group-index=' + groupIndex + ']');
        }
        groupHeader._outerWidth(ww);
        var opts = state.options;
        if (opts.frozenColumns && opts.frozenColumns.length) {
            var width = dc.view1.width() - opts.expanderWidth;
            var isRtl = dc.view1.css('direction').toLowerCase() == 'rtl';
            groupHeader.find('.datagrid-group-title').css(isRtl ? 'right' : 'left', -width + 'px');
            if (opts.hasOwnProperty('vrGroupSum') && opts.vrGroupSum) {
                groupHeader.find('.datagrid-group-title').css('width', width + 'px');
            }
        }
        if (fr.length) {
            if (opts.showFilterBar) {
                fr.show();
            }
        }
        // fr.show();
    },

    insertRow: function (target, index, row) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var dc = state.dc;
        var group = null;
        var groupIndex;

        if (!state.data.rows.length) {
            $(target).datagrid('loadData', [row]);
            return;
        }

        for (var i = 0; i < this.groups.length; i++) {
            if (this.groups[i].value == row[opts.groupField]) {
                group = this.groups[i];
                groupIndex = i;
                break;
            }
        }
        if (group) {
            if (index == undefined || index == null) {
                index = state.data.rows.length;
            }
            if (index < group.startIndex) {
                index = group.startIndex;
            } else if (index > group.startIndex + group.rows.length) {
                index = group.startIndex + group.rows.length;
            }
            $.fn.datagrid.defaults.view.insertRow.call(this, target, index, row);

            if (index >= group.startIndex + group.rows.length) {
                _moveTr(index, true);
                _moveTr(index, false);
            }
            group.rows.splice(index - group.startIndex, 0, row);
        } else {
            group = {
                value: row[opts.groupField],
                rows: [row],
                startIndex: state.data.rows.length
            }
            groupIndex = this.groups.length;
            dc.body1.append(this.renderGroup.call(this, target, groupIndex, group, true));
            dc.body2.append(this.renderGroup.call(this, target, groupIndex, group, false));
            this.groups.push(group);
            state.data.rows.push(row);
        }

        this.setGroupIndex(target);
        this.refreshGroupTitle(target, groupIndex);
        this.resizeGroup(target);

        function _moveTr(index, frozen) {
            var serno = frozen ? 1 : 2;
            var prevTr = opts.finder.getTr(target, index - 1, 'body', serno);
            var tr = opts.finder.getTr(target, index, 'body', serno);
            tr.insertAfter(prevTr);
        }
    },

    updateRow: function (target, index, row) {
        var opts = $.data(target, 'datagrid').options;
        $.fn.datagrid.defaults.view.updateRow.call(this, target, index, row);
        var tb = opts.finder.getTr(target, index, 'body', 2).closest('table.datagrid-btable');
        var groupIndex = parseInt(tb.prev().attr('group-index'));
        this.refreshGroupTitle(target, groupIndex);
    },

    deleteRow: function (target, index) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var dc = state.dc;
        var body = dc.body1.add(dc.body2);

        var tb = opts.finder.getTr(target, index, 'body', 2).closest('table.datagrid-btable');
        var groupIndex = parseInt(tb.prev().attr('group-index'));

        $.fn.datagrid.defaults.view.deleteRow.call(this, target, index);

        var group = this.groups[groupIndex];
        if (group.rows.length > 1) {
            group.rows.splice(index - group.startIndex, 1);
            this.refreshGroupTitle(target, groupIndex);
        } else {
            body.children('div.datagrid-group[group-index=' + groupIndex + ']').remove();
            for (var i = groupIndex + 1; i < this.groups.length; i++) {
                body.children('div.datagrid-group[group-index=' + i + ']').attr('group-index', i - 1);
            }
            this.groups.splice(groupIndex, 1);
        }

        this.setGroupIndex(target);
    },

    setGroupIndex: function (target) {
        var index = 0;
        for (var i = 0; i < this.groups.length; i++) {
            var group = this.groups[i];
            group.startIndex = index;
            index += group.rows.length;
        }
    }
});

/** datagrid-cellediting.js **/
(function($){
	$.extend($.fn.datagrid.defaults, {
		clickToEdit: true,
		dblclickToEdit: false,
		navHandler: {
			'37': function(e){
				var opts = $(this).datagrid('options');
				return navHandler.call(this, e, opts.isRtl?'right':'left');
			},
			'39': function(e){
				var opts = $(this).datagrid('options');
				return navHandler.call(this, e, opts.isRtl?'left':'right');
			},
			'38': function(e){
				return navHandler.call(this, e, 'up');
			},
			'40': function(e){
				return navHandler.call(this, e, 'down');
			},
			'13': function(e){
				return enterHandler.call(this, e);
			},
			'27': function(e){
				return escHandler.call(this, e);
			},
			'8': function(e){
				return clearHandler.call(this, e);
			},
			'46': function(e){
				return clearHandler.call(this, e);
			},
			'keypress': function(e){
				if (e.metaKey || e.ctrlKey){
					return;
				}
				var dg = $(this);
				var param = dg.datagrid('cell');	// current cell information
				if (!param){return;}
				var input = dg.datagrid('input', param);
				if (!input){
					var tmp = $('<span></span>');
					tmp.html(String.fromCharCode(e.which));
					var c = tmp.text();
					tmp.remove();
					if (c){
						dg.datagrid('editCell', {
							index: param.index,
							field: param.field,
							value: c
						});
						return false;					
					}
				}
			}
		},
		onBeforeCellEdit: function(index, field){},
		onCellEdit: function(index, field, value){
			var input = $(this).datagrid('input', {index:index, field:field});
			if (input){
				if (value != undefined){
					input.val(value);
				}
			}
		},
		onSelectCell: function(index, field){},
		onUnselectCell: function(index, field){}
	});

	function navHandler(e, dir){
		var dg = $(this);
		var param = dg.datagrid('cell');
		var input = dg.datagrid('input', param);
		if (!input){
			dg.datagrid('gotoCell', dir);
			return false;
		}
	}

	function enterHandler(e){
		var dg = $(this);
		var cell = dg.datagrid('cell');
		if (!cell){return;}
		var input = dg.datagrid('input', cell);
		if (input){
			endCellEdit(this, true);
		} else {
			dg.datagrid('editCell', cell);
		}
		return false;
	}

	function escHandler(e){
		endCellEdit(this, false);
		return false;
	}

	function clearHandler(e){
		var dg = $(this);
		var param = dg.datagrid('cell');
		if (!param){return;}
		var input = dg.datagrid('input', param);
		if (!input){
			dg.datagrid('editCell', {
				index: param.index,
				field: param.field,
				value: ''
			});
			return false;
		}		
	}

	function getCurrCell(target){
		var cell = $(target).datagrid('getPanel').find('td.datagrid-row-selected');
		if (cell.length){
			return {
				index: parseInt(cell.closest('tr.datagrid-row').attr('datagrid-row-index')),
				field: cell.attr('field')
			};
		} else {
			return null;
		}
	}

	function unselectCell(target, p){
		var opts = $(target).datagrid('options');
		var cell = opts.finder.getTr(target, p.index).find('td[field="'+p.field+'"]');
		cell.removeClass('datagrid-row-selected');
		opts.onUnselectCell.call(target, p.index, p.field);
	}

	function unselectAllCells(target){
		var panel = $(target).datagrid('getPanel');
		panel.find('td.datagrid-row-selected').removeClass('datagrid-row-selected');
	}

	function selectCell(target, p){
		var opts = $(target).datagrid('options');
		if (opts.singleSelect){
			unselectAllCells(target);
		}
		var cell = opts.finder.getTr(target, p.index).find('td[field="'+p.field+'"]');
		cell.addClass('datagrid-row-selected');
		opts.onSelectCell.call(target, p.index, p.field);
	}

	function getSelectedCells(target){
		var cells = [];
		var panel = $(target).datagrid('getPanel');
		panel.find('td.datagrid-row-selected').each(function(){
			var td = $(this);
			cells.push({
				index: parseInt(td.closest('tr.datagrid-row').attr('datagrid-row-index')),
				field: td.attr('field')
			});
		});
		return cells;
	}

	function gotoCell(target, p){
		var dg = $(target);
		var opts = dg.datagrid('options');
		var panel = dg.datagrid('getPanel').focus();

		var cparam = dg.datagrid('cell');
		if (cparam){
			var input = dg.datagrid('input', cparam);
			if (input){
				input.focus();
				return;
			}
		}

		if (typeof p == 'object'){
			_go(p);
			return;
		}
		var cell = panel.find('td.datagrid-row-selected');
		if (!cell){return;}
		var fields = dg.datagrid('getColumnFields',true).concat(dg.datagrid('getColumnFields'));
		var field = cell.attr('field');
		var tr = cell.closest('tr.datagrid-row');
		var rowIndex = parseInt(tr.attr('datagrid-row-index'));
		var colIndex = $.inArray(field, fields);

		if (p == 'up' && rowIndex > 0){
			rowIndex--;
		} else if (p == 'down' && rowIndex < dg.datagrid('getRows').length-1){
			rowIndex++;
		} else if (p == 'left'){
			var i = colIndex - 1;
			while(i >= 0){
				var col = dg.datagrid('getColumnOption', fields[i]);
				if (!col.hidden){
					colIndex = i;
					break;
				}
				i--;
			}
		} else if (p == 'right'){
			var i = colIndex + 1;
			while(i <= fields.length-1){
				var col = dg.datagrid('getColumnOption', fields[i]);
				if (!col.hidden){
					colIndex = i;
					break;
				}
				i++;
			}
		}

		field = fields[colIndex];

		_go({index:rowIndex, field:field});

		function _go(p){
			dg.datagrid('scrollTo', p.index);
			unselectAllCells(target);
			selectCell(target, p);
			var td = opts.finder.getTr(target, p.index, 'body', 2).find('td[field="'+p.field+'"]');
			if (td.length){
				var body2 = dg.data('datagrid').dc.body2;
				var left = td.position().left;
				if (left < 0){
					body2._scrollLeft(body2._scrollLeft() + left*(opts.isRtl?-1:1));
				} else if (left+td._outerWidth()>body2.width()){
					body2._scrollLeft(body2._scrollLeft() + (left+td._outerWidth()-body2.width())*(opts.isRtl?-1:1));
				}
			}
		}
	}

	// end the current cell editing
	function endCellEdit(target, accepted){
		var dg = $(target);
		var cell = dg.datagrid('cell');
		if (cell){
			var input = dg.datagrid('input', cell);
			if (input){
				if (accepted){
					if (dg.datagrid('validateRow', cell.index)){
						dg.datagrid('endEdit', cell.index);
						dg.datagrid('gotoCell', cell);
					} else {
						dg.datagrid('gotoCell', cell);
						input.focus();
						return false;
					}
				} else {
					dg.datagrid('cancelEdit', cell.index);
					dg.datagrid('gotoCell', cell);
				}
			}
		}
		return true;
	}

	function editCell(target, param){
		var dg = $(target);
		var opts = dg.datagrid('options');
		var input = dg.datagrid('input', param);
		if (input){
			dg.datagrid('gotoCell', param);
			input.focus();
			return;
		}
		if (!endCellEdit(target, true)){return;}
		if (opts.onBeforeCellEdit.call(target, param.index, param.field) == false){
			return;
		}

		var fields = dg.datagrid('getColumnFields',true).concat(dg.datagrid('getColumnFields'));
		$.map(fields, function(field){
			var col = dg.datagrid('getColumnOption', field);
			col.editor1 = col.editor;
			if (field != param.field){
				col.editor = null;
			}
		});

		var col = dg.datagrid('getColumnOption', param.field);
		if (col.editor){
			dg.datagrid('beginEdit', param.index);
			var input = dg.datagrid('input', param);
			if (input){
				dg.datagrid('gotoCell', param);
	            // input.focus();
	            setTimeout(function(){
	            	input.focus();
	            }, 0);
	            opts.onCellEdit.call(target, param.index, param.field, param.value);
			} else {
				dg.datagrid('cancelEdit', param.index);
				dg.datagrid('gotoCell', param);
			}
		} else {
			dg.datagrid('gotoCell', param);
		}

		$.map(fields, function(field){
			var col = dg.datagrid('getColumnOption', field);
			col.editor = col.editor1;
		});
	}

	function enableCellSelecting(target){
		var dg = $(target);
		var state = dg.data('datagrid');
		var panel = dg.datagrid('getPanel');
		var opts = state.options;
		var dc = state.dc;
		panel.attr('tabindex',1).css('outline-style','none').unbind('.cellediting').bind('keydown.cellediting', function(e){
			var h = opts.navHandler[e.keyCode];
			if (h){
				return h.call(target, e);
			}
		});
		dc.body1.add(dc.body2).unbind('.cellediting').bind('click.cellediting', function(e){
			var tr = $(e.target).closest('.datagrid-row');
			if (tr.length && tr.parent().length){
				var td = $(e.target).closest('td[field]', tr);
				if (td.length){
					var index = parseInt(tr.attr('datagrid-row-index'));
					var field = td.attr('field');
					var p = {
						index: index,
						field: field
					};
					if (opts.singleSelect){
						selectCell(target, p);
					} else {
						if (opts.ctrlSelect){
							if (e.ctrlKey){
								if (td.hasClass('datagrid-row-selected')){
									unselectCell(target, p);
								} else {
									selectCell(target, p);
								}
							} else {
								unselectAllCells(target);
								selectCell(target, p);
							}
						} else {
							if (td.hasClass('datagrid-row-selected')){
								unselectCell(target, p);
							} else {
								selectCell(target, p);
							}
						}
					}
				}
			}
		});

		opts.isRtl = dg.datagrid('getPanel').css('direction').toLowerCase()=='rtl';
		opts.OldOnBeforeSelect = opts.onBeforeSelect;
		opts.onBeforeSelect = function(){
			return false;
		};
		dg.datagrid('clearSelections');
	}

	function disableCellSelecting(target){
		var dg = $(target);
		var state = dg.data('datagrid');
		var panel = dg.datagrid('getPanel');
		var opts = state.options;
		opts.onBeforeSelect = opts.OldOnBeforeSelect || opts.onBeforeSelect;
		panel.unbind('.cellediting').find('td.datagrid-row-selected').removeClass('datagrid-row-selected');
		var dc = state.dc;
		dc.body1.add(dc.body2).unbind('cellediting');
	}

	function enableCellEditing(target){
		var dg = $(target);
		var opts = dg.datagrid('options');
                
		var panel = dg.datagrid('getPanel');
		panel.attr('tabindex',1).css('outline-style','none').unbind('.cellediting').bind('keydown.cellediting', function(e){
			var h = opts.navHandler[e.keyCode];
			if (h){
				return h.call(target, e);
			}
		}).bind('keypress.cellediting', function(e){
			return opts.navHandler['keypress'].call(target, e);
		});
		panel.panel('panel').unbind('.cellediting').bind('keydown.cellediting', function(e){
			e.stopPropagation();
		}).bind('keypress.cellediting', function(e){
			e.stopPropagation();
		});

		opts.isRtl = dg.datagrid('getPanel').css('direction').toLowerCase()=='rtl';
		opts.oldOnClickCell = opts.onClickCell;
		opts.oldOnDblClickCell = opts.onDblClickCell;
		opts.onClickCell = function(index, field, value){
			if (opts.clickToEdit){
				$(this).datagrid('editCell', {index:index,field:field});
			} else {
				if (endCellEdit(this, true)){
					$(this).datagrid('gotoCell', {
						index: index,
						field: field
					});
				}
			}
			opts.oldOnClickCell.call(this, index, field, value);
		}
		if (opts.dblclickToEdit){
			opts.onDblClickCell = function(index, field, value){
				$(this).datagrid('editCell', {index:index,field:field});
				opts.oldOnDblClickCell.call(this, index, field, value);
			}
		}
		opts.OldOnBeforeSelect = opts.onBeforeSelect;
		opts.onBeforeSelect = function(){
                    /*return false;*/
		};
		dg.datagrid('clearSelections')
	}

	function disableCellEditing(target){
		var dg = $(target);
		var opts = dg.datagrid('options');
		opts.onClickCell = opts.oldOnClickCell || opts.onClickCell;
		opts.onDblClickCell = opts.oldOnDblClickCell || opts.onDblClickCell;
		opts.onBeforeSelect = opts.OldOnBeforeSelect || opts.onBeforeSelect;
		dg.datagrid('getPanel').unbind('.cellediting').find('td.datagrid-row-selected').removeClass('datagrid-row-selected');
	}


	$.extend($.fn.datagrid.methods, {
		editCell: function(jq, param){
			return jq.each(function(){
				editCell(this, param);
			});
		},
		isEditing: function(jq, index){
			var opts = $.data(jq[0], 'datagrid').options;
			var tr = opts.finder.getTr(jq[0], index);
			return tr.length && tr.hasClass('datagrid-row-editing');
		},
		gotoCell: function(jq, param){
			return jq.each(function(){
				gotoCell(this, param);
			});
		},
		enableCellEditing: function(jq){
			return jq.each(function(){
				enableCellEditing(this);
			});
		},
		disableCellEditing: function(jq){
			return jq.each(function(){
				disableCellEditing(this);
			});
		},
		enableCellSelecting: function(jq){
			return jq.each(function(){
				enableCellSelecting(this);
			});
		},
		disableCellSelecting: function(jq){
			return jq.each(function(){
				disableCellSelecting(this);
			});
		},
		input: function(jq, param){
			if (!param){return null;}
			var ed = jq.datagrid('getEditor', param);
			if (ed){
				var t = $(ed.target);
				if (t.hasClass('textbox-f')){
					t = t.textbox('textbox');
				}
				return t;
			} else {
				return null;
			}
		},
		cell: function(jq){		// get current cell info {index,field}
			return getCurrCell(jq[0]);
		},
		getSelectedCells: function(jq){
			return getSelectedCells(jq[0]);
		}
	});

})(jQuery);

/** datagrid-scrollview **/
$.extend($.fn.datagrid.defaults, {
	rowHeight: 25,
	maxDivHeight: 10000000,
	maxVisibleHeight: 15000000,
	deltaTopHeight: 0,
	onBeforeFetch: function(page){},
	onFetch: function(page, rows){},
	loader: function(param, success, error){
		var opts = $(this).datagrid('options');
		if (!opts.url) return false;
		if (opts.view.type == 'scrollview'){
			param.page = param.page || 1;
			param.rows = param.rows || opts.pageSize;
		}
		$.ajax({
			type: opts.method,
			url: opts.url,
			data: param,
			dataType: 'json',
			success: function(data){
				success(data);
			},
			error: function(){
				error.apply(this, arguments);
			}
		});
	}
});
$.extend($.fn.datagrid.defaults.finder, {
    getRow: function(target, p){	// p can be row index or tr object
        var index = (typeof p == 'object') ? p.attr('datagrid-row-index') : p;
        var opts = $(target).datagrid('options');
        if (opts.view.type == 'scrollview'){
                index -= opts.view.index;
        }
        return $.data(target, 'datagrid').data.rows[index];
    }
});

var scrollview = $.extend({}, $.fn.datagrid.defaults.view, {
	type: 'scrollview',
	index: 0,
	r1: [],
	r2: [],
	rows: [],
	render: function(target, container, frozen){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var rows = this.rows || [];
		if (!rows.length) {
                    return;
		}
		var fields = $(target).datagrid('getColumnFields', frozen);
		
		if (frozen){
                    if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))){
                        return;
                    }
		}
		
		var index = this.index;
		var table = ['<div class="datagrid-btable-top"></div>',
		             '<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>'];
		for(var i=0; i<rows.length; i++) {
			var css = opts.rowStyler ? opts.rowStyler.call(target, index, rows[i]) : '';
			var classValue = '';
			var styleValue = '';
			if (typeof css == 'string'){
				styleValue = css;
			} else if (css){
				classValue = css['class'] || '';
				styleValue = css['style'] || '';
			}
			var cls = 'class="datagrid-row ' + (index % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + classValue + '"';
			var style = styleValue ? 'style="' + styleValue + '"' : '';
			var rowId = state.rowIdPrefix + '-' + (frozen?1:2) + '-' + index;
			table.push('<tr id="' + rowId + '" datagrid-row-index="' + index + '" ' + cls + ' ' + style + '>');
			table.push(this.renderRow.call(this, target, fields, frozen, index, rows[i]));
			table.push('</tr>');

			// render the detail row
			if (opts.detailFormatter){
				table.push('<tr style="display:none;">');
				if (frozen){
					table.push('<td colspan=' + (fields.length+(opts.rownumbers?1:0)) + ' style="border-right:0">');
				} else {
					table.push('<td colspan=' + (fields.length) + '>');
				}
				table.push('<div class="datagrid-row-detail">');
				if (frozen){
					table.push('&nbsp;');
				} else {
					table.push(opts.detailFormatter.call(target, index, rows[i]));
				}
				table.push('</div>');
				table.push('</td>');
				table.push('</tr>');
			}

			index++;
		}
		table.push('</tbody></table>');
		table.push('<div class="datagrid-btable-bottom"></div>');
		
		$(container).html(table.join(''));
	},
	
	renderRow: function(target, fields, frozen, rowIndex, rowData){
		var opts = $.data(target, 'datagrid').options;
		
		var cc = [];
		if (frozen && opts.rownumbers){
                    var rownumber = rowIndex + 1;
                    // if (opts.pagination){
                    // 	rownumber += (opts.pageNumber-1)*opts.pageSize;
                    // }
                    cc.push('<td class="datagrid-td-rownumber"><div class="datagrid-cell-rownumber">'+rownumber+'</div></td>');
		}
		for(var i=0; i<fields.length; i++){
			var field = fields[i];
			var col = $(target).datagrid('getColumnOption', field);
			if (col){
				var value = rowData[field];	// the field value
				var css = col.styler ? (col.styler(value, rowData, rowIndex)||'') : '';
				var classValue = '';
				var styleValue = '';
				if (typeof css == 'string'){
					styleValue = css;
				} else if (cc){
					classValue = css['class'] || '';
					styleValue = css['style'] || '';
				}
				var cls = classValue ? 'class="' + classValue + '"' : '';
				var style = col.hidden ? 'style="display:none;' + styleValue + '"' : (styleValue ? 'style="' + styleValue + '"' : '');
				
				cc.push('<td field="' + field + '" ' + cls + ' ' + style + '>');
				
				if (col.checkbox){
					style = '';
				} else if (col.expander){
					style = "text-align:center;height:16px;";
				} else {
					style = styleValue;
					if (col.align){style += ';text-align:' + col.align + ';'}
					if (!opts.nowrap){
						style += ';white-space:normal;height:auto;';
					} else if (opts.autoRowHeight){
						style += ';height:auto;';
					}
				}
				
				cc.push('<div style="' + style + '" ');
				if (col.checkbox){
					cc.push('class="datagrid-cell-check ');
				} else {
					cc.push('class="datagrid-cell ' + col.cellClass);
				}
				cc.push('">');
				
				if (col.checkbox){
					cc.push('<input type="checkbox" name="' + field + '" value="' + (value!=undefined ? value : '') + '">');
				} else if (col.expander) {
					//cc.push('<div style="text-align:center;width:16px;height:16px;">');
					cc.push('<span class="datagrid-row-expander datagrid-row-expand" style="display:inline-block;width:16px;height:16px;cursor:pointer;" />');
					//cc.push('</div>');
				} else if (col.formatter){
					cc.push(col.formatter(value, rowData, rowIndex));
				} else {
					cc.push(value);
				}
				
				cc.push('</div>');
				cc.push('</td>');
			}
		}
		return cc.join('');
	},
	
	bindEvents: function(target){
		var state = $.data(target, 'datagrid');
		var dc = state.dc;
		var opts = state.options;
		var body = dc.body1.add(dc.body2);
		var clickHandler = ($.data(body[0],'events')||$._data(body[0],'events')).click[0].handler;
		body.unbind('click').bind('click', function(e){
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!tr.length){return}
			if (tt.hasClass('datagrid-row-expander')){
				var rowIndex = parseInt(tr.attr('datagrid-row-index'));
				if (tt.hasClass('datagrid-row-expand')){
					$(target).datagrid('expandRow', rowIndex);
				} else {
					$(target).datagrid('collapseRow', rowIndex);
				}
				$(target).datagrid('fixRowHeight');
				
			} else {
				clickHandler(e);
			}
			e.stopPropagation();
		});
	},
	
	onBeforeRender: function(target){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var dc = state.dc;
		var view = this;

		state.data.firstRows = state.data.rows;
		state.data.rows = [];

		dc.body1.add(dc.body2).empty();
		this.rows = [];	// the rows to be rendered
		this.r1 = this.r2 = [];	// the first part and last part of rows
		
		init();
		createHeaderExpander();
		
		function init(){
			var pager = $(target).datagrid('getPager');
			pager.pagination({
				onSelectPage: function(pageNum, pageSize){
					opts.pageNumber = pageNum || 1;
					opts.pageSize = pageSize;
					pager.pagination('refresh',{
						pageNumber:pageNum,
						pageSize:pageSize
					});
					$(target).datagrid('gotoPage', opts.pageNumber);
				}
			});
			// erase the onLoadSuccess event, make sure it can't be triggered
			state.onLoadSuccess = opts.onLoadSuccess;
			opts.onLoadSuccess = function(){};
			if (!opts.remoteSort){
				var onBeforeSortColumn = opts.onBeforeSortColumn;
				opts.onBeforeSortColumn = function(name, order){
					var result = onBeforeSortColumn.call(this, name, order);
					if (result == false){
						return false;
					}
					state.data.rows = state.data.firstRows;
				}
			}
			dc.body2.unbind('.datagrid');
			setTimeout(function(){
				dc.body2.unbind('.datagrid').bind('scroll.datagrid', function(e){
					if (state.onLoadSuccess){
						opts.onLoadSuccess = state.onLoadSuccess;	// restore the onLoadSuccess event
						state.onLoadSuccess = undefined;
					}
					if (view.scrollTimer){
						clearTimeout(view.scrollTimer);
					}
					view.scrollTimer = setTimeout(function(){
						view.scrolling.call(view, target);
					}, 50);
				});
				dc.body2.triggerHandler('scroll.datagrid');
			}, 0);
		}
		function createHeaderExpander(){
			if (!opts.detailFormatter){return}
			
			var t = $(target);
			var hasExpander = false;
			var fields = t.datagrid('getColumnFields',true).concat(t.datagrid('getColumnFields'));
			for(var i=0; i<fields.length; i++){
				var col = t.datagrid('getColumnOption', fields[i]);
				if (col.expander){
					hasExpander = true;
					break;
				}
			}
			if (!hasExpander){
				if (opts.frozenColumns && opts.frozenColumns.length){
					opts.frozenColumns[0].splice(0,0,{field:'_expander',expander:true,width:24,resizable:false,fixed:true});
				} else {
					opts.frozenColumns = [[{field:'_expander',expander:true,width:24,resizable:false,fixed:true}]];
				}
				
				var t = dc.view1.children('div.datagrid-header').find('table');
				var td = $('<td rowspan="'+opts.frozenColumns.length+'"><div class="datagrid-header-expander" style="width:24px;"></div></td>');
				if ($('tr',t).length == 0){
					td.wrap('<tr></tr>').parent().appendTo($('tbody',t));
				} else if (opts.rownumbers){
					td.insertAfter(t.find('td:has(div.datagrid-header-rownumber)'));
				} else {
					td.prependTo(t.find('tr:first'));
				}
			}
			
			setTimeout(function(){
				view.bindEvents(target);
			},0);
		}
	},
	
	onAfterRender: function(target){
		$.fn.datagrid.defaults.view.onAfterRender.call(this, target);
		var dc = $.data(target, 'datagrid').dc;
		var footer = dc.footer1.add(dc.footer2);
		footer.find('span.datagrid-row-expander').css('visibility', 'hidden');
	},

	scrolling: function(target){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var dc = state.dc;
		if (!opts.finder.getRows(target).length){
			this.reload.call(this, target);
		} else {
			if (!dc.body2.is(':visible')){return}
			var headerHeight = dc.view2.children('div.datagrid-header').outerHeight();
			
			var topDiv = dc.body2.children('div.datagrid-btable-top');
			var bottomDiv = dc.body2.children('div.datagrid-btable-bottom');
			if (!topDiv.length || !bottomDiv.length){return;}
			var top = topDiv.position().top + topDiv._outerHeight() - headerHeight;
			var bottom = bottomDiv.position().top - headerHeight;
			top = Math.floor(top);
			bottom = Math.floor(bottom);

			if (top > dc.body2.height() || bottom < 0){
				this.reload.call(this, target);
			} else if (top > 0){
				var page = Math.floor(this.index/opts.pageSize);
				this.getRows.call(this, target, page, function(rows){
					this.page = page;
					this.r2 = this.r1;
					this.r1 = rows;
					this.index = (page-1)*opts.pageSize;
					this.rows = this.r1.concat(this.r2);
					this.populate.call(this, target);
				});
			} else if (bottom < dc.body2.height()){
				if (state.data.rows.length+this.index >= state.data.total){
					return;
				}
				var page = Math.floor(this.index/opts.pageSize)+2;
				if (this.r2.length){
					page++;
				}
				this.getRows.call(this, target, page, function(rows){
					this.page = page;
					if (!this.r2.length){
						this.r2 = rows;
					} else {
						this.r1 = this.r2;
						this.r2 = rows;
						this.index += opts.pageSize;
					}
					this.rows = this.r1.concat(this.r2);
					this.populate.call(this, target);
				});
			}
		}
	},
	reload: function(target){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var dc = state.dc;
		var top = $(dc.body2).scrollTop() + opts.deltaTopHeight;
		var index = Math.floor(top/opts.rowHeight);
		var page = Math.floor(index/opts.pageSize) + 1;
		
		this.getRows.call(this, target, page, function(rows){
			this.page = page;
			this.index = (page-1)*opts.pageSize;
			this.rows = rows;
			this.r1 = rows;
			this.r2 = [];
			this.populate.call(this, target);
			dc.body2.triggerHandler('scroll.datagrid');
		});
	},
	
	getRows: function(target, page, callback){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var index = (page-1)*opts.pageSize;

		if (index < 0){return}
		if (opts.onBeforeFetch.call(target, page) == false){return;}

		var rows = state.data.firstRows.slice(index, index+opts.pageSize);
		if (rows.length && (rows.length==opts.pageSize || index+rows.length==state.data.total)){
			opts.onFetch.call(target, page, rows);
			callback.call(this, rows);
		} else {
			var param = $.extend({}, opts.queryParams, {
				page: page,
				rows: opts.pageSize
			});
			if (opts.sortName){
				$.extend(param, {
					sort: opts.sortName,
					order: opts.sortOrder
				});
			}
			if (opts.onBeforeLoad.call(target, param) == false) return;
			
			$(target).datagrid('loading');
			var result = opts.loader.call(target, param, function(data){
				$(target).datagrid('loaded');
				var data = opts.loadFilter.call(target, data);
				opts.onFetch.call(target, page, data.rows);
				if (data.rows && data.rows.length){
					callback.call(opts.view, data.rows);
				} else {
					opts.onLoadSuccess.call(target, data);
				}
			}, function(){
				$(target).datagrid('loaded');
				opts.onLoadError.apply(target, arguments);
			});
			if (result == false){
				$(target).datagrid('loaded');
				if (!state.data.firstRows.length){
					opts.onFetch.call(target, page, state.data.firstRows);
					opts.onLoadSuccess.call(target, state.data);
				}
			}
		}
	},
	
	populate: function(target){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var dc = state.dc;
		var rowHeight = opts.rowHeight;
		var maxHeight = opts.maxDivHeight;

		if (this.rows.length){
			opts.view.render.call(opts.view, target, dc.body2, false);
			opts.view.render.call(opts.view, target, dc.body1, true);
			
			var body = dc.body1.add(dc.body2);
			var topDiv = body.children('div.datagrid-btable-top');
			var bottomDiv = body.children('div.datagrid-btable-bottom');
			var topHeight = this.index * rowHeight;
			var bottomHeight = state.data.total*rowHeight - this.rows.length*rowHeight - topHeight;
			fillHeight(topDiv, topHeight);
			fillHeight(bottomDiv, bottomHeight);

			state.data.rows = this.rows;
			
			var spos = dc.body2.scrollTop() + opts.deltaTopHeight;
			if (topHeight > opts.maxVisibleHeight){
				opts.deltaTopHeight = topHeight - opts.maxVisibleHeight;
				fillHeight(topDiv, topHeight - opts.deltaTopHeight);
			} else {
				opts.deltaTopHeight = 0;
			}
			if (bottomHeight > opts.maxVisibleHeight){
				fillHeight(bottomDiv, opts.maxVisibleHeight);
			} else if (bottomHeight == 0){
				var lastCount = state.data.total % opts.pageSize;
				if (lastCount){
					fillHeight(bottomDiv, dc.body2.height() - lastCount * rowHeight);
				}
			}

			$(target).datagrid('setSelectionState');
			dc.body2.scrollTop(spos - opts.deltaTopHeight);

			var pager = $(target).datagrid('getPager');
			pager.pagination('refresh', {
				pageNumber: this.page
			});

			opts.onLoadSuccess.call(target, {
				total: state.data.total,
				rows: this.rows
			});
		}
		function fillHeight(div, height){
			var count = Math.floor(height/maxHeight);
			var leftHeight = height - maxHeight*count;
			if (height < 0){
				leftHeight = 0;
			}
			var cc = [];
			for(var i=0; i<count; i++){
				cc.push('<div style="height:'+maxHeight+'px"></div>');
			}
			cc.push('<div style="height:'+leftHeight+'px"></div>');
			$(div).html(cc.join(''));
		}
	},

	updateRow: function(target, rowIndex, row){
		var opts = $.data(target, 'datagrid').options;
		var rows = $(target).datagrid('getRows');
		var rowData = opts.finder.getRow(target, rowIndex);

		var oldStyle = _getRowStyle(rowIndex);
		$.extend(rowData, row);
		var newStyle = _getRowStyle(rowIndex);
		var oldClassValue = oldStyle.c;
		var styleValue = newStyle.s;
		var classValue = 'datagrid-row ' + (rowIndex % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + newStyle.c;
		
		function _getRowStyle(rowIndex){
			var css = opts.rowStyler ? opts.rowStyler.call(target, rowIndex, rowData) : '';
			var classValue = '';
			var styleValue = '';
			if (typeof css == 'string'){
				styleValue = css;
			} else if (css){
				classValue = css['class'] || '';
				styleValue = css['style'] || '';
			}
			return {c:classValue, s:styleValue};
		}
		function _update(frozen){
			var fields = $(target).datagrid('getColumnFields', frozen);
			var tr = opts.finder.getTr(target, rowIndex, 'body', (frozen?1:2));
			var checked = tr.find('div.datagrid-cell-check input[type=checkbox]').is(':checked');
			tr.html(this.renderRow.call(this, target, fields, frozen, rowIndex, rowData));
			tr.attr('style', styleValue).removeClass(oldClassValue).addClass(classValue);
			if (checked){
				tr.find('div.datagrid-cell-check input[type=checkbox]')._propAttr('checked', true);
			}
		}
		
		_update.call(this, true);
		_update.call(this, false);
		$(target).datagrid('fixRowHeight', rowIndex);
	},

	// insertRow: function(target, index, row){
	// 	var state = $.data(target, 'datagrid');
	// 	var data = state.data;

	// 	if (index == undefined || index == null) index = data.rows.length;
	// 	if (index > data.rows.length) index = data.rows.length;
	// 	$.fn.datagrid.defaults.view.insertRow.call(this, target, index, row);
	// 	if (data.firstRows && index <= data.firstRows.length){
	// 		data.firstRows.splice(index, 0, row);
	// 	}
	// },
	insertRow: function(target, index, row){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var data = state.data;

		var total = $(target).datagrid('getData').total;
		if (index == null){index = total;}
		if (index > total){index = total;}
		if (data.firstRows && index <= data.firstRows.length){
			data.firstRows.splice(index, 0, row);
		}
		data.total++;

		var rows = this.r1.concat(this.r2);
		if (index < this.index){
			this.reload.call(this, target);
		} else if (index <= this.index+rows.length){
			rows.splice(index - this.index, 0, row);
			this.r1 = rows.splice(0, opts.pageSize);
			if (this.r2.length){
				this.r2 = rows.splice(0, opts.pageSize);
			}
			this.rows = this.r1.concat(this.r2);
			this.populate.call(this, target);
			state.dc.body2.triggerHandler('scroll.datagrid');
		}
	},

	// deleteRow: function(target, index){
	// 	var data = $(target).datagrid('getData');
	// 	$.fn.datagrid.defaults.view.deleteRow.call(this, target, index);
	// 	if (data.firstRows){
	// 		data.firstRows.splice(index, 1);
	// 	}
	// },
	deleteRow: function(target, index){
		var state = $.data(target, 'datagrid');
		var data = state.data;
		var opts = state.options;
		if (data.firstRows){
			data.firstRows.splice(index, 1);
		}
		data.total--;

		var rows = this.r1.concat(this.r2);
		if (index < this.index){
			this.reload.call(this, target);
		} else if (index < this.index+rows.length){
			rows.splice(index - this.index, 1);
			this.r1 = rows.splice(0, opts.pageSize);
			if (this.r1.length < opts.pageSize){
				this.reload.call(this, target);
			} else {
				this.r2 = [];
				this.rows = this.r1.concat(this.r2);
				this.populate.call(this, target);
				state.dc.body2.triggerHandler('scroll.datagrid');
			}
		}
	}
});

$.fn.datagrid.methods.baseGetRowIndex = $.fn.datagrid.methods.getRowIndex;
$.fn.datagrid.methods.baseScrollTo = $.fn.datagrid.methods.scrollTo;
$.fn.datagrid.methods.baseGotoPage = $.fn.datagrid.methods.gotoPage;
$.extend($.fn.datagrid.methods, {
	getRowIndex: function(jq, id){
		var opts = jq.datagrid('options');
		if (opts.view.type == 'scrollview'){
			// return jq.datagrid('baseGetRowIndex', id) + opts.view.index;
			var index = jq.datagrid('baseGetRowIndex', id);
			if (index == -1){
				return -1;
			} else {
				return index + opts.view.index;
			}
		} else {
			return jq.datagrid('baseGetRowIndex', id);
		}
	},
	getRow: function(jq, index){
		return jq.datagrid('options').finder.getRow(jq[0], index);
	},
	gotoPage: function(jq, param){
		return jq.each(function(){
			var target = this;
			var opts = $(target).datagrid('options');
			if (opts.view.type == 'scrollview'){
				var page, callback;
				if (typeof param == 'object'){
					page = param.page;
					callback = param.callback;
				} else {
					page = param;
				}
				opts.view.getRows.call(opts.view, target, page, function(rows){
					this.page = page;
					this.index = (page-1)*opts.pageSize;
					this.rows = rows;
					this.r1 = rows;
					this.r2 = [];
					this.populate.call(this, target);
					$(target).data('datagrid').dc.body2.scrollTop(this.index * opts.rowHeight - opts.deltaTopHeight);
					if (callback){
						callback.call(target, page);
					}
				});
			} else {
				$(target).datagrid('baseGotoPage', param);
			}
		});
	},
	scrollTo: function(jq, param){
		return jq.each(function(){
			var target = this;
			var opts = $(target).datagrid('options');
			var index, callback;
			if (typeof param == 'object'){
				index = param.index;
				callback = param.callback;
			} else {
				index = param;
			}
			var view = opts.view;
			if (view.type == 'scrollview'){
				if (index >= view.index && index < view.index+view.rows.length){
					$(target).datagrid('baseScrollTo', index);
					if (callback){
						callback.call(target, index);
					}
				} else if (index >= 0){
					var page = Math.floor(index/opts.pageSize) + 1;
					$(target).datagrid('gotoPage', {
						page: page,
						callback: function(){
							setTimeout(function(){
								$(target).datagrid('baseScrollTo', index);
								if (callback){
									callback.call(target, index);
								}
							}, 0);							
						}
					});
				}
			} else {
				$(target).datagrid('baseScrollTo', index);
				if (callback){
					callback.call(target, index);
				}
			}
		});
	}
});

$.extend($.fn.datagrid.methods, {
    fixDetailRowHeight: function(jq, index){
        return jq.each(function(){
            var opts = $.data(this, 'datagrid').options;
            var dc = $.data(this, 'datagrid').dc;
            var tr1 = opts.finder.getTr(this, index, 'body', 1).next();
            var tr2 = opts.finder.getTr(this, index, 'body', 2).next();
            // fix the detail row height
            if (tr2.is(':visible')){
                tr1.css('height', '');
                tr2.css('height', '');
                var height = Math.max(tr1.height(), tr2.height());
                tr1.css('height', height);
                tr2.css('height', height);
            }
            dc.body2.triggerHandler('scroll');
        });
    },
    getExpander: function(jq, index){	// get row expander object
        var opts = $.data(jq[0], 'datagrid').options;
        return opts.finder.getTr(jq[0], index).find('span.datagrid-row-expander');
    },
    // get row detail container
    getRowDetail: function(jq, index){
        var opts = $.data(jq[0], 'datagrid').options;
        var tr = opts.finder.getTr(jq[0], index, 'body', 2);
        return tr.next().find('div.datagrid-row-detail');
    },
    expandRow: function(jq, index){
        return jq.each(function(){
            var opts = $(this).datagrid('options');
            var dc = $.data(this, 'datagrid').dc;
            var expander = $(this).datagrid('getExpander', index);
            if (expander.hasClass('datagrid-row-expand')){
                expander.removeClass('datagrid-row-expand').addClass('datagrid-row-collapse');
                var tr1 = opts.finder.getTr(this, index, 'body', 1).next();
                var tr2 = opts.finder.getTr(this, index, 'body', 2).next();
                tr1.show();
                tr2.show();
                $(this).datagrid('fixDetailRowHeight', index);
                if (opts.onExpandRow){
                    var row = $(this).datagrid('getRows')[index];
                    opts.onExpandRow.call(this, index, row);
                }
            }
        });
    },
    collapseRow: function(jq, index){
        return jq.each(function(){
            var opts = $(this).datagrid('options');
            var dc = $.data(this, 'datagrid').dc;
            var expander = $(this).datagrid('getExpander', index);
            if (expander.hasClass('datagrid-row-collapse')){
                expander.removeClass('datagrid-row-collapse').addClass('datagrid-row-expand');
                var tr1 = opts.finder.getTr(this, index, 'body', 1).next();
                var tr2 = opts.finder.getTr(this, index, 'body', 2).next();
                tr1.hide();
                tr2.hide();
                dc.body2.triggerHandler('scroll');
                if (opts.onCollapseRow){
                    var row = $(this).datagrid('getRows')[index];
                    opts.onCollapseRow.call(this, index, row);
                }
            }
        });
    }
});
$.extend($.fn.datagrid.methods, {
    fixRownumber: function (jq) {
        return jq.each(function () {
            var $this = $(this);
            var panel = $this.datagrid("getPanel");
            var clone = $(".datagrid-cell-rownumber", panel).last().clone();
            clone.css({"position": "absolute", left: -1000}).appendTo('body');
			
            var width = clone.width("auto").width();
			
            if (width > 25) {
                $(".datagrid-header-rownumber,.datagrid-cell-rownumber", panel).width(width + 5);
                $this.datagrid("resize");
            } else {
                $(".datagrid-header-rownumber,.datagrid-cell-rownumber", panel).removeAttr("style");
            }
            
            clone.remove();
            clone = null;
        });
    }
});
$.extend($.fn.datagrid.methods, {
    resetSort: function(jq, param){
        return jq.each(function(){
            var state = $.data(this, 'datagrid');
            var opts = state.options;
            var dc = state.dc;
            var header = dc.header1.add(dc.header2);
            header.find('div.datagrid-cell').removeClass('datagrid-sort-asc datagrid-sort-desc');
            param = param || {};
            opts.sortName = param.sortName;
            opts.sortOrder = param.sortOrder || 'asc';
            if (opts.sortName) {
                var names = opts.sortName.split(',');
                var orders = opts.sortOrder.split(',');
                for (var i=0; i<names.length; i++) {
                    var col = $(this).datagrid('getColumnOption', names[i]);
                    header.find('div.'+col.cellClass).addClass('datagrid-sort-'+orders[i]);
                }
            }
        });
    }
});